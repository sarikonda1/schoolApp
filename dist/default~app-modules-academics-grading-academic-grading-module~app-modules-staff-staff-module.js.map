{"version":3,"sources":["webpack:///./src/app/modules/academics/grading/class-assessment-grades/class-assessment-grades.component.html","webpack:///./src/app/modules/academics/grading/class-assessment-grades/class-assessment-grades.component.scss","webpack:///./src/app/modules/academics/grading/class-assessment-grades/class-assessment-grades.component.ts","webpack:///./src/app/modules/academics/grading/test-schedule/schedules.component.html","webpack:///./src/app/modules/academics/grading/test-schedule/schedules.component.scss","webpack:///./src/app/modules/academics/grading/test-schedule/schedules.component.ts","webpack:///./src/app/modules/academics/grading/test-schedule/test-schedule.component.html","webpack:///./src/app/modules/academics/grading/test-schedule/test-schedule.component.scss","webpack:///./src/app/modules/academics/grading/test-schedule/test-schedule.component.ts","webpack:///./src/app/service/grading-service/api/student-assessment-grade.service.ts","webpack:///./src/app/service/report-card-service/grade-report.service.ts"],"names":[],"mappings":"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","file":"default~app-modules-academics-grading-academic-grading-module~app-modules-staff-staff-module.js","sourcesContent":["module.exports = \"<div class=\\\"p-sm-40\\\" id=\\\"map-grid\\\">\\n    <div *ngIf=\\\"isNavFromReports===false\\\" class=\\\"p-12 font-size-18 text-uppercase\\\" translate>Class Assessment Grades\\n    </div>\\n    <div class=\\\"mat-elevation-z6 simple-table-container radius-t-20\\\">\\n        <div *ngIf=\\\"isNavFromReports===false\\\" fxLayoutAlign=\\\"end center\\\" class=\\\"p-20\\\">\\n            <button mat-button type='button' (click)=\\\"getHelpText('Class Assessment Grades')\\\">\\n                <mat-icon class=\\\"grey-600-fg\\\">info</mat-icon>\\n            </button>\\n        </div>\\n        <mat-divider *ngIf=\\\"isNavFromReports===false\\\"></mat-divider>\\n\\n        <form *ngIf=\\\"isNavFromReports===false\\\" [formGroup]=\\\"classAssessmentGradesFormGroup\\\"\\n            #classAssessmentGroupsConfiguration=\\\"ngForm\\\" (ngSubmit)=\\\"getAssessmentConfigurationList()\\\" class=\\\"p-sm-32\\\">\\n            <div fxFlexFill fxLayout=\\\"column\\\" fxLayout.gt-sm=\\\"row\\\">\\n                <mat-form-field appearance=\\\"outline\\\" class=\\\"pr-sm-20\\\" fxLayout=\\\"column\\\" fxFlex=\\\"100\\\" fxFlex.gt-sm=\\\"25\\\"\\n                    fxFlexFill>\\n                    <mat-label #schoolBoardId translate>School Board</mat-label>\\n                    <mat-select formControlName=\\\"schoolBoardId\\\" (selectionChange)=\\\"onSelectSchoolBoard($event)\\\"\\n                        required>\\n                        <mat-option *ngFor=\\\"let schoolBoard of availableSchoolBoards\\\" [value]=\\\"schoolBoard.value\\\">\\n                            {{schoolBoard.label}}\\n                        </mat-option>\\n                    </mat-select>\\n                    <mat-error>\\n                        <app-validation [labelName]=\\\"schoolBoardId.innerText\\\"\\n                            [validationControl]=\\\"classAssessmentGradesFormGroup.controls.schoolBoardId\\\"\\n                            [doValidate]=\\\"classAssmentGroupsFormSubmitted\\\">\\n                        </app-validation>\\n                    </mat-error>\\n                </mat-form-field>\\n\\n                <mat-form-field appearance=\\\"outline\\\" class=\\\"pr-sm-20\\\" fxLayout=\\\"column\\\" fxFlex=\\\"100\\\" fxFlex.gt-sm=\\\"25\\\"\\n                    fxFlexFill>\\n                    <mat-label #class translate>Class</mat-label>\\n                    <mat-select formControlName=\\\"classId\\\" (selectionChange)=\\\"onClassChange($event.value)\\\" required>\\n                        <mat-option *ngFor=\\\"let availableClass of availableClasses\\\" [value]=\\\"availableClass.value\\\">\\n                            {{availableClass.label}}\\n                        </mat-option>\\n                    </mat-select>\\n                    <mat-error>\\n                        <app-validation [labelName]=\\\"class.innerText\\\"\\n                            [validationControl]=\\\"classAssessmentGradesFormGroup.controls.classId\\\"\\n                            [doValidate]=\\\"classAssmentGroupsFormSubmitted\\\">\\n                        </app-validation>\\n                    </mat-error>\\n                </mat-form-field>\\n\\n                <mat-form-field appearance=\\\"outline\\\" class=\\\"pr-sm-20\\\" fxLayout=\\\"column\\\" fxFlex=\\\"100\\\" fxFlex.gt-sm=\\\"25\\\"\\n                    fxFlexFill>\\n                    <mat-label #section translate>Section</mat-label>\\n                    <mat-select formControlName=\\\"sectionId\\\" (selectionChange)=\\\"onSectionChange($event.value, true)\\\"\\n                        required>\\n                        <mat-option *ngFor=\\\"let availableSection of availableSections\\\" [value]=\\\"availableSection.value\\\">\\n                            {{availableSection.label}}\\n                        </mat-option>\\n                    </mat-select>\\n                    <mat-error>\\n                        <app-validation [labelName]=\\\"section.innerText\\\"\\n                            [validationControl]=\\\"classAssessmentGradesFormGroup.controls.sectionId\\\"\\n                            [doValidate]=\\\"classAssmentGroupsFormSubmitted\\\">\\n                        </app-validation>\\n                    </mat-error>\\n                </mat-form-field>\\n                <mat-form-field appearance=\\\"outline\\\" class=\\\"pr-sm-20\\\" fxLayout=\\\"column\\\" fxFlex=\\\"100\\\" fxFlex.gt-sm=\\\"25\\\"\\n                    fxFlexFill>\\n                    <mat-label #gradingTerm translate>Grading Term</mat-label>\\n                    <mat-select formControlName=\\\"gradingTermId\\\" (selectionChange)=\\\"onGradingTermChange($event.value)\\\"\\n                        required>\\n                        <mat-option *ngFor=\\\"let gradingTerm of gradingTerms\\\" [value]=\\\"gradingTerm.value\\\">\\n                            {{gradingTerm.label}}\\n                        </mat-option>\\n                    </mat-select>\\n                    <mat-error>\\n                        <app-validation [labelName]=\\\"gradingTerm.innerText\\\"\\n                            [validationControl]=\\\"classAssessmentGradesFormGroup.controls.gradingTermId\\\"\\n                            [doValidate]=\\\"classAssmentGroupsFormSubmitted\\\">\\n                        </app-validation>\\n                    </mat-error>\\n                </mat-form-field>\\n            </div>\\n            <div fxFlexFill fxLayout=\\\"column\\\" fxLayout.gt-sm=\\\"row\\\" class=\\\"pt-20\\\">\\n\\n                <mat-form-field appearance=\\\"outline\\\" class=\\\"pr-sm-20\\\" fxLayout=\\\"column\\\" fxFlex=\\\"100\\\" fxFlex.gt-sm=\\\"25\\\"\\n                    fxFlexFill>\\n                    <mat-label #assessmentGroup translate>Assessment Group</mat-label>\\n                    <mat-select formControlName=\\\"assessmentGroupId\\\"\\n                        (selectionChange)=\\\"onSelectAssessmentGroup($event.value)\\\">\\n                        <mat-option *ngIf=\\\"assessmentGroupsList?.length\\\"></mat-option>\\n                        <mat-option *ngFor=\\\"let assessmentGroup of assessmentGroupsList\\\"\\n                            [value]=\\\"assessmentGroup.value\\\">\\n                            {{assessmentGroup.label}}\\n                        </mat-option>\\n                    </mat-select>\\n                </mat-form-field>\\n                <mat-form-field appearance=\\\"outline\\\" class=\\\"pr-sm-20\\\" fxLayout=\\\"column\\\" fxFlex=\\\"100\\\" fxFlex.gt-sm=\\\"25\\\"\\n                    fxFlexFill>\\n                    <mat-label #assessmentCategory translate>Assessment Category</mat-label>\\n                    <mat-select formControlName=\\\"assessmentCategoryId\\\"\\n                        (selectionChange)=\\\"onSelectAssessmentCategory($event.value)\\\">\\n                        <mat-option *ngIf=\\\"assessmentCategoriesList?.length\\\"></mat-option>\\n                        <mat-option *ngFor=\\\"let assessmentCategory of assessmentCategoriesList\\\"\\n                            [value]=\\\"assessmentCategory.value\\\">\\n                            {{assessmentCategory.label}}\\n                        </mat-option>\\n                    </mat-select>\\n                </mat-form-field>\\n\\n                <mat-form-field appearance=\\\"outline\\\" class=\\\"pr-sm-20\\\" fxLayout=\\\"column\\\" fxFlex=\\\"100\\\" fxFlex.gt-sm=\\\"25\\\"\\n                    fxFlexFill>\\n                    <mat-label #assessmentParam translate>Assessment Parameter</mat-label>\\n                    <mat-select formControlName=\\\"assessmentParameterId\\\">\\n                        <mat-option *ngIf=\\\"assessmentParams?.length\\\"></mat-option>\\n                        <mat-option *ngFor=\\\"let assessmentParam of assessmentParams\\\" [value]=\\\"assessmentParam.value\\\">\\n                            {{assessmentParam.label}}\\n                        </mat-option>\\n                    </mat-select>\\n                </mat-form-field>\\n\\n                <mat-form-field appearance=\\\"outline\\\" class=\\\"pr-sm-20\\\" fxLayout=\\\"column\\\" fxFlex=\\\"100\\\" fxFlex.gt-sm=\\\"25\\\"\\n                    fxFlexFill>\\n                    <mat-label #assessmentParam translate>Students</mat-label>\\n                    <mat-select formControlName=\\\"studentNames\\\">\\n                        <mat-option *ngIf=\\\"filterdStudents?.length\\\"></mat-option>\\n                        <mat-option *ngFor=\\\"let tempFilteredStudent of filterdStudents\\\"\\n                            [value]=\\\"tempFilteredStudent.schoolAcademicSessionStudentId\\\">\\n                            {{tempFilteredStudent.studentName}}\\n                        </mat-option>\\n                    </mat-select>\\n                </mat-form-field>\\n            </div>\\n            <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"end center\\\" class=\\\"mt-20\\\">\\n                <button mat-raised-button type=\\\"reset\\\" class=\\\"text-uppercase mr-12\\\" (click)=\\\"clearSearchForm()\\\"\\n                    translate>{{'Clear' | translate}}</button>\\n                <button mat-raised-button type=\\\"submit\\\" color=\\\"accent\\\" class=\\\"text-uppercase\\\"\\n                    translate>{{'Search' | translate}}</button>\\n            </div>\\n        </form>\\n\\n        <mat-divider *ngIf=\\\"isNavFromReports===false\\\" id=\\\"mat_divider\\\"></mat-divider>\\n        <app-table *ngIf=\\\"studentAssessmentDeatils?.rows?.length; else multi_student_table\\\"\\n            [settings]=\\\"studentAssessmentDeatils\\\" [rowTemplateRef]=\\\"studentGrade\\\"\\n            (additionalButtonClick)=\\\"onAdditionalButtonClick($event)\\\" (changeRowDropdown)='changeRowDropdown($event)'\\n            (selectedRows)='selectedRows($event)' [additionalExpantionPanelTemplateRef]=\\\"studentAssesmentGradeConfig\\\"\\n            [massActionTemplateRef]=\\\"massActions\\\" [showAdditonalExpansionPanel]=\\\"setGradeForm\\\"\\n            (getTableData)='getStudentTableData($event)'></app-table>\\n        <ng-template #multi_student_table>\\n            <app-table\\n                *ngIf=\\\"(testEmitter$ | async) && rows && rows !== undefined && rows !== null && rows.length > 0 && classAssessmentGradesFormGroup.valid\\\"\\n                [settings]=\\\"tableSettings\\\" (additionalButtonClick)=\\\"onAdditionalButtonClick($event)\\\"\\n                (getTableData)='getTableData($event)' (selectedRows)='selectedRows($event)'\\n                (changeRowDropdown)='changeRowDropdown($event)' [rowTemplateRef]=\\\"studentGrade\\\"\\n                [additionalExpantionPanelTemplateRef]=\\\"studentGradeAssesmentConfig\\\"\\n                [massActionTemplateRef]=\\\"massActions\\\" [showAdditonalExpansionPanel]=\\\"setGradeForm\\\">\\n            </app-table>\\n        </ng-template>\\n        <div *ngIf=\\\"isSearchPerformed && classAssessmentGradesFormGroup.valid\\\" class=\\\"errorMsg\\\">\\n            <p *ngIf=\\\"isStudentSearch && !rows.length\\\" class=\\\"red-text text-center mb-0 font-weight-bold p-24\\\"\\n                translate>Assessment Parameter Configuration is missing for the Student's Class and/or Section</p>\\n            <p *ngIf=\\\"!isStudentSearch && !rows?.length\\\" class=\\\"red-text text-center mb-0 font-weight-bold p-24\\\"\\n                translate>No Data Found</p>\\n        </div>\\n    </div>\\n</div>\\n<ng-template #studentGradeAssesmentConfig>\\n    <form (ngSubmit)=\\\"updateAssessmentConfiguration('updateAssesmentGradesFormGroup')\\\"\\n        [formGroup]=\\\"updateAssesmentGradesFormGroup\\\" class=\\\"mt-24\\\" fxLayout=\\\"column\\\">\\n        <div class=\\\"text-center accent-fg\\\">{{'Please Select a Grade for the Selected Assessments.' | translate}}</div>\\n        <div fxLayout=\\\"row\\\" fxFlex=\\\"100\\\" class=\\\"mt-20\\\" fxLayoutAlign=\\\"center center\\\">\\n            <mat-form-field appearance=\\\"outline\\\" class=\\\"px-sm-12\\\" fxLayout=\\\"column\\\" fxFlex=\\\"100\\\" fxFlexFill\\n                fxFlex.gt-sm=\\\"50\\\" *ngFor=\\\"let assesmentSubCat of availableAssessmentSubCategories\\\">\\n                <mat-label #grade translate>{{assesmentSubCat.name}}</mat-label>\\n                <mat-select [formControlName]=\\\"assesmentSubCat.name\\\" required>\\n                    <mat-option *ngFor=\\\"let option of assesmentSubCat.options\\\" [value]=\\\"option.value\\\">\\n                        {{option.label}}\\n                    </mat-option>\\n                </mat-select>\\n                <mat-error>\\n                    <app-validation [labelName]=\\\"grade.innerText\\\"\\n                        [validationControl]=\\\"updateAssesmentGradesFormGroup.controls.Grade\\\" [doValidate]=true>\\n                    </app-validation>\\n                </mat-error>\\n            </mat-form-field>\\n        </div>\\n        <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"end center\\\" class=\\\"my-12\\\">\\n            <button mat-raised-button type=\\\"button\\\" class=\\\"text-uppercase\\\"\\n                (click)=\\\"setGrade(false)\\\">{{'Cancel' | translate}}</button>\\n            <button mat-raised-button type=\\\"submit\\\" color=\\\"accent\\\" class=\\\"text-uppercase mx-12\\\"\\n                translate>{{'Submit' | translate}}</button>\\n        </div>\\n    </form>\\n</ng-template>\\n\\n\\n<ng-template #studentAssesmentGradeConfig>\\n    <form (ngSubmit)=\\\"updateAssessmentConfiguration('studentGradeAssessmentForm')\\\"\\n        [formGroup]=\\\"studentGradeAssessmentForm\\\" class=\\\"mt-24\\\" fxLayout=\\\"column\\\">\\n        <mat-list fxLayout=\\\"row wrap\\\" class=\\\"pt-0 confirm-table border border\\\">\\n            <mat-list-item fxLayout=\\\"column\\\" fxFlex=\\\"50\\\" *ngIf=\\\"rows[0]?.studentName\\\" translate>Student\\n            </mat-list-item>\\n            <mat-list-item *ngIf=\\\"rows[0]?.studentName\\\" fxLayout=\\\"column\\\" fxFlex=\\\"50\\\">\\n                {{rows[0].studentName}}</mat-list-item>\\n            <mat-list-item *ngIf=\\\"rows[0]?.className\\\" fxLayout=\\\"column\\\" fxFlex=\\\"50\\\" translate>Class\\n            </mat-list-item>\\n            <mat-list-item *ngIf=\\\"rows[0]?.className\\\" fxLayout=\\\"column\\\" fxFlex=\\\"50\\\">\\n                {{rows[0].className}}</mat-list-item>\\n            <mat-list-item *ngIf=\\\"rows[0]?.sectionName\\\" fxLayout=\\\"column\\\" fxFlex=\\\"50\\\" translate>Section\\n            </mat-list-item>\\n            <mat-list-item *ngIf=\\\"rows[0]?.sectionName\\\" fxLayout=\\\"column\\\" fxFlex=\\\"50\\\">\\n                {{rows[0].sectionName}}</mat-list-item>\\n            <mat-list-item *ngIf=\\\"rows[0]?.gradeTermName\\\" fxLayout=\\\"column\\\" fxFlex=\\\"50\\\" translate>Grading Term\\n            </mat-list-item>\\n            <mat-list-item *ngIf=\\\"rows[0]?.gradeTermName\\\" fxLayout=\\\"column\\\" fxFlex=\\\"50\\\">\\n                {{rows[0].gradeTermName}}</mat-list-item>\\n        </mat-list>\\n        <div fxLayout.gt-sm=\\\"row\\\" fxLayout=\\\"column\\\" fxFlex=\\\"100\\\" class=\\\"mt-20\\\">\\n            <mat-form-field appearance=\\\"outline\\\" class=\\\"px-sm-12\\\" fxLayout=\\\"column\\\" fxFlex=\\\"100\\\" fxFlex.gt-sm=\\\"25\\\"\\n                fxFlexFill>\\n                <mat-label #grade translate>Student Grade</mat-label>\\n                <mat-select formControlName=\\\"studentGrade\\\">\\n                    <mat-option *ngFor=\\\"let grade of gradeIndicatorList\\\" [value]=\\\"grade.value\\\">\\n                        {{grade.label}}\\n                    </mat-option>\\n                </mat-select>\\n                <mat-error>\\n                    <app-validation [labelName]=\\\"grade.innerText\\\"\\n                        [validationControl]=\\\"studentGradeAssessmentForm.controls.studentGrade\\\" [doValidate]=true>\\n                    </app-validation>\\n                </mat-error>\\n            </mat-form-field>\\n        </div>\\n        <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"end center\\\" class=\\\"my-12\\\">\\n            <button mat-raised-button type=\\\"button\\\" class=\\\"text-uppercase\\\"\\n                (click)=\\\"setGrade(false)\\\">{{'Cancel' | translate}}</button>\\n            <button mat-raised-button type=\\\"submit\\\" color=\\\"accent\\\" class=\\\"text-uppercase mx-12\\\"\\n                translate>{{'Submit' | translate}}</button>\\n        </div>\\n    </form>\\n</ng-template>\\n\\n<ng-template #massActions>\\n    <button mat-raised-button type=\\\"button\\\" class=\\\"mx-4 text-uppercase\\\" color=\\\"accent\\\" (click)=\\\"setGrade(true)\\\"\\n        [disabled]=\\\"setGradeForm\\\" translate>{{'Set Grade' | translate}}</button>\\n</ng-template>\\n\\n<ng-template #studentGrade let-row=\\\"row\\\" let-name=\\\"name\\\" let-value=\\\"value\\\" let-columnIndex=\\\"columnIndex\\\">\\n    <mat-form-field style=\\\"padding: 10px 0 0;\\\">\\n        <mat-select [placeholder]=\\\"\\\" [(value)]=\\\"value\\\"\\n            (selectionChange)=\\\"onDropDownChange(row, $event.value, name,  columnIndex)\\\">\\n            <mat-option *ngFor=\\\"let option of gradeIndicatorList\\\" [value]=\\\"option.value\\\">\\n                {{option.label }} </mat-option>\\n        </mat-select>\\n        <mat-icon class=\\\"tick-position green-fg\\\" *ngIf=\\\"dropdownChangeIndex['check' + name + '_' + columnIndex]\\\">check\\n        </mat-icon>\\n        <mat-icon class=\\\"tick-position red-fg\\\" *ngIf=\\\"dropdownChangeIndex['error' + name + '_' + columnIndex]\\\">error\\n        </mat-icon>\\n        <mat-spinner class=\\\"spinner-position\\\" [diameter]=\\\"20\\\" color=\\\"accent\\\"\\n            *ngIf=\\\"dropdownChangeIndex['spinner_' + name + '_' + columnIndex]\\\"></mat-spinner>\\n    </mat-form-field>\\n</ng-template>\"","module.exports = \".tick-position {\\n  position: absolute;\\n  right: -35px; }\\n\\n.spinner-position {\\n  position: absolute;\\n  right: -35px;\\n  top: 10px; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi92YXIvd3d3L2h0bWwvc2Nob29sLW1hbmFnZW1lbnQtZnVzZS9zcmMvYXBwL21vZHVsZXMvYWNhZGVtaWNzL2dyYWRpbmcvY2xhc3MtYXNzZXNzbWVudC1ncmFkZXMvY2xhc3MtYXNzZXNzbWVudC1ncmFkZXMuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDSSxrQkFBa0I7RUFDbEIsWUFBWSxFQUFBOztBQUdoQjtFQUNJLGtCQUFrQjtFQUNsQixZQUFZO0VBQ1osU0FBUSxFQUFBIiwiZmlsZSI6InNyYy9hcHAvbW9kdWxlcy9hY2FkZW1pY3MvZ3JhZGluZy9jbGFzcy1hc3Nlc3NtZW50LWdyYWRlcy9jbGFzcy1hc3Nlc3NtZW50LWdyYWRlcy5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIi50aWNrLXBvc2l0aW9ue1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICByaWdodDogLTM1cHg7XG59O1xuXG4uc3Bpbm5lci1wb3NpdGlvbntcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgcmlnaHQ6IC0zNXB4O1xuICAgIHRvcDoxMHB4O1xufSJdfQ== */\"","import { MatDialog, MatSnackBar, MatAutocompleteTrigger } from '@angular/material';\nimport { CommonService } from 'app/service/common.service';\nimport { Component, OnInit, TemplateRef, ViewChild, ChangeDetectorRef, Input } from '@angular/core';\nimport { CommonComponent } from 'app/shared/common/common.component';\nimport { FormBuilder, FormControl, FormGroup, Validators, FormArray } from '@angular/forms';\nimport { ClassSectionService } from '../../../../service/academic-service/api/class-section.service';\nimport { GardeTermConfigurationService } from '../../../../service/grading-service/api/garde-term-configuration.service';\nimport { AssessmentParameterService } from '../../../../service/assessment-service/api/assessment-parameters.service';\nimport { StudentAssessmentGradeService } from '../../../../service/grading-service/api/student-assessment-grade.service';\nimport { ClassAssesmentGradesParamListViewModel } from '../models/class-assesment-grades-param-list-view-model';\nimport { ClassAssessmentFilterView } from '../models/class-assessmnet-garde-filter-view';\nimport { BehaviorSubject } from 'rxjs';\nimport { StudentDBService } from 'app/service/student-information-system/student-db.service';\nimport { GradeReportService } from 'app/service/report-card-service/grade-report.service';\nimport { ActivatedRoute } from '@angular/router';\nimport { StudentDatabaseService } from '../../../../service/academic-service/api/student-database.service';\nimport { AppSettings } from 'app/app.constants';\n\n\n\n@Component({\n  selector: 'app-class-assessment-grades',\n  templateUrl: './class-assessment-grades.component.html',\n  styleUrls: ['./class-assessment-grades.component.scss'],\n  providers: [StudentDBService, GradeReportService, StudentDatabaseService]\n})\nexport class ClassAssessmentGradesComponent extends CommonComponent implements OnInit {\n\n  classAssessmentGradesFormGroup: FormGroup;\n  updateAssesmentGradesFormGroup: FormGroup;\n  gradingTerms: Array<any> = [];\n  // assessmentParams = Promise.resolve([]);\n  assessmentParams: Array<any> = [];\n  // assessmentGroupsList = Promise.resolve([]);\n  assessmentGroupsList: Array<any> = [];\n  // assessmentCategoriesList = Promise.resolve([]);\n  assessmentCategoriesList: Array<any> = [];\n\n  classAssmentGroupsFormSubmitted = false;\n  tableSettings: any = {};\n  isEditMode = false;\n  setGradeForm = false;\n  rows: Array<any>;\n  selectedRowsData: Array<any>;\n  columns: any[];\n  gradeIndicatorList: any[];\n  availableAssessmentSubCategories: any[];\n  editButton = {};\n  classAssesmentGradesParamListViewModel: ClassAssesmentGradesParamListViewModel;\n  isSearchPerformed = false;\n  isShowAll = true;\n  isSubcategoiriesAvailable = false;\n  filterView: ClassAssessmentFilterView;\n  isStaffLogin = false;\n  staffInfo: any[] = [];\n  hideButtons = false;\n\n  testVariable: string;\n  testEmitter$ = new BehaviorSubject<string>(this.testVariable);\n  filterdStudents: any[] = [];\n  currentComponent = 'ClassAssessmentGradesComponent';\n  studentAssessmentDeatils: any;\n  gradeListIndicator: any[] = [];\n  studentGradeForm: FormGroup;\n\n  studentGradeAssessmentForm: FormGroup;\n  displayName: any;\n  tempFilteredStudents: any[] = [];\n  isStudentSearch = false;\n  isNavFromReports = false;\n  marksIndex: any;\n\n  dropdownChangeIndex: any;\n\n  @Input() studentData: any;\n  constructor(\n    private commonComponent: CommonComponent,\n    private classSectionService: ClassSectionService,\n    private studentDbService: StudentDBService,\n    private _gradingTermConfigurationService: GardeTermConfigurationService,\n    private _assessmetParametersService: AssessmentParameterService,\n    private _studentAssessmentGradeService: StudentAssessmentGradeService,\n    private route: ActivatedRoute,\n    private fb: FormBuilder,\n    private studentDatabaseService: StudentDatabaseService,\n    public commonService: CommonService,\n    public dialog: MatDialog,\n    public snackBar: MatSnackBar,\n    public changeDetecor: ChangeDetectorRef,\n    public gradeReportService: GradeReportService\n  ) {\n    super();\n  }\n\n  ngOnInit(): void {\n    this.initializeForm();\n    this.dropdownChangeIndex = [];\n    if (this.studentData) {\n      this.isNavFromReports = true;\n      this.classAssessmentGradesFormGroup.controls['studentNames'].setValue(this.studentData.student.value);\n      // this.classAssessmentGradesFormGroup.controls['searchByName'].setValue('name');\n      // this.classAssessmentGradesFormGroup.value.searchByName = 'name';\n      this.getAvailableSections(this.studentData.schoolBoardId, this.studentData.classId);\n      this.getGradingTerms(this.studentData.classId, this.studentData.sectionId);\n      this.classAssessmentGradesFormGroup.patchValue(this.studentData);\n      this.getAssessmentConfigurationList();\n    } else {\n      this.isNavFromReports = false;\n    }\n  }\n\n  initializeForm(): void {\n    this.filterView = {\n      sortBy: '',\n      sortOrder: 0,\n      schoolAcademicSessionStudentId: ''\n    };\n\n    this.classAssessmentGradesFormGroup = new FormGroup({\n      schoolBoardId: new FormControl('', [Validators.required]),\n      classId: new FormControl('', [Validators.required]),\n      sectionId: new FormControl('', [Validators.required]),\n      gradingTermId: new FormControl('', [Validators.required]),\n      assessmentCategoryId: new FormControl(''),\n      assessmentGroupId: new FormControl(''),\n      assessmentParameterId: new FormControl(''),\n      // searchByName: new FormControl('assessment'),\n      studentNames: new FormControl('')\n    });\n\n    this.studentGradeAssessmentForm = new FormGroup({\n      studentGrade: new FormControl('', [Validators.required]),\n    });\n\n    this.studentGradeForm = new FormGroup({\n      grades: this.fb.array([])\n    });\n\n    if (this.getTokenParam('_as')) {\n      this.getAvailableSchoolBoards('classAssessmentGradesFormGroup', 'schoolBoardId');\n    }\n  }\n\n  getStudent(user: any): void {\n    if (user) {\n      this.displayName = user.label === undefined ? user : user.label;\n      return this.displayName;\n    }\n  }\n\n  getStudents(): void {\n    if (this.classAssessmentGradesFormGroup.value.schoolBoardId &&\n      this.classAssessmentGradesFormGroup.value.classId &&\n      this.classAssessmentGradesFormGroup.value.sectionId) {\n      this.studentDatabaseService\n        .studentNamesBaseOnAcademicSession(\n          null,\n          this.classAssessmentGradesFormGroup.value.schoolBoardId,\n          this.classAssessmentGradesFormGroup.value.classId,\n          this.classAssessmentGradesFormGroup.value.sectionId,\n          null)\n        .subscribe(res => {\n          this.filterdStudents = (res.studentsList.length > 0) ? res.studentsList : [];\n        });\n    }\n  }\n\n  onSelectSchoolBoard(event): void {\n    this.classAssessmentGradesFormGroup.patchValue({\n      classId: '',\n      gradingTermId: '',\n      sectionId: '',\n      assessmentGroupId: '',\n      assessmentCategoryId: '',\n      assessmentParameterId: ''\n    });\n    this.resetRowsOnChange();\n    this.getAvailableClasses(event.value);\n    this.classAssessmentGradesFormGroup.controls['studentNames'].patchValue(null);\n    this.filterdStudents = [];\n    this.getStudents();\n  }\n\n\n  onClassChange(classId): void {\n    this.classAssessmentGradesFormGroup.patchValue({\n      gradingTermId: '',\n      sectionId: '',\n      assessmentGroupId: '',\n      assessmentCategoryId: '',\n      assessmentParameterId: ''\n    });\n\n    this.resetRowsOnChange();\n    this.getAvailableSections(this.classAssessmentGradesFormGroup.value.schoolBoardId, classId);\n    // if (!this.classAssessmentGradesFormGroup.value.searchByName) {\n    //   // this.classAssessmentGradesFormGroup.value.searchByName = 'assessment';\n    //   // this.classAssessmentGradesFormGroup.controls['searchByName'].patchValue('assessment');\n    // }\n    this.classAssessmentGradesFormGroup.controls['studentNames'].patchValue(null);\n    this.filterdStudents = [];\n    this.getStudents();\n  }\n\n  onSectionChange(sectionId, isDropdownChange?: boolean): void {\n\n    this.resetRowsOnChange();\n    if (isDropdownChange) {\n      this.classAssessmentGradesFormGroup.patchValue({\n        gradingTermId: '',\n        assessmentGroupId: '',\n        assessmentCategoryId: '',\n        assessmentParameterId: ''\n      });\n      this.classAssessmentGradesFormGroup.controls['studentNames'].patchValue(null);\n      this.filterdStudents = [];\n      this.getGradingTerms(this.classAssessmentGradesFormGroup.value.classId, sectionId);\n      this.getAssesmentGroups(this.classAssessmentGradesFormGroup.value.classId, sectionId);\n    }\n    else {\n      const existingSectionId = this.classAssessmentGradesFormGroup.value.sectionId;\n      if (existingSectionId !== sectionId) {\n        this.classAssessmentGradesFormGroup.patchValue({\n          gradingTermId: '',\n        });\n        this.getGradingTerms(this.classAssessmentGradesFormGroup.value.classId, sectionId);\n        this.getAssesmentGroups(this.classAssessmentGradesFormGroup.value.classId, sectionId);\n      }\n      this.classAssessmentGradesFormGroup.controls['sectionId'].patchValue(sectionId);\n    }\n    this.getStudents();\n  }\n\n  onGradingTermChange(gradingTerm): void {\n    this.classAssessmentGradesFormGroup.patchValue({\n      assessmentGroupId: '',\n      assessmentCategoryId: '',\n      assessmentParameterId: ''\n    });\n    this.resetRowsOnChange();\n    const classId = this.classAssessmentGradesFormGroup.value.classId;\n    const sectionId = this.classAssessmentGradesFormGroup.value.sectionId;\n    this.getAssesmentGroups(classId, sectionId);\n\n  }\n\n  onSelectAssessmentGroup(assesmentGroupId): void {\n    this.classAssessmentGradesFormGroup.patchValue({ assessmentCategoryId: '', assessmentParameterId: '' });\n    this.getAssessmentCategory(assesmentGroupId);\n    this.getAssessmentParams(null);\n    this.resetRowsOnChange();\n  }\n\n  onSelectAssessmentCategory(assesmentCategoryId): void {\n    this.classAssessmentGradesFormGroup.patchValue({ assessmentParameterId: '' });\n    this.getAssessmentParams(assesmentCategoryId);\n    this.resetRowsOnChange();\n  }\n\n  getGradingTerms(classId: any, sectionId: any): void {\n    if (!classId || !sectionId) {\n      return;\n    }\n    this._gradingTermConfigurationService.gradingTermsDropdownByClassSectionGet(classId, sectionId).subscribe(response => {\n      if (response != null && response.length) {\n        const gardingTermsData = [];\n        response.forEach(element => {\n          gardingTermsData.push({\n            label: element.name,\n            value: element.id\n          });\n        });\n        this.gradingTerms = gardingTermsData;\n      }\n      else {\n        this.gradingTerms = [];\n      }\n    });\n  }\n\n  getAssesmentGroups(classId, sectionId): void {\n    if (!classId || !sectionId) {\n      return;\n    }\n    this._assessmetParametersService.fetchClassAssesmentGroupDropDownList(classId, sectionId).subscribe(response => {\n      if (response != null && response.length) {\n        const tempAssessmentGroups = [];\n        response.forEach(element => {\n          tempAssessmentGroups.push({\n            label: element.name,\n            value: element.id\n          });\n        });\n        this.assessmentGroupsList = tempAssessmentGroups;\n      }\n      else {\n        this.assessmentGroupsList = [];\n      }\n    });\n  }\n\n  getAssessmentCategory(assessmentGroupId): void {\n    const classId = this.classAssessmentGradesFormGroup.value.classId;\n    const sectionId = this.classAssessmentGradesFormGroup.value.sectionId;\n    this._assessmetParametersService.fetchClassAssesmentCategoryDropDownList(classId, sectionId, assessmentGroupId).subscribe(response => {\n      if (response != null && response.length) {\n        const tempAssessmentCats = [];\n        response.forEach(element => {\n          tempAssessmentCats.push({\n            label: element.name,\n            value: element.id\n          });\n        });\n        this.assessmentCategoriesList = tempAssessmentCats;\n      }\n      else {\n        this.assessmentCategoriesList = [];\n      }\n    });\n  }\n\n  getAssessmentParams(assementCatgoeyId): void {\n    this.assessmentParams = [];\n    const classId = this.classAssessmentGradesFormGroup.value.classId;\n    const sectionId = this.classAssessmentGradesFormGroup.value.sectionId;\n    const assessmentGroupId = this.classAssessmentGradesFormGroup.value.assessmentGroupId;\n    this._assessmetParametersService.fetchClassAssesmentParameterDropDownList(classId, sectionId,\n      assessmentGroupId, assementCatgoeyId).subscribe(response => {\n        if (response != null && response.length) {\n          const tempAssessmentCats = [];\n          response.forEach(element => {\n            tempAssessmentCats.push({\n              label: element.name,\n              value: element.id\n            });\n          });\n          this.assessmentParams = tempAssessmentCats;\n        }\n        else {\n          this.assessmentParams = [];\n        }\n      });\n  }\n\n  getAssessmentConfigurationList(): void {\n    this.dropdownChangeIndex = [];\n\n    // this.isEditMode = (this.isEditMode || this.isNavFromReports === true) ? true : false;\n    if (this.studentAssessmentDeatils && !this.isNavFromReports && !this.isEditMode) {\n      this.studentAssessmentDeatils.rows = [];\n    }\n\n    this.isStudentSearch = false;\n    this.classAssmentGroupsFormSubmitted = true;\n\n    if (!this.classAssessmentGradesFormGroup.valid) {\n      this.studentAssessmentDeatils.rows = [];\n      this.isEditMode = false;\n      return;\n    }\n    const sort = {\n      sortBy: this.filterView.sortBy,\n      sortOrder: this.filterView.sortOrder\n    };\n\n    if (this.studentData && this.isNavFromReports) {\n      this.classAssessmentGradesFormGroup.controls['studentNames'].setValue(this.studentData.student.value);\n      this.classAssessmentGradesFormGroup.patchValue(this.studentData);\n    }\n\n    this.filterView = this.classAssessmentGradesFormGroup.value;\n    this.filterView.sortOrder = sort.sortOrder;\n    this.filterView.sortBy = sort.sortBy;\n    this.filterView.schoolAcademicSessionStudentId = this.classAssessmentGradesFormGroup.value.studentNames;\n    this.isStudentSearch = false;\n    this._studentAssessmentGradeService.fetchAssessmentGrades(this.filterView, this.isShowAll).subscribe(\n      response => {\n        if (response.gradeIndicatorList !== null) {\n          this.setIndicators(response);\n        }\n        this.rows = response.studentAssesmentDetails;\n        this.updateTableComponent();\n        this.isSearchPerformed = true;\n      });\n  }\n\n  setIndicators(response: any): void {\n    this.gradeIndicatorList = [];\n    this.testVariable += '-bar';\n    this.testEmitter$.next(this.testVariable);\n    if (response.classAndSections && this.isStaffLogin) {\n      this.staffInfo = response.classAndSections;\n      this.checkStaff();\n    }\n    response.gradeIndicatorList.forEach(gradeIndicator => {\n      this.gradeIndicatorList.push({ 'value': gradeIndicator.id, 'label': gradeIndicator.name });\n    });\n  }\n\n  clearSearchForm(): void {\n    this.isSubcategoiriesAvailable = false;\n    this.classAssmentGroupsFormSubmitted = false;\n    this.classAssessmentGradesFormGroup.reset();\n    this.availableClasses = [];\n    this.availableSections = [];\n    this.gradingTerms = [];\n    this.assessmentGroupsList = ([]);\n    this.assessmentCategoriesList = ([]);\n    this.assessmentParams = ([]);\n    this.filterdStudents = [];\n    this.resetRowsOnChange();\n  }\n\n  resetRowsOnChange(): void {\n    this.rows = [];\n    this.tableSettings = {};\n    this.studentAssessmentDeatils = {};\n    // this.rows = [];\n    this.isEditMode = false;\n    this.isSearchPerformed = false;\n    this.isSubcategoiriesAvailable = false;\n  }\n\n  selectedRows(event): void {\n    this.selectedRowsData = event;\n    this.setGradeForm = (this.setGradeForm && this.selectedRowsData.length > 0) ? this.setGradeForm : false;\n  }\n\n  onAdditionalButtonClick(event): void {\n    switch (event) {\n      case 'edit':\n        this.isEditMode = true;\n        this.dropdownChangeIndex = [];\n        this.isStudentSearch ? this.setAssessmentData() : this.updateTableComponent();\n        break;\n      case 'show_all':\n        this.isShowAll = true;\n        this.getAssessmentConfigurationList();\n        break;\n      case 'show_empty':\n        this.isShowAll = false;\n        this.getAssessmentConfigurationList();\n        break;\n      case 'back':\n        this.isEditMode = false;\n        this.getAssessmentConfigurationList();\n        break;\n    }\n  }\n\n  updateTableComponent(): void {\n    this.columns = [\n      { field: 'studentName', header: 'Student Name', sort: true },\n      { field: 'rollNo', header: 'Roll Number', sort: true },\n      { field: 'admissionNumber', header: 'Admission Number', sort: true },\n      { field: 'assessmentGroupName', header: 'Assessment Group', sort: true },\n      { field: 'assessmentCategoryName', header: 'Assessment Category', sort: true },\n      { field: 'assessmentSubCategoryName', header: 'Assessment SubCategory', sort: true },\n      { field: 'assessmentParameterName', header: 'Assessment Parameter', sort: true }\n    ];\n    if (!this.hideButtons) {\n      if (this.isEditMode) {\n        this.editButton = {\n          name: 'Back',\n          class: 'primary',\n          clickAction: 'back'\n        };\n      }\n      else {\n        this.editButton = {\n          name: 'Edit',\n          class: 'primary',\n          clickAction: 'edit'\n        };\n      }\n    }\n    if (this.rows != null) {\n      this.availableAssessmentSubCategories = [];\n      const group = this.fb.group({});\n      this.rows.forEach(row => {\n        if (row.studentAssessmentSubCategories != null) {\n          this.isSubcategoiriesAvailable = true;\n\n          row.studentAssessmentSubCategories.forEach(studentAssessmentSubCategory => {\n            if (this.columns.map(column => column.field)\n              .indexOf(studentAssessmentSubCategory.subCategoryName) === -1) {\n              this.availableAssessmentSubCategories.push({\n                name: studentAssessmentSubCategory.subCategoryName,\n                options: this.gradeIndicatorList\n              });\n              group.addControl(studentAssessmentSubCategory.subCategoryName, new FormControl(''));\n              let columnData;\n              if (!this.isEditMode) {\n                columnData = {\n                  field: studentAssessmentSubCategory.subCategoryName,\n                  header: studentAssessmentSubCategory.subCategoryName,\n                  sort: false\n                };\n              }\n              else {\n                columnData = {\n                  field: studentAssessmentSubCategory.subCategoryName,\n                  header: studentAssessmentSubCategory.subCategoryName,\n                  sort: false,\n                  options: this.gradeIndicatorList,\n                  // dropdownInputRequired: true\n                  rowTempalteRequired: true\n\n                };\n              }\n              this.columns.push(columnData);\n            }\n            if (studentAssessmentSubCategory.gradeConfigurationId !== null) {\n              const gradeConfigValue = this.gradeIndicatorList.\n                find(x => x.value === studentAssessmentSubCategory.gradeConfigurationId).label;\n              row[studentAssessmentSubCategory.subCategoryName] = (!this.isEditMode) ? gradeConfigValue : studentAssessmentSubCategory.gradeConfigurationId;\n            }\n            else {\n              row[studentAssessmentSubCategory.subCategoryName] = '';\n            }\n\n          });\n        } else {\n          if (row.gradeConfigurationId !== null) {\n            const gradeConfigValue = this.gradeIndicatorList.\n              find(x => x.value === row.gradeConfigurationId).label;\n            row['grade'] = (!this.isEditMode) ? gradeConfigValue : row.gradeConfigurationId;\n          }\n        }\n      });\n\n      if (!this.isSubcategoiriesAvailable) {\n        this.availableAssessmentSubCategories.push({\n          name: 'Grade',\n          options: this.gradeIndicatorList\n        });\n        group.addControl('Grade', new FormControl('', Validators.required));\n        let columnData;\n        if (!this.isEditMode) {\n          columnData = {\n            field: 'grade',\n            header: 'Grade',\n            sort: false\n          };\n        }\n        else {\n          columnData = {\n            field: 'grade',\n            header: 'Grade',\n            sort: false,\n            options: this.gradeIndicatorList,\n            // dropdownInputRequired: true\n            rowTempalteRequired: true\n          };\n        }\n        this.columns.push(columnData);\n      }\n      this.updateAssesmentGradesFormGroup = group;\n    }\n    \n    this.tableSettings = {\n      model: this.filterView,\n      rows: this.rows,\n      columns: this.columns,\n      visibleSelectAll: !this.hideButtons && this.isEditMode,\n      isSelectRowRequired: !this.hideButtons && this.isEditMode,\n      isMultiDeleteRequired: false,\n      padding: true,\n\n      headerOperations: {\n        infoButton: {\n          required: true,\n          text: 'Class Assessment Grades'\n        },\n        additionalButtons: [\n          this.editButton,\n        ]\n      }\n    };\n    if (this.hideButtons) {\n      this.tableSettings.headerOperations.additionalButtons = [];\n    }\n    this.isSearchPerformed = (this.rows != null) ? false : true;\n    setTimeout(() => {\n      this.scrollIntoViewById('mat_divider');\n    });\n  }\n\n  changeRowDropdown(data: any, rowIndex?: any, columnIndex?: any): void {\n    this.classAssesmentGradesParamListViewModel = {};\n    this.classAssesmentGradesParamListViewModel.classAssesmentGradesParamViewModel = [];\n    this.preparePostData(data);\n    this._studentAssessmentGradeService.createClassAssessmentParameters(this.classAssesmentGradesParamListViewModel).subscribe(\n      response => {\n        this.dropdownChangeIndex['check' + rowIndex + '_' + columnIndex] = true;\n        this.dropdownChangeIndex['spinner_' + rowIndex + '_' + columnIndex] = false;\n        this.dropdownChangeIndex['error' + rowIndex + '_' + columnIndex] = false;\n        // this.getAssessmentConfigurationList();\n        this.changeDetecor.detectChanges();\n      },\n      error => {\n        this.dropdownChangeIndex['error' + rowIndex + '_' + columnIndex] = true;\n        this.dropdownChangeIndex['check' + rowIndex + '_' + columnIndex] = false;\n        this.dropdownChangeIndex['spinner_' + rowIndex + '_' + columnIndex] = false;\n        this.changeDetecor.detectChanges();\n      }\n    );\n  }\n\n  onDropDownChange(row: any, value: any, rowIndex: any, columnIndex: any): void {\n    row['newValue'] = value;\n    row[this.columns[columnIndex].field] = value;\n    this.dropdownChangeIndex['spinner_' + rowIndex + '_' + columnIndex] = true;\n    this.changeRowDropdown(row, rowIndex, columnIndex);\n  }\n\n  updateAssessmentConfiguration(form: any): void {\n    if (form === 'updateAssesmentGradesFormGroup' && this.updateAssesmentGradesFormGroup.invalid) {\n      return;\n    }\n\n    this.classAssesmentGradesParamListViewModel = {};\n    this.classAssesmentGradesParamListViewModel.classAssesmentGradesParamViewModel = [];\n    if (this.isStudentSearch) {\n      if (!this.studentGradeAssessmentForm.valid) {\n        return;\n      }\n\n\n      this.selectedRowsData.forEach(row => {\n        this.preparePostData(row, this.studentGradeAssessmentForm.value);\n      });\n    } else {\n      this.selectedRowsData.forEach(row => {\n        this.preparePostData(row, this.updateAssesmentGradesFormGroup.value);\n      });\n    }\n\n    if (this.classAssesmentGradesParamListViewModel && this.classAssesmentGradesParamListViewModel.classAssesmentGradesParamViewModel.length) {\n      this._studentAssessmentGradeService.createClassAssessmentParameters(this.classAssesmentGradesParamListViewModel).subscribe(\n        response => {\n          this.setGradeForm = false;\n          this.studentGradeAssessmentForm.reset();\n          this.commonService.setOverlay(AppSettings.HIDE);\n          this.changeDetecor.detectChanges();\n          this.isEditMode = false;\n          this.getAssessmentConfigurationList();\n        }\n      );\n    } else {\n      this.openSnackBar(AppSettings.SELECT_ASSESSMENT, true);\n    }\n  }\n\n  setGrade(isShowGradeSetup: boolean): void {\n    if (isShowGradeSetup) {\n      this.commonService.setOverlay(AppSettings.SHOW);\n    }\n\n    else {\n      this.commonService.setOverlay(AppSettings.HIDE);\n    }\n    this.setGradeForm = isShowGradeSetup;\n  }\n\n  preparePostData(data, massUpdateData?: any): void {\n    const categoryUpdatedInfo = (!massUpdateData) ? data : massUpdateData;\n    // this.classAssesmentGradesParamListViewModel.classAssesmentGradesParamViewModel = [];\n    if (this.isStudentSearch) {\n      this.classAssesmentGradesParamListViewModel.classAssesmentGradesParamViewModel.push({\n        gradeTermId: data.gradeTermId,\n        schoolAcademicSessionStudentId: data.schoolAcademicSessionStudentId,\n        assesmentSubCategoryId: (data.assessmentSubCategoryId) ? data.assessmentSubCategoryId : null,\n        gradeConfigurationId: !massUpdateData ? data.newValue : categoryUpdatedInfo.studentGrade,\n        classAssesmentParameterId: data.id,\n        studentAssesmentId: data.studentAssessmentId\n      });\n    } else {\n      this.classAssesmentGradesParamListViewModel.classAssesmentGradesParamViewModel.push({\n        gradeTermId: data.gradingTermId,\n        schoolAcademicSessionStudentId: data.schoolAcademicSessionStudentId,\n        assesmentSubCategoryId: data.assessmentSubCategoryId ? data.assessmentSubCategoryId : null,\n        gradeConfigurationId: (!massUpdateData) ? categoryUpdatedInfo.grade : categoryUpdatedInfo.Grade,\n        classAssesmentParameterId: data.classAssessmentParameterId,\n        studentAssesmentId: data.studentAssessmentId\n      });\n    }\n\n  }\n\n  getTableData(_event): void {\n    this.filterView = _event;\n    this.getAssessmentConfigurationList();\n  }\n\n  getStudentTableData(_event): void {\n    this.filterView = _event;\n    this.getAssessmentConfigurationList();\n  }\n\n  checkStaff(): boolean {\n    if (this.isStaffLogin) {\n      if (this.staffInfo.find(x => x.classId === this.classAssessmentGradesFormGroup.controls.classId.value\n        && x.sectionId === this.classAssessmentGradesFormGroup.controls.sectionId.value && x.isClassTeacher === true) === undefined) {\n        this.hideButtons = true;\n        return;\n      } else {\n        this.hideButtons = false;\n      }\n    }\n\n    if (!this.hideButtons) {\n      if (this.isEditMode) {\n        this.editButton = {\n          name: 'Back',\n          class: 'primary',\n          clickAction: 'back'\n        };\n      }\n      else {\n        this.editButton = {\n          name: 'Edit',\n          class: 'primary',\n          clickAction: 'edit'\n        };\n      }\n    }\n  }\n  getSelectedStudent(value: any): void {\n    if (value.sectionId) {\n      this.onSectionChange(value.sectionId);\n    }\n  }\n\n  setAssessmentData(): void {\n    if (this.rows) {\n      if (!this.hideButtons) {\n        if (this.isEditMode) {\n          this.editButton = {\n            name: 'Back',\n            class: 'primary',\n            clickAction: 'back'\n          };\n        }\n        else {\n          this.editButton = {\n            name: 'Edit',\n            class: 'primary',\n            clickAction: 'edit'\n          };\n        }\n      }\n\n      this.columns = [\n        { field: 'assessmentGroup', header: 'Assessment Group', sort: true },\n        { field: 'assessmentCategory', header: 'Assessment Category', sort: true },\n        { field: 'assessmentParameter', header: 'Assessment Parameter', sort: true },\n        { field: 'assessmentSubCategory', header: 'Assessment Subcategory', sort: true },\n        {\n          field: 'studentGrade', header: 'Student Grade', sort: this.isEditMode ? true : false,\n          options: this.isEditMode ? this.gradeIndicatorList : null,\n          // dropdownInputRequired: this.isEditMode ? true : false\n          rowTempalteRequired: this.isEditMode ? true : false\n        }\n      ];\n      this.studentAssessmentDeatils = {\n        model: this.filterView,\n        rows: this.rows,\n        columns: this.columns,\n        componentName: this.currentComponent,\n        visibleSelectAll: !this.hideButtons && this.isEditMode,\n        isSelectRowRequired: !this.hideButtons && this.isEditMode,\n        isMultiDeleteRequired: false,\n        padding: true,\n\n        headerOperations: {\n          additionalButtons: [\n            this.editButton,\n          ]\n        }\n\n        // rowGroupingColumns: ['assessmentGroup', 'assessmentCategory', 'assessmentParameter']\n      };\n\n      const control = <FormArray>this.studentGradeForm.controls['grades'];\n      for (let i = 0; i < this.rows.length; i++) {\n        control.push(this.studentGrades(this.rows[i].studentGrade));\n      }\n    }\n    if (this.isNavFromReports) {\n      this.studentAssessmentDeatils.headerOperations.additionalButtons = [];\n    }\n\n    this.rows.forEach(row => {\n      if (row.gradeConfigurationId !== null) {\n        const gradeConfigValue = this.gradeIndicatorList.\n          find(x => x.value === row.gradeConfigurationId).label;\n        row['studentGrade'] = (!this.isEditMode) ? gradeConfigValue : row.gradeConfigurationId;\n      }\n    });\n\n    setTimeout(() => {\n      this.scrollIntoViewById('mat_divider');\n    });\n  }\n\n  studentGrades(grade: any): FormGroup {\n    return this.fb.group({\n      studentGrade: new FormControl(grade, [Validators.required])\n    });\n  }\n\n  searchByOption(event: any): void {\n    this.tableSettings = {};\n    this.studentAssessmentDeatils = {};\n    this.rows = [];\n  }\n\n  // updateStudentScore(data: any, index: any): void {\n  //   if (data.valid && data.value.marks != null && this.rows[index].marks !== +data.value.marks) {\n  //     this.marksIndex.push(data);\n  //   }\n  // }\n\n  // check(index: any): any {\n  //   const t = this.marksIndex.find(x => x === index);\n  //   return t != null ? true : false;\n  // }\n}\n","module.exports = \"<app-table [settings]=\\\"tableSettings\\\"  (getTableData)='getAllTestScheduleTableData($event)'\\n           (rowBasedAction)='ClassSectionrowActions($event)'>\\n</app-table>\\n\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL21vZHVsZXMvYWNhZGVtaWNzL2dyYWRpbmcvdGVzdC1zY2hlZHVsZS9zY2hlZHVsZXMuY29tcG9uZW50LnNjc3MifQ== */\"","import { Component, OnInit, ViewContainerRef } from '@angular/core';\nimport { CommonService } from 'app/service/common.service';\nimport { ClassesConfigService } from 'app/service/general/api/classes-config.service';\nimport { MatDialog, MatSnackBar } from '@angular/material';\nimport { CustomDialogComponent } from 'app/shared/custom-dialog/custom-dialog.component';\nimport { AppSettings } from 'app/app.constants';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { DropDownModel } from 'app/models/drop-down-view';\nimport { CommonComponent } from '../../../../shared/common/common.component';\nimport { TestScheduleService } from '../../../../service/grading-service/api/test-schedule-service';\nimport { TestSchedulesFilterViewModel } from '../models/test-schedules-filter-view-model';\nimport { RouteConfig } from '../../../../url.config';\nimport { Router } from '@angular/router';\n\n\n@Component({\n  selector: 'app-schedules-list',\n  templateUrl: './schedules.component.html',\n  styleUrls: ['./schedules.component.scss'],\n  providers: [ClassesConfigService, TestScheduleService]\n})\nexport class SchedulesComponent extends CommonComponent implements OnInit {\n\n  filterViewModel: TestSchedulesFilterViewModel;\n  classForm: FormGroup;\n  tableSettings: {};\n  rows: Array<any>;\n  columns: any[];\n  pageCnt: number;\n  totalRowsCount: number;\n  rowBasedAction: Array<any> = [];\n  closeForm: boolean;\n  validateForm: boolean;\n  isFormSubmitted = false;\n  showCreateBtn = true;\n  testScheduleId: any;\n  isStaffLogin = false;\n  currentComponent = 'SchedulesComponent';\n  constructor(public commonService: CommonService,\n    private testScheduleService: TestScheduleService,\n    public snackBar: MatSnackBar,\n    public dialogRef: MatDialog, private router: Router) {\n    super();\n    this.initializeFilterView();\n    this.setColumnHeaders();\n    this.initializeTableSettings();\n  }\n\n  ngOnInit(): void {\n    const modelTableComponent = this.getModelComponent(this.currentComponent);\n    if (modelTableComponent) {\n      this.filterViewModel = modelTableComponent;\n    }\n    if (!this.getTokenParam('_as')) {\n      setTimeout(() => {\n        this.openSnackBar(AppSettings.SCHOOLACADEMIC_SESSION_REQUIRED, true);\n      });\n      this.initializeTableSettings();\n    }\n    else {\n      this.getAllTestSchedules();\n    }\n  }\n\n  initializeForm(): void {\n    this.classForm = new FormGroup({\n      id: new FormControl(''),\n      classReferenceTypeId: new FormControl('', [Validators.required]),\n      name: new FormControl('', [Validators.required, Validators.maxLength(15)]),\n      code: new FormControl(null, [Validators.maxLength(6)]),\n      description: new FormControl(null, [Validators.maxLength(135)]),\n    });\n  }\n\n  setColumnHeaders(): void {\n    this.columns = [\n      { field: 'boardName', header: 'Board', sort: true },\n      { field: 'termName', header: 'Grade Term', sort: true },\n      { field: 'testType', header: 'Test Type', sort: true },\n      { field: 'testName', header: 'Test Name', sort: true },\n      { field: 'class', header: 'Class', sort: true },\n      { field: 'section', header: 'Section', sort: true },\n      { field: 'course', header: 'Subject', sort: true },\n      { field: 'testDate', header: 'Test Date', sort: true },\n      { field: 'testStartDate', header: 'Start Date', sort: true },\n      { field: 'testEndDate', header: 'End Date', sort: true },\n      { field: 'status', header: 'Status', sort: true },\n      { field: 'actions', header: 'Actions', sort: false },\n    ];\n  }\n\n  initializeTableSettings(): void {\n    this.tableSettings = {\n      rows: [],\n      columns: this.columns,\n      model: this.filterViewModel,\n      componentName: this.currentComponent,\n      isPaginationRequired: true,\n      totalRowsCount: this.totalRowsCount,\n      pageCnt: this.pageCnt,\n      hideHeader: true,\n      headerOperations: {\n        infoButton: {\n          required: true,\n          text: 'Test Schedules/Marks'\n        },\n      }\n    };\n  }\n\n  initializeFilterView(): void {\n    this.filterViewModel = {\n      sortBy: '',\n      sortOrder: 0,\n      pageNumber: AppSettings.PAGENUMBER, pageSize: AppSettings.PAGESIZE,\n      classes: [],\n      sections: [],\n      terms: [],\n      boardIds: [],\n      testTypes: [],\n      testNames: [],\n      statuses: [],\n      isPostToCalendar: [],\n      courses: [],\n      testStartDatesBegin: null,\n      testStartDatesEnd: null,\n      testEndDateBegin: null,\n      testEndDateEnd: null,\n      testScheduleDateBegin: null,\n      testScheduleDateEnd: null\n    };\n  }\n\n  getAllTestSchedules(): void {\n    this.testScheduleService.getTestSchedules(this.filterViewModel.sortBy, this.filterViewModel.sortOrder,\n      this.filterViewModel.terms, this.filterViewModel.boardIds, this.filterViewModel.testTypes, this.filterViewModel.testNames,\n      this.filterViewModel.testStartDatesBegin, this.filterViewModel.testStartDatesEnd,\n      this.filterViewModel.testEndDateBegin, this.filterViewModel.testEndDateEnd,\n      this.filterViewModel.isPostToCalendar, this.filterViewModel.classes, this.filterViewModel.sections,\n      this.filterViewModel.statuses, this.filterViewModel.courses,\n      this.filterViewModel.testScheduleDateBegin, this.filterViewModel.testScheduleDateEnd,\n      this.filterViewModel.pageNumber, this.filterViewModel.pageSize).subscribe(data => {\n        this.updateTestSchedulesResponse(data);\n      },\n        error => {\n          this.errorResponse(error);\n        });\n  }\n\n  updateTestSchedulesResponse(data: any): void {\n\n\n    if (data.testScheduleListViewModel) {\n      this.rows = data.testScheduleListViewModel.list;\n      this.totalRowsCount = data.testScheduleListViewModel.totalItems;\n    } else {\n      this.rows = [];\n    }\n\n    this.rows.forEach((e: any) => {\n      e.testStartDate = (e.testStartDate == null) ? null : this.commonService.customDateFormat(e.testStartDate, this.getSchoolDateFormat()).date;\n      e.testEndDate = (e.testEndDate == null) ? null : this.commonService.customDateFormat(e.testEndDate, this.getSchoolDateFormat()).date;\n      e.testDate = (e.testDate == null) ? null : this.commonService.customDateFormat(e.testDate, this.getSchoolDateFormat()).date;\n\n      if (e.isEditable) {\n\n        switch (true) {\n          case e.statusCode === AppSettings.TEST_SCHEDULED_CODE:\n            e.operations = [\n              {\n                name: AppSettings.COMPLETE,\n                icon: AppSettings.APPROVE_ICON,\n                operationName: AppSettings.COMPLETE\n              }, {\n                name: AppSettings.CANCEL,\n                icon: AppSettings.DELETE_ICON,\n                operationName: AppSettings.CANCEL\n              },\n              {\n                name: AppSettings.MARKS,\n                icon: AppSettings.MARKS_ICON,\n                operationName: AppSettings.MARKS\n              }\n            ];\n            break;\n          case e.statusCode === AppSettings.TEST_COMPLETED_CODE:\n            e.operations = [\n              {\n                name: AppSettings.CANCEL,\n                icon: AppSettings.DELETE_ICON,\n                operationName: AppSettings.CANCEL\n              },\n              {\n                name: AppSettings.MARKS,\n                icon: AppSettings.MARKS_ICON,\n                operationName: AppSettings.MARKS\n              }];\n            break;\n\n          case e.statusCode === AppSettings.TEST_CANCELED_CODE:\n\n            e.operations = [\n              {\n                name: AppSettings.MARKS,\n                icon: AppSettings.MARKS_ICON,\n                operationName: AppSettings.MARKS\n              }\n            ];\n            break;\n        }\n\n      }\n    });\n\n    this.tableSettings = {\n      columns: this.columns,\n      model: this.filterViewModel,\n      rows: this.rows,\n      componentName: this.currentComponent,\n      isSelectRowRequired: false,\n      visibleSelectAll: true,\n      isPaginationRequired: true,\n      totalRowsCount: this.totalRowsCount,\n      pageCnt: this.pageCnt,\n      filtersList: data.filters,\n      isRowExpandRequired: false,\n      infoButton: {\n        required: true,\n        text: 'Test Schedules/Marks'\n      }\n    };\n    this.scrollIntoView('app-table');\n  }\n\n\n\n  getAllTestScheduleTableData(_event: TestSchedulesFilterViewModel): void {\n    this.filterViewModel = _event;\n    this.getAllTestSchedules();\n  }\n\n  dialogMethod(dialogData: any, disableClose: boolean, button1Text: string, button2Text?: string): any {\n    return this.dialogRef.open(CustomDialogComponent, {\n      disableClose: disableClose,\n      data: { text: this.commonService.getTranslation(dialogData), action: true, btn1Text: button1Text, btn2Text: button2Text },\n    });\n  }\n\n  trimTextBoxSpaces(key: string): void {\n    this.classForm.controls[key].setValue(this.commonService.trimSpaces(this.classForm.controls[key].value));\n  }\n\n  ClassSectionrowActions(response: any): void {\n    this.testScheduleId = response.clickedRow.id;\n    if (response.operation === AppSettings.COMPLETE.toLowerCase()) {\n      const dialogRef = this.dialogRef.open(CustomDialogComponent, {\n        disableClose: true,\n        data: {\n          text: this.commonService.getTranslation(AppSettings.COMPLETE_TEST_SCHEDULE),\n          action: true, btn1Text: AppSettings.NO, btn2Text: AppSettings.YES\n        },\n      });\n\n      dialogRef.afterClosed().subscribe(action => {\n        if (action === AppSettings.YES) {\n          this.testScheduleService.completeOrCancelSchedule(this.testScheduleId, true).subscribe(res => this.completeOrCancelRequest(res), error => {\n            this.errorResponse(error);\n          });\n        }\n      });\n    }\n\n    if (response.operation === AppSettings.CANCEL.toLowerCase()) {\n      const dialogRef = this.dialogRef.open(CustomDialogComponent, {\n        disableClose: true,\n        data: {\n          text: this.commonService.getTranslation(AppSettings.CANCEL_TEST_SCHEDULE),\n          action: true, btn1Text: AppSettings.NO, btn2Text: AppSettings.YES\n        },\n      });\n\n      dialogRef.afterClosed().subscribe(action => {\n        if (action === AppSettings.YES) {\n          this.testScheduleService.completeOrCancelSchedule(this.testScheduleId, false).subscribe(res => this.completeOrCancelRequest(res), error => {\n            this.errorResponse(error);\n          });\n        }\n      });\n    }\n    if (response.operation === AppSettings.MARKS.toLowerCase()) {\n      if (this.isStaffLogin) {\n        this.router.navigate([RouteConfig.Staff_Test_Grading + '/' + response.clickedRow.id, { operation: AppSettings.TEST }]);\n      }\n      else {\n        this.router.navigate([RouteConfig.Test_Grading + '/' + response.clickedRow.id, { operation: AppSettings.TEST }]);\n      }\n    }\n  }\n\n  completeOrCancelRequest(response: any): void {\n    this.getAllTestSchedules();\n    this.openSnackBar(response.messages.ResultMessage);\n  }\n}\n","module.exports = \"<mat-tab-group [selectedIndex]=\\\"index\\\" (selectedIndexChange)=\\\"selected($event)\\\" class=\\\"manage-institue mt-28\\\">\\n  <mat-tab [active]=\\\"isTestsViewActive\\\">\\n    <ng-template mat-tab-label><span translate>TESTS VIEW</span></ng-template>\\n    <div [active]=\\\"isTestsViewActive\\\">\\n      <ng-template matTabContent>\\n        <app-table [settings]=\\\"tabSettings\\\" [templateRef]=\\\"testSchedules\\\" (getTableData)='testScheduleTableData($event)'\\n          (rowBasedAction)='rowActions($event)' [rowExpandRef]=\\\"testClassSections\\\" (openAddForm)=\\\"onAddFormClick()\\\"\\n          [closeRowForm]='closeAddPanel'>\\n        </app-table>\\n      </ng-template>\\n    </div>\\n  </mat-tab>\\n\\n  <mat-tab>\\n    <ng-template mat-tab-label translate><span translate>SCHEDULES VIEW</span></ng-template>\\n    <div [active]=\\\"!isTestsViewActive\\\">\\n      <ng-template matTabContent>\\n        <app-schedules-list></app-schedules-list>\\n      </ng-template>\\n    </div>\\n  </mat-tab>\\n\\n  <ng-template #testClassSections>\\n    <app-table fxFlex=\\\"100\\\" [settings]=\\\"tableSettings\\\" (getTableData)='testClassSectionsTableData($event)'\\n      (rowBasedAction)='ClassSectionrowActions($event)'>\\n    </app-table>\\n  </ng-template>\\n\\n  <ng-template #testSchedules>\\n    <mat-vertical-stepper [linear]=\\\"true\\\" #stepper (selectionChange)=\\\"OnSelectionChange($event)\\\"\\n      (animationDone)=\\\"onStepperAnimationDone(stepper.selectedIndex)\\\">\\n      <mat-step [stepControl]=\\\"testTypeAndGradingForm\\\" [completed]=\\\"testTypeAndGradingForm.valid\\\">\\n        <form fxLayout=\\\"column\\\" fxFlex=\\\"100\\\" [formGroup]=\\\"testTypeAndGradingForm\\\">\\n          <ng-template matStepLabel><span translate>TestType & GradeTerm</span></ng-template>\\n          <div class=\\\"pt-24 font-size-18\\\" translate>Please Select The Type And Grading Term For this Test</div>\\n          <div fxLayout=\\\"column\\\" fxLayout.gt-sm=\\\"row\\\" class=\\\"pt-24\\\" fxFlex=\\\"100\\\">\\n            <mat-form-field appearance=\\\"outline\\\" fxFlexFill fxLayout=\\\"column\\\" fxFlex=\\\"100\\\" fxFlex.gt-sm=\\\"50\\\">\\n              <mat-label #board translate>Board</mat-label>\\n              <mat-select formControlName=\\\"boardId\\\" (selectionChange)=\\\"onSelectSchoolBoard($event.value)\\\" required>\\n                <mat-option *ngFor=\\\"let board of schoolBoardsList\\\" [value]=\\\"board.value\\\">\\n                  {{board.label}}</mat-option>\\n              </mat-select>\\n              <mat-error>\\n                <app-validation [labelName]='board.innerText'\\n                  [validationControl]=\\\"testTypeAndGradingForm.controls.boardId\\\" [doValidate]=\\\"validate\\\">\\n                </app-validation>\\n              </mat-error>\\n            </mat-form-field>\\n\\n            <mat-form-field appearance=\\\"outline\\\" fxFlexFill fxLayout=\\\"column\\\" fxFlex=\\\"100\\\" fxFlex.gt-sm=\\\"50\\\"\\n              class=\\\"pl-sm-20\\\">\\n              <mat-label #gradeTerm translate>Grading Term</mat-label>\\n              <mat-select formControlName=\\\"gradeTermId\\\" (selectionChange)=\\\"onSelectGradingTerm($event.value)\\\" required>\\n                <mat-option *ngFor=\\\"let gradeTerm of gradeTermList\\\" [value]=\\\"gradeTerm.value\\\">\\n                  {{gradeTerm.label}}</mat-option>\\n              </mat-select>\\n              <mat-error>\\n                <app-validation [labelName]='gradeTerm.innerText'\\n                  [validationControl]=\\\"testTypeAndGradingForm.controls.gradeTermId\\\" [doValidate]=\\\"validate\\\">\\n                </app-validation>\\n              </mat-error>\\n            </mat-form-field>\\n          </div>\\n\\n          <div fxLayout.lt-sm=\\\"column\\\" fxLayout.gt-sm=\\\"row\\\" fxFlex=\\\"100\\\" class=\\\"pt-sm-12\\\">\\n            <mat-form-field appearance=\\\"outline\\\" fxFlexFill fxLayout=\\\"column\\\" fxFlex=\\\"100\\\" fxFlex.gt-sm=\\\"50\\\">\\n              <mat-label #testType translate>Test Type</mat-label>\\n              <mat-select formControlName=\\\"testTypeId\\\" required (selectionChange)=\\\"onTestTypeSelect($event.value)\\\">\\n                <mat-option *ngFor=\\\"let testTypeId of testTypesList\\\" [value]=\\\"testTypeId.value\\\">\\n                  {{testTypeId.label}}</mat-option>\\n              </mat-select>\\n              <mat-error>\\n                <app-validation [labelName]='testType.innerText'\\n                  [validationControl]=\\\"testTypeAndGradingForm.controls.testTypeId\\\" [doValidate]=\\\"validate\\\">\\n                </app-validation>\\n              </mat-error>\\n            </mat-form-field>\\n\\n            <mat-form-field appearance=\\\"outline\\\" fxFlexFill fxLayout=\\\"column\\\" fxFlex=\\\"100\\\" fxFlex.gt-sm=\\\"50\\\"\\n              class=\\\"pl-sm-20\\\" *ngIf=\\\"!isTestEdit\\\">\\n              <mat-label #testMarks translate>Test Max Marks</mat-label>\\n              <input (keyup)=\\\"preventSpace($event,'testTypeAndGradingForm','testMaxMarks')\\\" matInput formControlName=\\\"testMaxMarks\\\">\\n              <mat-error>\\n                <app-validation [labelName]='testMarks.innerText'\\n                  [validationControl]=\\\"testTypeAndGradingForm.controls.testMaxMarks\\\" [doValidate]=\\\"validate\\\">\\n                </app-validation>\\n              </mat-error>\\n            </mat-form-field>\\n\\n          </div>\\n\\n          <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"center center\\\" class=\\\"mt-28\\\">\\n            <button #resetButtonStepper mat-raised-button id=\\\"resetButtonStepper\\\" (click)=\\\"onCancel()\\\" type=\\\"reset\\\"\\n              class=\\\"text-uppercase mr-12\\\" translate>{{'Cancel' | translate}}\\n            </button>\\n            <button mat-raised-button matStepperNext type=\\\"button\\\" color=\\\"accent\\\" class=\\\"text-uppercase\\\"\\n              translate>{{'Next' | translate}}\\n            </button>\\n          </div>\\n        </form>\\n      </mat-step>\\n\\n      <mat-step [stepControl]=\\\"testDetailsForm\\\" [completed]=\\\"testDetailsForm.valid\\\">\\n        <div fxLayout=\\\"column\\\" fxLayout.gt-sm=\\\"row\\\" fxFlexFill>\\n          <form fxLayout=\\\"column\\\" fxFlex=\\\"100\\\" [formGroup]=\\\"testDetailsForm\\\" class=\\\"pr-16\\\" #testDetailForm=\\\"ngForm\\\">\\n            <ng-template matStepLabel><span translate>Test Details</span></ng-template>\\n            <div class=\\\"pt-24 font-size-18\\\" translate>Please Enter Details Regarding this Test</div>\\n            <div fxLayout=\\\"column\\\" fxLayout.gt-sm=\\\"row\\\" class=\\\"pt-24\\\" fxFlex=\\\"100\\\">\\n              <mat-form-field appearance=\\\"outline\\\" fxFlexFill fxLayout=\\\"column\\\" fxFlex=\\\"100\\\" fxFlex.gt-sm=\\\"50\\\">\\n                <mat-label #testName translate>Name</mat-label>\\n                <input (keyup)=\\\"preventSpace($event,'testDetailsForm','testName')\\\" (blur)=\\\"trimTextBoxSpaces('testDetailsForm','testName')\\\"\\n                  formControlName=\\\"testName\\\" matInput required autocomplete=\\\"off\\\">\\n                <mat-error>\\n                  <app-validation [labelName]='testName.innerText'\\n                    [validationControl]=\\\"testDetailsForm.controls.testName\\\" [doValidate]=\\\"validate\\\">\\n                  </app-validation>\\n                </mat-error>\\n              </mat-form-field>\\n            </div>\\n            <div fxLayout=\\\"column\\\" fxLayout.gt-sm=\\\"row\\\" class=\\\"pt-12\\\" fxFlex=\\\"100\\\">\\n              <mat-form-field appearance=\\\"outline\\\" fxFlexFill fxLayout=\\\"column\\\" fxFlex=\\\"100\\\" fxFlex.gt-sm=\\\"50\\\"\\n                class=\\\"icon-center\\\">\\n                <mat-label #startDate translate>Start Date</mat-label>\\n                <input matInput (keyup)=\\\"forceValidation('fromDate',testDetailsForm)\\\" [matDatepicker]=\\\"fromDate\\\"\\n                  formControlName=\\\"fromDate\\\" [min]=\\\"academicSessionMinDate\\\" [max]=\\\"academicSessionMaxDate\\\"\\n                  autocomplete=\\\"off\\\" (dateChange)=\\\"onStartDateSelect()\\\">\\n                <mat-datepicker-toggle matSuffix [for]=\\\"fromDate\\\"></mat-datepicker-toggle>\\n                <mat-datepicker #fromDate></mat-datepicker>\\n                <mat-error>\\n                  <app-validation [labelName]='startDate.innerText'\\n                    [validationControl]=\\\"testDetailsForm.controls.fromDate\\\" [doValidate]=\\\"validate\\\">\\n                  </app-validation>\\n                </mat-error>\\n              </mat-form-field>\\n\\n              <mat-form-field appearance=\\\"outline\\\" fxFlexFill fxLayout=\\\"column\\\" fxFlex=\\\"100\\\" fxFlex.gt-sm=\\\"50\\\"\\n                class=\\\"pl-sm-20 icon-center\\\">\\n                <mat-label #endDate translate>End Date</mat-label>\\n                <input matInput (keyup)=\\\"forceValidation('toDate',testDetailsForm)\\\" [matDatepicker]=\\\"toDate\\\"\\n                  formControlName=\\\"toDate\\\" [min]=\\\"testDetailsForm.controls.fromDate.value || academicSessionMinDate\\\"\\n                  [max]=\\\"academicSessionMaxDate\\\" autocomplete=\\\"off\\\">\\n                <mat-datepicker-toggle matSuffix [for]=\\\"toDate\\\"></mat-datepicker-toggle>\\n                <mat-datepicker #toDate [startAt]=\\\"testDetailsForm.controls.fromDate.value\\\"></mat-datepicker>\\n                <mat-error>\\n                  <app-validation [labelName]='endDate.innerText' [validationControl]=\\\"testDetailsForm.controls.toDate\\\"\\n                    [doValidate]=\\\"validate\\\">\\n                  </app-validation>\\n                </mat-error>\\n              </mat-form-field>\\n            </div>\\n            <div fxLayout=\\\"column\\\" class=\\\"pt-sm-12\\\" fxFlex=\\\"100\\\">\\n\\n              <label class=\\\"mb-12 fuse-black-500-fg\\\" #IsPostCalender translate>Do you Want to post this Test Schedule\\n                Information To Student Calender ?</label>\\n              <mat-radio-group fxLayout=\\\"row\\\" fxFlex=\\\"100\\\" required formControlName=\\\"isPostCalender\\\">\\n                <mat-radio-button class=\\\"ml-24\\\" value=\\\"Yes\\\"><span translate>Yes</span></mat-radio-button>\\n                <mat-radio-button class=\\\"ml-24\\\" value=\\\"No\\\"><span translate>No</span></mat-radio-button>\\n              </mat-radio-group>\\n              <mat-error>\\n                <app-validation [labelName]='IsPostCalender.innerText'\\n                  [validationControl]=\\\"testDetailsForm.controls.isPostCalender\\\" [doValidate]=\\\"validate\\\">\\n                </app-validation>\\n              </mat-error>\\n            </div>\\n\\n            <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"center center\\\" class=\\\"mt-28\\\">\\n              <button mat-raised-button matStepperPrevious type=\\\"button\\\" class=\\\"text-uppercase mr-12\\\"\\n                translate>{{'Previous' | translate}}\\n              </button>\\n              <button mat-raised-button matStepperNext type=\\\"button\\\" color=\\\"accent\\\" class=\\\"text-uppercase\\\"\\n                translate>{{'Next' | translate}}\\n              </button>\\n            </div>\\n          </form>\\n          <ng-template *ngTemplateOutlet=\\\"sideBarData;context:{stepperIndex: 1}\\\"></ng-template>\\n        </div>\\n      </mat-step>\\n\\n      <mat-step [stepControl]=\\\"classSectionForm\\\" [completed]=\\\"getOptionalClassStep()\\\" [optional]=getOptionalClassStep()>\\n        <div fxLayout=\\\"column\\\" fxLayout.gt-sm=\\\"row\\\" fxFlexFill>\\n          <form fxLayout=\\\"column\\\" [formGroup]=\\\"classSectionForm\\\" fxFlex=\\\"65\\\" class=\\\"pr-16\\\"\\n            #classSectionFormData=\\\"ngForm\\\">\\n            <ng-template matStepLabel><span translate>Class & Section</span></ng-template>\\n            <label class=\\\"pt-24 font-size-18\\\"><span translate>Please Select Class And Section Participants in this\\n                Test</span></label>\\n            <div fxLayout=\\\"column\\\" fxLayout.gt-sm=\\\"row\\\" class=\\\"pt-24\\\" fxFlex=\\\"100\\\">\\n              <mat-form-field appearance=\\\"outline\\\" fxFlexFill fxLayout=\\\"column\\\" fxFlex=\\\"100\\\" fxFlex.gt-sm=\\\"40\\\"\\n                class=\\\"pr-sm-20\\\">\\n                <mat-label #classId translate>Class</mat-label>\\n                <mat-select required=\\\"true\\\" formControlName=\\\"classId\\\" (selectionChange)=\\\"onSelectClass($event.value)\\\"\\n                  required>\\n                  <mat-option *ngFor=\\\"let classId of classesList\\\" [value]=\\\"classId.value\\\">\\n                    {{classId.label}}</mat-option>\\n                </mat-select>\\n                <mat-error>\\n                  <app-validation [labelName]='classId.innerText'\\n                    [validationControl]=\\\"classSectionForm.controls.classId\\\" [doValidate]=\\\"classValidate\\\">\\n                  </app-validation>\\n                </mat-error>\\n              </mat-form-field>\\n              <af-select appearance=\\\"outline\\\" fxFlexFill fxLayout=\\\"column\\\" fxFlex=\\\"100\\\" fxFlex.gt-sm=\\\"40\\\"\\n                [optionGroupRequired]=\\\"false\\\" [options]=\\\"sectionsList?.length ? sectionsList : []\\\" [showChips]=\\\"1\\\"\\n                placeholder=\\\"Section\\\" [multiple]=\\\"true\\\" formControlName=\\\"sectionId\\\"></af-select>\\n              <div>\\n                <button mat-raised-button type=\\\"submit\\\" color=\\\"primary\\\" class=\\\"text-uppercase ml-12 mt-16\\\"\\n                  (click)=\\\"onClassSectionSelectBtn()\\\" classSectionForm>{{'Select' | translate}}\\n                </button>\\n              </div>\\n            </div>\\n            <div class=\\\"simple-table-container mat-elevation-z3 my-20 radius-t-20 responsive-normal-table\\\"\\n              *ngIf=\\\"allClassSectionDetails.length\\\">\\n              <table class=\\\"simple clickable\\\">\\n                <thead>\\n                  <tr>\\n                    <th class=\\\"text-left\\\" translate>Class</th>\\n                    <th class=\\\"text-left\\\" translate>Section</th>\\n                    <th></th>\\n                  </tr>\\n                </thead>\\n                <tbody>\\n                  <ng-container *ngFor=\\\"let class of allClassSectionDetails\\\">\\n                    <tr *ngFor=\\\"let section of class.sections\\\">\\n                      <td>{{class.label}}</td>\\n                      <td>{{section.label}}</td>\\n                      <td class=\\\"text-right py-4\\\"><button mat-icon-button (click)=\\\"onClassSectionDelete(class,section)\\\">\\n                          <mat-icon class=\\\"red-300-fg\\\">delete</mat-icon>\\n                        </button></td>\\n                    </tr>\\n                  </ng-container>\\n                </tbody>\\n              </table>\\n            </div>\\n            <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"center center\\\" class=\\\"mt-28\\\">\\n              <button mat-raised-button matStepperPrevious type=\\\"button\\\"\\n                class=\\\"text-uppercase mr-12\\\">{{'Previous' | translate}}\\n              </button>\\n              <button mat-raised-button matStepperNext type=\\\"button\\\" (click)=\\\"onClassSectionNext()\\\"\\n                color=\\\"accent\\\" class=\\\"text-uppercase\\\">{{'Next' | translate}}\\n              </button>\\n            </div>\\n          </form>\\n          <ng-template *ngTemplateOutlet=\\\"sideBarData;context:{stepperIndex: 2}\\\"></ng-template>\\n        </div>\\n\\n      </mat-step>\\n      <mat-step [stepControl]=\\\"testScheduleForm\\\" [completed]=\\\"getOptionalScheduleStep()\\\" [optional]=getOptionalScheduleStep()>\\n        <div fxLayout=\\\"column\\\" fxLayout.gt-sm=\\\"row\\\" fxFlexFill>\\n          <form fxLayout=\\\"column\\\" fxFlex=\\\"70\\\" [formGroup]=\\\"testScheduleForm\\\" class=\\\"pr-16\\\"\\n            #testScheduleFormData=\\\"ngForm\\\">\\n            <ng-template matStepLabel><span translate>Test Schedule</span></ng-template>\\n            <div class=\\\"pt-24 font-size-18\\\"><span translate>Please Enter The Schedules for Various Courses in the\\n                Test</span>\\n            </div>\\n\\n            <div fxLayout=\\\"column\\\" fxLayout.gt-sm=\\\"row\\\" class=\\\"pt-24\\\" fxFlex=\\\"100\\\">\\n              <af-select appearance=\\\"outline\\\" fxFlexFill fxLayout=\\\"column\\\" fxFlex=\\\"100\\\" fxFlex.gt-sm=\\\"50\\\"\\n              [required]=\\\"true\\\" (selectionChange)=\\\"onSelectTestScheduleClass($event)\\\"\\n                [optionGroupRequired]=\\\"false\\\" [options]=\\\"allClassSectionDetailsData | async\\\" [showChips]=\\\"1\\\"\\n                placeholder=\\\"Class\\\" [multiple]=\\\"true\\\" formControlName=\\\"classId\\\" [doValidate]=\\\"true\\\"></af-select>\\n\\n              <af-select appearance=\\\"outline\\\" class=\\\"pl-sm-20\\\" fxFlexFill fxLayout=\\\"column\\\" fxFlex=\\\"100\\\"\\n                fxFlex.gt-sm=\\\"50\\\" [optionGroupRequired]=\\\"false\\\"\\n                [options]=\\\"selectedClasses?.length == 1  ? (selectedSection | async)  : []\\\" [showChips]=\\\"1\\\"\\n                placeholder=\\\"Section\\\" [multiple]=\\\"true\\\" formControlName=\\\"sectionId\\\"></af-select>\\n            </div>\\n\\n            <div fxLayout=\\\"column\\\" fxLayout.gt-sm=\\\"row\\\" fxFlex=\\\"100\\\">\\n              <af-select appearance=\\\"outline\\\" fxLayout=\\\"column\\\" fxFlex=\\\"100\\\" fxFlex.gt-sm=\\\"33\\\"\\n                [optionGroupRequired]=\\\"false\\\" [showChips]=\\\"1\\\" [options]=\\\"coursesList?.length ? coursesList : []\\\" [required]=\\\"true\\\" \\n                placeholder=\\\"Courses\\\" [multiple]=\\\"true\\\" formControlName=\\\"courseId\\\"\\n                required [doValidate]=\\\"true\\\">\\n              </af-select>\\n              <mat-form-field appearance=\\\"outline\\\" fxLayout=\\\"column\\\" fxFlex=\\\"100\\\" fxFlex.gt-sm=\\\"33\\\"\\n                class=\\\"pl-sm-20 icon-center\\\">\\n                <mat-label #testDates translate>Test Date</mat-label>\\n                <input matInput (keyup)=\\\"forceValidation('testDate',testScheduleForm)\\\" [matDatepicker]=\\\"testDate\\\"\\n                  formControlName=\\\"testDate\\\" [min]=\\\"academicSessionMinDate\\\" [max]=\\\"academicSessionMaxDate\\\"\\n                  autocomplete=\\\"off\\\" [required]=\\\"true\\\">\\n                <mat-datepicker-toggle matSuffix [for]=\\\"testDate\\\"></mat-datepicker-toggle>\\n                <mat-datepicker #testDate [startAt]=\\\"startAtTestDate\\\"></mat-datepicker>\\n                <mat-error>\\n                  <app-validation [labelName]='testDates.innerText'\\n                    [validationControl]=\\\"testScheduleForm.controls.testDate\\\" [doValidate]=\\\"testSchedulValidate\\\">\\n                  </app-validation>\\n                </mat-error>\\n              </mat-form-field>\\n              <div fxLayout=\\\"column\\\" class=\\\"w-200\\\">\\n                <div fxLayoutAlign=\\\"center start\\\">\\n                  <button mat-raised-button type=\\\"button\\\" class=\\\"text-uppercase ml-12 mt-16\\\" color=\\\"primary\\\" type=\\\"reset\\\"\\n                  (click)=\\\"testScheduleClear()\\\">{{'Clear' | translate}}\\n                </button>\\n                <button mat-raised-button type=\\\"button\\\" color=\\\"accent\\\" class=\\\"text-uppercase ml-12 mt-16\\\" type=\\\"submit\\\"\\n                  (click)=\\\"testScheduleSelectClick()\\\">{{'Select' | translate}}\\n                </button>\\n                </div>              \\n              </div>\\n            </div>\\n\\n            <table class=\\\"mat-elevation-z3 simple clickable radius-10 my-20\\\" fxFlex=\\\"100\\\"\\n              *ngIf=\\\"testScheduleDetails.length !=0\\\">\\n              <thead>\\n                <tr>\\n                  <th class=\\\"text-left\\\" translate>Class</th>\\n                  <th class=\\\"text-left\\\" translate>Section</th>\\n                  <th class=\\\"text-left\\\" translate>Course</th>\\n                  <th class=\\\"text-left\\\" translate>Test Date</th>\\n                  <th></th>\\n                </tr>\\n              </thead>\\n              <tbody>\\n                <tr *ngFor=\\\"let testSchedule of testScheduleDetails\\\">\\n                  <td>{{testSchedule.class}}</td>\\n                  <td>{{testSchedule.section}}</td>\\n                  <td>{{testSchedule.course}}</td>\\n                  <td>{{getFormattedDateBySchoolDateFormat(testSchedule.testDate)}}</td>\\n                  <td class=\\\"text-right py-4\\\"><button mat-icon-button (click)=\\\"ontestScheduleDelete(testSchedule)\\\">\\n                      <mat-icon class=\\\"red-300-fg\\\">delete</mat-icon>\\n                    </button></td>\\n                </tr>\\n              </tbody>\\n            </table>\\n\\n            <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"center center\\\" class=\\\"mt-28\\\">\\n              <button mat-raised-button matStepperPrevious type=\\\"button\\\"\\n                class=\\\"text-uppercase mr-12\\\">{{'Previous' | translate}}\\n              </button>\\n              <button mat-raised-button matStepperNext type=\\\"button\\\" color=\\\"accent\\\" class=\\\"text-uppercase\\\"\\n                (click)=\\\"testScheduleNextBtn()\\\">\\n                {{'Next' | translate}}\\n              </button>\\n            </div>\\n          </form>\\n          <ng-template *ngTemplateOutlet=\\\"sideBarData;context:{stepperIndex: 3}\\\"></ng-template>\\n        </div>\\n      </mat-step>\\n\\n      <mat-step>\\n        <ng-template matStepLabel><span translate>Complete</span></ng-template>\\n        <div fxFlex=\\\"100\\\" class=\\\"font-size-20 py-16\\\" translate>confirmInformation</div>\\n\\n        <mat-list fxLayout=\\\"row wrap\\\" class=\\\"pt-0 confirm-table border\\\">\\n          <mat-list-item fxLayout=\\\"column\\\" fxFlex.gt-xs=\\\"50\\\">\\n            <div fxLayout=\\\"row\\\" fxFlex=\\\"45\\\"><strong><span translate>boardname</span></strong></div>\\n            <div fxLayout=\\\"row\\\" fxFlex=\\\"55\\\"><span class=\\\"pr-4\\\">:</span>\\n              {{getNameBasedOnValue('board',testTypeAndGradingForm.value.boardId)}}</div>\\n          </mat-list-item>\\n          <mat-list-item fxLayout=\\\"column\\\" fxFlex.gt-xs=\\\"50\\\">\\n            <div fxLayout=\\\"row\\\" fxFlex=\\\"45\\\"><strong><span translate>Grading Term</span></strong></div>\\n            <div fxLayout=\\\"row\\\" fxFlex=\\\"55\\\"><span\\n                class=\\\"pr-4\\\">:</span>{{getNameBasedOnValue('gradingTerm',testTypeAndGradingForm.value.gradeTermId)}}\\n            </div>\\n          </mat-list-item>\\n          <mat-list-item fxLayout=\\\"column\\\" fxFlex.gt-xs=\\\"50\\\">\\n            <div fxLayout=\\\"row\\\" fxFlex=\\\"45\\\"><strong><span translate>Test Type</span></strong></div>\\n            <div fxLayout=\\\"row\\\" fxFlex=\\\"55\\\"><span\\n                class=\\\"pr-4\\\">:</span>{{getNameBasedOnValue('testType',testTypeAndGradingForm.value.testTypeId)}}</div>\\n          </mat-list-item>\\n          <mat-list-item fxLayout=\\\"column\\\" fxFlex.gt-xs=\\\"50\\\">\\n            <div fxLayout=\\\"row\\\" fxFlex=\\\"45\\\"><strong><span translate>Name</span></strong></div>\\n            <div fxLayout=\\\"row\\\" fxFlex=\\\"55\\\"><span class=\\\"pr-4\\\">:</span>{{testDetailsForm.value.testName}}</div>\\n          </mat-list-item>\\n          <mat-list-item fxLayout=\\\"column\\\" fxFlex.gt-xs=\\\"50\\\">\\n            <div fxLayout=\\\"row\\\" fxFlex=\\\"45\\\"><strong><span translate>Start Date</span></strong></div>\\n            <div fxLayout=\\\"row\\\" fxFlex=\\\"55\\\"><span\\n                class=\\\"pr-4\\\">:</span>{{testDetailsForm.value.fromDate!=null ? getFormattedDateBySchoolDateFormat(testDetailsForm.value.fromDate):'--'}}</div>\\n          </mat-list-item>\\n          <mat-list-item fxLayout=\\\"column\\\" fxFlex.gt-xs=\\\"50\\\">\\n            <div fxLayout=\\\"row\\\" fxFlex=\\\"45\\\"><strong><span translate>End Date</span></strong></div>\\n            <div fxLayout=\\\"row\\\" fxFlex=\\\"55\\\"><span\\n                class=\\\"pr-4\\\">:</span>{{testDetailsForm.value.toDate!=null ?getFormattedDateBySchoolDateFormat(testDetailsForm.value.toDate):'--'}}</div>\\n          </mat-list-item>\\n          <mat-list-item fxLayout=\\\"column\\\" fxFlex.gt-xs=\\\"50\\\">\\n            <div fxLayout=\\\"row\\\" fxFlex=\\\"45\\\"><strong><span translate>Post to Student Calender</span></strong></div>\\n            <div fxLayout=\\\"row\\\" fxFlex=\\\"55\\\"><span class=\\\"pr-4\\\">:</span>{{testDetailsForm.value.isPostCalender}}</div>\\n          </mat-list-item>\\n        </mat-list>\\n        <div class=\\\"ovrflowy-auto mat-elevation-z3 radius-10 m-20\\\">\\n          <table class=\\\"simple\\\" fxFlex=\\\"100\\\" id=\\\"comform\\\">\\n            <thead>\\n              <tr>\\n                <th class=\\\"text-left stickyx\\\" translate>Class</th>\\n                <th class=\\\"text-left stickyx\\\" translate>Section</th>\\n                <th class=\\\"text-left stickyx\\\" translate>Course</th>\\n                <th class=\\\"text-left stickyx\\\" translate>Test Date</th>\\n\\n              </tr>\\n            </thead>\\n            <tbody>\\n              <tr *ngFor=\\\"let testSchedule of testScheduleDetails\\\">\\n                <td>{{testSchedule.class}}</td>\\n                <td>{{testSchedule.section}}</td>\\n                <td>{{testSchedule.course}}</td>\\n                <td>{{getFormattedDateBySchoolDateFormat(testSchedule.testDate)}}</td>\\n              </tr>\\n            </tbody>\\n          </table>\\n        </div>\\n        <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"center center\\\" class=\\\"mt-32 pt-24\\\">\\n          <button mat-raised-button matStepperPrevious type=\\\"button\\\" class=\\\"text-uppercase mr-12\\\">\\n            {{'Previous' | translate}}</button>\\n          <button mat-raised-button type=\\\"submit\\\" class=\\\"text-uppercase\\\" color=\\\"accent\\\"\\n            (click)=\\\"onSubmit()\\\">{{(isTestEdit ? 'Update':'Create') | translate}}\\n          </button>\\n        </div>\\n      </mat-step>\\n    </mat-vertical-stepper>\\n  </ng-template>\\n\\n  <ng-template #sideBarData let-stepperIndex=\\\"stepperIndex\\\">\\n    <div fxLayout=\\\"column\\\" class=\\\"border-left my-28 mh-424 w-320\\\">\\n      <div fxLayout=\\\"row\\\" class=\\\"py-4 px-20\\\">\\n        <div class=\\\"w-144\\\" translate>Board</div> :<div class=\\\"pl-12 break-word\\\">\\n          {{getNameBasedOnValue('board',testTypeAndGradingForm.value.boardId)}}</div>\\n      </div>\\n      <div fxLayout=\\\"row\\\" class=\\\"py-4 px-20\\\">\\n        <div class=\\\"w-144\\\" translate>Grade Term</div> :<div class=\\\"pl-12 break-word\\\">\\n          {{getNameBasedOnValue('gradingTerm',testTypeAndGradingForm.value.gradeTermId)}} </div>\\n      </div>\\n      <div fxLayout=\\\"row\\\" class=\\\"py-4 px-20\\\">\\n        <div class=\\\"w-144\\\" translate>Test Type</div> :<div class=\\\"pl-12 break-word\\\">\\n          {{getNameBasedOnValue('testType',testTypeAndGradingForm.value.testTypeId)}} </div>\\n      </div>\\n      <ng-container *ngIf=\\\"stepperIndex > 1\\\">\\n        <div fxLayout=\\\"row\\\" class=\\\"py-4 px-20\\\">\\n          <div class=\\\"w-144\\\" translate>Name</div> :<div class=\\\"pl-12 break-word\\\">{{testDetailsForm.value.testName}}\\n          </div>\\n        </div>\\n        <div fxLayout=\\\"row\\\" class=\\\"py-4 px-20\\\">\\n          <div class=\\\"w-144\\\" translate>Start Date</div> :<div class=\\\"pl-12 break-word\\\">\\n            {{testDetailsForm.value.fromDate!=null?getFormattedDateBySchoolDateFormat(testDetailsForm.value.fromDate):'--'}}</div>\\n        </div>\\n        <div fxLayout=\\\"row\\\" class=\\\"py-4 px-20\\\">\\n          <div class=\\\"w-144\\\" translate>End Date</div> :<div class=\\\"pl-12 break-word\\\">\\n            {{testDetailsForm.value.toDate!=null?getFormattedDateBySchoolDateFormat(testDetailsForm.value.toDate):'--'}}</div>\\n        </div>\\n        <div fxLayout=\\\"row\\\" class=\\\"pt-4 pb-12 px-20\\\">\\n          <div class=\\\"w-144\\\" translate>Post to Student calendar</div> :<div class=\\\"pl-12 break-word\\\">\\n            {{testDetailsForm.value.isPostCalender}}</div>\\n        </div>\\n      </ng-container>\\n\\n      <ng-container *ngIf=\\\"stepperIndex > 2\\\">\\n        <div fxLayout=\\\"row\\\" class=\\\"pt-12 px-20 border-top\\\">\\n          <div class=\\\"w-144 font-weight-600 accent-fg\\\" translate>Class</div> <div>\\n            <span class=\\\"pl-12 break-word font-weight-600 accent-fg\\\" translate>\\n              Section\\n            </span>\\n          </div>\\n        </div>\\n        <div fxLayout=\\\"row\\\" class=\\\"py-4 px-20\\\" *ngFor=\\\"let classSection of allClassSectionDetails\\\">\\n          <div class=\\\"w-144\\\" translate>{{classSection.label}}</div> :\\n          <div>\\n            <span class=\\\"pl-12 break-word\\\" *ngFor=\\\"let section of classSection.sections ; let isLast=last\\\">\\n              {{section.label}} {{isLast ? '' : ' , '}}\\n            </span>\\n          </div>\\n        </div>\\n      </ng-container>\\n    </div>\\n  </ng-template>\\n\"","module.exports = \".custom-horizontal-step .mh-424 {\\n  min-height: 424px; }\\n\\n.ovrflowy-auto {\\n  overflow-y: auto;\\n  max-height: 300px; }\\n\\n.manage-institue .mat-tab-label {\\n  text-transform: uppercase; }\\n\\n::ng-deep .mat-step-optional {\\n  display: none !important; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi92YXIvd3d3L2h0bWwvc2Nob29sLW1hbmFnZW1lbnQtZnVzZS9zcmMvYXBwL21vZHVsZXMvYWNhZGVtaWNzL2dyYWRpbmcvdGVzdC1zY2hlZHVsZS90ZXN0LXNjaGVkdWxlLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBRUksaUJBQWlCLEVBQUE7O0FBSXJCO0VBQ0UsZ0JBQWdCO0VBQ2hCLGlCQUFpQixFQUFBOztBQUVuQjtFQUNFLHlCQUF5QixFQUFBOztBQUczQjtFQUNFLHdCQUF3QixFQUFBIiwiZmlsZSI6InNyYy9hcHAvbW9kdWxlcy9hY2FkZW1pY3MvZ3JhZGluZy90ZXN0LXNjaGVkdWxlL3Rlc3Qtc2NoZWR1bGUuY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuY3VzdG9tLWhvcml6b250YWwtc3RlcCB7XG4gIC5taC00MjQge1xuICAgIG1pbi1oZWlnaHQ6IDQyNHB4O1xuICB9XG59XG5cbi5vdnJmbG93eS1hdXRvIHtcbiAgb3ZlcmZsb3cteTogYXV0bztcbiAgbWF4LWhlaWdodDogMzAwcHg7XG59XG4ubWFuYWdlLWluc3RpdHVlIC5tYXQtdGFiLWxhYmVse1xuICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xufVxuXG46Om5nLWRlZXAgLm1hdC1zdGVwLW9wdGlvbmFse1xuICBkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7XG59Il19 */\"","import { ClassesConfigService } from 'app/service/general/api/classes-config.service';\nimport { GradeSetupService } from 'app/service/grading-service/api/grade-setup.service';\nimport { ClassTimetableService } from 'app/service/class-schedules/class-time-table.service';\nimport { GardeTermConfigurationService } from 'app/service/grading-service/api/garde-term-configuration.service';\nimport { MatDialog, MatSnackBar } from '@angular/material';\nimport { CommonService } from 'app/service/common.service';\nimport { Component, OnInit, TemplateRef, ViewChild, ChangeDetectorRef, Output, EventEmitter, Input, HostListener } from '@angular/core';\nimport { TestScheduleService } from 'app/service/grading-service/api/test-schedule-service';\nimport { CommonComponent } from 'app/shared/common/common.component';\nimport { FormGroup, Validators, FormControl, FormBuilder } from '@angular/forms';\nimport { AppSettings, Pattern } from 'app/app.constants';\nimport { CustomDialogComponent } from 'app/shared/custom-dialog/custom-dialog.component';\nimport { TestView } from '../models/test-view';\nimport { TestClassSectionView } from '../models/test-class-section-view';\nimport { TestScheduleClassSectionFilterViewModel } from '../models/test-schedule-class-section-view-model';\nimport { TestScheduleView } from '../models/test-schedule-view';\nimport { TestSchedulesFilterViewModel } from '../models/test-schedules-filter-view-model';\nimport { Router } from '@angular/router';\nimport { RouteConfig } from 'app/url.config';\nimport { TestScoreService } from 'app/service/grading-service/api/testScore.service';\n\n@Component({\n  selector: 'app-test-schedule',\n  templateUrl: './test-schedule.component.html',\n  styleUrls: ['./test-schedule.component.scss'],\n  providers: [ClassesConfigService, GradeSetupService, ClassesConfigService, ClassTimetableService, TestScheduleService, GardeTermConfigurationService, TestScoreService]\n})\nexport class TestScheduleComponent extends CommonComponent implements OnInit {\n  testTypeAndGradingForm: FormGroup;\n  testDetailsForm: FormGroup;\n  classSectionForm: FormGroup;\n  testScheduleForm: FormGroup;\n  schoolBoardsList: any[] = [];\n  classesList: any[] = [];\n  gradeTermList: any[] = [];\n  testTypesList: any[] = [];\n  sectionsList: any[] = [];\n  coursesList: any[] = [];\n  courseSectionsList: any[] = [];\n  classSectionIdList: any[] = [];\n  testScheduleDetails: any[] = [];\n  classSectionDetails: any[] = [];\n  gradeTermIds: Array<any> = [];\n  tableData: Array<any> = [];\n  testClassSectionsCols: any[];\n  testView: TestView;\n  testClassSectionView: TestClassSectionView;\n  testScheduleView: TestScheduleView;\n  testScheduleData: any[] = [];\n  testScheduleClassSectionFilterView: TestScheduleClassSectionFilterViewModel;\n  testScheduleFilterView: TestSchedulesFilterViewModel;\n  testSchedulValidate = true;\n  isSchoolhasBoards = true;\n  closeAddPanel: boolean;\n  classValidate = true;\n  isTestEdit = false;\n  validate = true;\n  schoolBoardId: any;\n  className: any;\n  rows: Array<any>;\n  cols: any[];\n  testClassSectionsRows: Array<any>;\n  pageCnt: number;\n  totalItems: number;\n  tabSettings: {};\n  tableSettings: {};\n  modelname: any;\n  currentComponentName = 'TestScheduleComponent';\n  childComponentName = 'ScheduleComponent';\n  testScheduleId: any;\n  testId: any;\n  isClassSectionStepperValid = false;\n  interactedStepperIndex: Number = 0;\n  testScheduleClassList: any[] = [];\n  testScheduleSectionList: any[] = [];\n  classId: any;\n  sectionId: any;\n  isTestsViewActive = true;\n  index: any = 0;\n  isStaffLogin = false;\n  allClassSectionDetailsData = Promise.resolve([]);\n  selectedSection = Promise.resolve([]);\n  @ViewChild('testScheduleFormData') testScheduleFormData;\n  @ViewChild('classSectionFormData') classSectionFormData;\n  @ViewChild('testDetailForm') testDetailForm;\n  @ViewChild('stepper') stepper;\n\n  testScheduleControls = ['classId', 'sectionId', 'courseId', 'testDate', 'testStepper'];\n  classSectionFormControls = ['classId', 'sectionId', 'classSectionStepper'];\n  isMarks = false;\n  allClassSectionDetails: any[] = [];\n  selectedClasses: any[] = [];\n  startAtTestDate: any;\n  constructor(private classService: ClassesConfigService,\n    private _formBuilder: FormBuilder, private gradeSetupService: GradeSetupService,\n    public classTimetableService: ClassTimetableService,\n    private testScheduleService: TestScheduleService, public gardeTermConfigurationService: GardeTermConfigurationService, private commonComponent: CommonComponent,\n    public dialog: MatDialog, public commonService: CommonService,\n    private router: Router, public snackBar: MatSnackBar, private cd: ChangeDetectorRef, public testScoreService: TestScoreService) {\n    super();\n\n    this.testScheduleFilterView = {\n      sortBy: '',\n      sortOrder: 0,\n      pageNumber: AppSettings.PAGENUMBER, pageSize: AppSettings.PAGESIZE,\n      classes: [],\n      sections: [],\n      terms: [],\n      boardIds: [],\n      testTypes: [],\n      testNames: [],\n      statuses: [],\n      isPostToCalendar: [],\n      courses: [],\n      testStartDatesBegin: null,\n      testStartDatesEnd: null,\n      testEndDateBegin: null,\n      testEndDateEnd: null,\n      testScheduleDateBegin: null,\n      testScheduleDateEnd: null\n    };\n\n    this.testScheduleClassSectionFilterView = {\n      sortBy: '',\n      sortOrder: 0,\n      pageNumber: AppSettings.PAGENUMBER, pageSize: AppSettings.PAGESIZE,\n      classes: [],\n      sections: [],\n      testId: '',\n      statuses: [],\n      courses: [],\n      testScheduleDateBegin: null,\n      testScheduleDateEnd: null,\n    };\n\n  }\n  @HostListener('window:popstate', ['$event'])\n  onPopState(event): void {\n\n    this.switchTabs(window.location.hash);\n  }\n\n  ngOnInit(): void {\n    this.testTypeAndGradingForm = this._formBuilder.group({\n      boardId: [null, [Validators.required]],\n      gradeTermId: [null, [Validators.required]],\n      testTypeId: [null, [Validators.required]],\n      testMaxMarks: [null, [Validators.pattern(Pattern.NUMBER_PATTERN), Validators.min(1), Validators.max(9999)]]\n    });\n\n    this.testDetailsForm = this._formBuilder.group({\n      testName: [null, [Validators.required, Validators.maxLength(45)]],\n      fromDate: '',\n      toDate: '',\n      isPostCalender: [AppSettings.NO, [Validators.required]]\n    });\n\n    this.classSectionForm = this._formBuilder.group({\n      classId: [null, [Validators.required]],\n      sectionId: [null],\n      classSectionStepper: [null, [Validators.required]]\n    });\n\n    this.testScheduleForm = this._formBuilder.group({\n      classId: [null, [Validators.required]],\n      sectionId: [null],\n      courseId: [null, [Validators.required]],\n      testDate: [null, [Validators.required]],\n      testStepper: [null, [Validators.required]]\n    });\n\n    this.testView = {\n      testName: '',\n      testClassSections: [this.testClassSectionView],\n    };\n\n\n    this.cols = [\n      { field: 'termName', header: 'Grade Term', sort: true },\n      { field: 'testType', header: 'Test Type', sort: true },\n      { field: 'testName', header: 'Test Name', sort: true },\n      { field: 'testStartDate', header: 'Start Date', sort: true },\n      { field: 'testEndDate', header: 'End Date', sort: true },\n      { field: 'isPostToCalendar', header: 'Calendar', sort: true },\n      { field: 'classSections', header: 'Class & Sections', sort: true },\n      { field: 'status', header: 'Status', sort: true },\n      { field: 'actions', header: 'Actions', sort: false },\n    ];\n\n    this.testClassSectionsCols = [\n      { field: 'class', header: 'Class', sort: true },\n      { field: 'section', header: 'Section', sort: true },\n      { field: 'course', header: 'Subject', sort: true },\n      { field: 'testDate', header: 'Test Date', sort: true },\n      { field: 'status', header: 'Status', sort: true },\n      { field: 'actions', header: 'Actions', sort: false },\n    ];\n\n\n    const modelTableComponent = this.getModelComponent(this.currentComponentName);\n    if (modelTableComponent) {\n      this.testScheduleFilterView = modelTableComponent;\n    }\n    // / initializing table settings /\n    this.tableSettings = {\n      rows: [],\n      columns: this.testClassSectionsCols,\n      model: this.testScheduleClassSectionFilterView,\n      componentName: this.childComponentName,\n      isPaginationRequired: true,\n      totalRowsCount: this.totalItems,\n      pageCnt: this.pageCnt,\n      hideHeader: true,\n    };\n\n    if (this.getTokenParam('_as')) {\n      this.getSchoolBoardsList();\n      this.getTestTypesList();\n      this.tabSettings = {\n        rows: [],\n        columns: this.cols,\n        model: this.testScheduleFilterView,\n        componentName: this.currentComponentName,\n        isPaginationRequired: true,\n        totalRowsCount: this.totalItems,\n        pageCnt: this.pageCnt,\n        isRowExpandRequired: true,\n        headerOperations: {\n          addingForm: {\n            btnName: AppSettings.NEW,\n            required: true,\n          },\n          infoButton: {\n            required: true,\n            text: 'Test Schedules/Marks'\n          },\n        }\n      };\n      if (!window.location.hash) {\n        this.selected(this.index);\n      }\n      else {\n        this.switchTabs(window.location.hash);\n      }\n\n    }\n    else {\n      this.acadamicSessionExist();\n    }\n  }\n  acadamicSessionExist(): void {\n    setTimeout(() => {\n      this.openSnackBar(AppSettings.SCHOOLACADEMIC_SESSION_REQUIRED, true);\n    });\n    this.tabSettings = {\n      rows: [],\n      columns: this.cols,\n      model: this.testScheduleFilterView,\n      componentName: this.currentComponentName,\n      isPaginationRequired: true,\n      totalRowsCount: this.totalItems,\n      pageCnt: this.pageCnt,\n      isRowExpandRequired: true,\n      headerOperations: {\n        infoButton: {\n          required: true,\n          text: 'Test Schedules/Marks'\n        },\n      }\n    };\n  }\n\n\n  getSchoolBoardsList(): void {\n    this.gradeSetupService.schoolAcademicBoards().subscribe(res => {\n      if (res.listViews && res.listViews.length) {\n        this.isSchoolhasBoards = true;\n        res.listViews.forEach(element => {\n          this.schoolBoardsList.push({\n            label: element.name,\n            value: element.id\n          });\n        });\n        this.setDefaultBoard();\n      } else {\n        this.isSchoolhasBoards = false;\n      }\n    }, error => {\n      this.errorResponse(error);\n    });\n  }\n\n  getTestTypesList(): void {\n    this.gardeTermConfigurationService.fetchTestTypes().subscribe(res => {\n      if (res.listViews && res.listViews.length) {\n        this.isSchoolhasBoards = true;\n        res.listViews.forEach(element => {\n          this.testTypesList.push({\n            label: element.name,\n            value: element.id\n          });\n        });\n      }\n    }, error => {\n      this.errorResponse(error);\n    });\n  }\n\n  loadTestSchedules(): void {\n    this.testScheduleService.getAllTestSchedules(this.testScheduleFilterView.sortBy, this.testScheduleFilterView.sortOrder,\n      this.testScheduleFilterView.terms, this.testScheduleFilterView.testTypes, this.testScheduleFilterView.testNames,\n      this.testScheduleFilterView.testStartDatesBegin, this.testScheduleFilterView.testStartDatesEnd,\n      this.testScheduleFilterView.testEndDateBegin, this.testScheduleFilterView.testEndDateEnd,\n      this.testScheduleFilterView.isPostToCalendar, this.testScheduleFilterView.classes, this.testScheduleFilterView.sections,\n      this.testScheduleFilterView.statuses, this.testScheduleFilterView.courses,\n      this.testScheduleFilterView.testScheduleDateBegin, this.testScheduleFilterView.testScheduleDateEnd,\n      this.testScheduleFilterView.pageNumber, this.testScheduleFilterView.pageSize).subscribe(data => this.response(data), error => {\n        this.errorResponse(error);\n      });\n\n  }\n\n  response(data: any): void {\n    if (data.testScheduleListViewModel) {\n      this.rows = data.testScheduleListViewModel.list;\n      this.totalItems = data.testScheduleListViewModel.totalItems;\n    } else {\n      this.rows = [];\n    }\n\n    this.rows.forEach((e: any) => {\n      e.testStartDate = (e.testStartDate == null) ? null : this.commonService.customDateFormat(e.testStartDate, this.getSchoolDateFormat()).date;\n      e.testEndDate = (e.testEndDate == null) ? null : this.commonService.customDateFormat(e.testEndDate, this.getSchoolDateFormat()).date;\n      this.updateRowActions(e);\n    });\n\n    this.tabSettings = {\n      columns: this.cols,\n      model: this.testScheduleFilterView,\n      rows: this.rows,\n      componentName: this.currentComponentName,\n      isSelectRowRequired: false,\n      visibleSelectAll: true,\n      isPaginationRequired: true,\n      totalRowsCount: this.totalItems,\n      pageCnt: this.pageCnt,\n      filtersList: data.filters,\n      isRowExpandRequired: true,\n      headerOperations: {\n        addingForm: {\n          btnName: AppSettings.NEW,\n          required: true,\n        },\n        infoButton: {\n          required: true,\n          text: 'Test Schedules/Marks'\n        },\n      }\n    };\n    this.scrollIntoView('app-table');\n  }\n\n  updateRowActions(row: any): void {\n    if (row.isHomeWorkTest) {\n      row.operations = [\n        {\n          name: AppSettings.EDIT_VIEW_OPERATION,\n          icon: AppSettings.EDIT,\n          operationName: AppSettings.EDIT_VIEW_OPERATION\n        }\n      ];\n    }\n    else {\n      row.operations = [\n        {\n          name: AppSettings.EDIT_OPERATION,\n          icon: AppSettings.EDIT,\n          operationName: AppSettings.EDIT\n        }\n      ];\n    }\n  }\n\n  loadTestClassSections(testId: any): void {\n\n    this.testScheduleService.getAllTestClassSections(this.testScheduleClassSectionFilterView.sortBy, this.testScheduleClassSectionFilterView.sortOrder, testId,\n      this.testScheduleFilterView.classes, this.testScheduleFilterView.sections,\n      this.testScheduleFilterView.statuses, this.testScheduleFilterView.courses,\n      this.testScheduleFilterView.testStartDatesBegin, this.testScheduleFilterView.testStartDatesEnd,\n      this.testScheduleClassSectionFilterView.pageNumber, this.testScheduleClassSectionFilterView.pageSize).subscribe(data => this.classSectionresponse(data), error => {\n        this.errorResponse(error);\n      });\n  }\n\n  classSectionresponse(data: any): void {\n    if (data.testClassSectionsListViewModel) {\n      this.testClassSectionsRows = data.testClassSectionsListViewModel.list;\n      this.totalItems = data.testClassSectionsListViewModel.totalItems;\n      this.pageCnt = data.testClassSectionsListViewModel.totalPages;\n    } else {\n      this.testClassSectionsRows = [];\n    }\n\n\n    this.testClassSectionsRows.forEach((e: any) => {\n      if (e.isEditable) {\n\n        switch (true) {\n          case e.statusCode === AppSettings.TEST_SCHEDULED_CODE:\n            e.operations = [\n              {\n                name: AppSettings.COMPLETE,\n                icon: AppSettings.APPROVE_ICON,\n                operationName: AppSettings.COMPLETE\n              }, {\n                name: AppSettings.CANCEL,\n                icon: AppSettings.DELETE_ICON,\n                operationName: AppSettings.CANCEL\n              },\n              {\n                name: AppSettings.MARKS,\n                icon: AppSettings.MARKS_ICON,\n                operationName: AppSettings.MARKS\n              }\n            ];\n            break;\n          case e.statusCode === AppSettings.TEST_COMPLETED_CODE:\n            e.operations = [\n              {\n                name: AppSettings.CANCEL,\n                icon: AppSettings.DELETE_ICON,\n                operationName: AppSettings.CANCEL\n              },\n              {\n                name: AppSettings.MARKS,\n                icon: AppSettings.MARKS_ICON,\n                operationName: AppSettings.MARKS\n              }];\n            break;\n\n          case e.statusCode === AppSettings.TEST_CANCELED_CODE:\n\n            e.operations = [\n              {\n                name: AppSettings.MARKS,\n                icon: AppSettings.MARKS_ICON,\n                operationName: AppSettings.MARKS\n              }\n            ];\n            break;\n        }\n\n      }\n      e.testDate = (e.testDate == null) ? null : this.commonService.customDateFormat(e.testDate, this.getSchoolDateFormat()).date;\n    });\n\n    this.tableSettings = {\n      columns: this.testClassSectionsCols,\n      model: this.testScheduleClassSectionFilterView,\n      rows: this.testClassSectionsRows,\n      tablename: 'Test Schedules',\n      componentName: this.childComponentName,\n      isSelectRowRequired: false,\n      visibleSelectAll: true,\n      isPaginationRequired: true,\n      totalRowsCount: this.totalItems,\n      pageCnt: this.pageCnt,\n      hideHeader: true,\n      isClSideFltReq: true,\n      isClientSidePaginationReq: true\n    };\n  }\n\n  testScheduleTableData(_event: TestSchedulesFilterViewModel): void {\n    this.testScheduleFilterView = _event;\n    this.loadTestSchedules();\n  }\n\n  testClassSectionsTableData(_event: TestScheduleClassSectionFilterViewModel): void {\n    this.testScheduleClassSectionFilterView = _event;\n    this.loadTestClassSections(this.testId);\n  }\n\n  rowActions(data: any): void {\n    this.testId = data.clickedRow.id;\n    if (data.operation === AppSettings.EDIT) {\n      this.isTestEdit = true;\n      this.testScheduleService.getByTest(data.clickedRow.id).subscribe(res => this.getByTestRes(res), error => {\n        this.errorResponse(error);\n      });\n    }\n\n    else if (data.operation === AppSettings.EDITVIEW) {\n      this.openSnackBar(AppSettings.HOMEWORK_TEST_VALIDATION, true);\n    }\n\n    else {\n      this.loadTestClassSections(this.testId);\n    }\n  }\n  getByTestRes(res: any): void {\n    this.allClassSectionDetails = [];\n    this.testScheduleClassList = [];\n    this.testScheduleData = [];\n    this.closeAddPanel = false;\n    this.isTestEdit = true;\n\n    this.testDetailsForm.patchValue(res);\n    this.testDetailsForm.controls['isPostCalender'].setValue((res.isPostCalender === 1) ? AppSettings.YES : AppSettings.NO);\n    this.testTypeAndGradingForm.patchValue(res);\n    this.onTestTypeSelect(this.testTypeAndGradingForm.value.testTypeId);\n    this.onSelectSchoolBoard(res.boardId);\n\n    this.onSelectGradingTerm(res);\n\n    this.testClassSectionView = {\n      schoolAcademicSessionClassSectionId: null,\n      testSchedules: []\n    };\n\n    this.testView = {\n      testName: '',\n      testClassSections: [],\n    };\n\n    for (const classSection of res.testClassSectionDetails) {\n      if (this.testScheduleClassList.length) {\n        const scheduleIndex = this.testScheduleClassList.findIndex((element) =>\n          (element.value === classSection.classId));\n        if (scheduleIndex <= -1) {\n          this.testScheduleClassList.push({\n            label: classSection.className,\n            value: classSection.classId,\n          });\n        }\n      }\n      else {\n        this.testScheduleClassList.push({\n          label: classSection.className,\n          value: classSection.classId,\n        });\n      }\n\n\n      this.courseSectionsList.push({\n        label: classSection.sectionName,\n        value: classSection.schoolAcademicSessionClassSectionId,\n        classId: classSection.classId\n      });\n\n      for (const testSchedule of classSection.testSchedules) {\n        this.testScheduleDetails.push({\n          class: testSchedule.className,\n          section: testSchedule.sectionName,\n          course: testSchedule.courseName,\n          testDate: this.getFormattedDateByAPIPattern(testSchedule.testDate),\n          courseId: testSchedule.courseId,\n          sectionId: classSection.schoolAcademicSessionClassSectionId\n\n        });\n\n      }\n      const testClassSection = {\n        label: '',\n        value: 0,\n        sections: []\n      };\n      const index = this.allClassSectionDetails.findIndex(x => x.value === classSection.classId);\n\n      testClassSection.sections.push({\n        label: classSection.sectionName,\n        value: classSection.schoolAcademicSessionClassSectionId\n      });\n      if (index === -1) {\n        testClassSection.label = classSection.className;\n        testClassSection.value = classSection.classId;\n        this.allClassSectionDetails.push(testClassSection);\n      }\n      else {\n        this.allClassSectionDetails[index].sections.push(testClassSection.sections[0]);\n      }\n    }\n    this.testScheduleData = res.testClassSectionDetails;\n\n    this.classSectionDetails.length ? this.classSectionForm.controls['classSectionStepper'].setValue('active') :\n      this.classSectionForm.controls['classSectionStepper'].setValidators(Validators.required);\n\n    this.testScheduleDetails.length ? this.testScheduleForm.controls['testStepper'].setValue('active') :\n      this.testScheduleForm.controls['testStepper'].setValidators(Validators.required);\n\n    this.stepper._steps._results.forEach((x) => {\n      x.interacted = true;\n      x.completed = true;\n    });\n    this.interactedStepperIndex = this.stepper._steps._results.length;\n    this.classSectionFormData.resetForm();\n    this.testScheduleFormData.resetForm();\n\n    this.allClassSectionDetailsData = Promise.resolve(this.allClassSectionDetails);\n    this.customSteperLabelChange();\n  }\n\n  ClassSectionrowActions(response: any): void {\n    this.testScheduleId = response.clickedRow.id;\n    if (response.operation === AppSettings.COMPLETE.toLowerCase()) {\n\n\n      const dialogRef = this.dialog.open(CustomDialogComponent, {\n        disableClose: true,\n        data: {\n          text: this.commonService.getTranslation(AppSettings.COMPLETE_TEST_SCHEDULE),\n          action: true, btn1Text: AppSettings.NO, btn2Text: AppSettings.YES\n        },\n      });\n\n      dialogRef.afterClosed().subscribe(action => {\n        if (action === AppSettings.YES) {\n          this.testScheduleService.completeOrCancelSchedule(this.testScheduleId, true).subscribe(res => this.completeOrCancelRequest(res), error => {\n            this.commonComponent.errorResponse(error);\n          });\n        }\n      });\n    }\n\n    if (response.operation === AppSettings.CANCEL.toLowerCase()) {\n      const dialogRef = this.dialog.open(CustomDialogComponent, {\n        disableClose: true,\n        data: {\n          text: this.commonService.getTranslation(AppSettings.CANCEL_TEST_SCHEDULE),\n          action: true, btn1Text: AppSettings.NO, btn2Text: AppSettings.YES\n        },\n      });\n\n      dialogRef.afterClosed().subscribe(action => {\n        if (action === AppSettings.YES) {\n          this.testScheduleService.completeOrCancelSchedule(this.testScheduleId, false).subscribe(res => this.completeOrCancelRequest(res), error => {\n            this.commonComponent.errorResponse(error);\n          });\n        }\n      });\n    }\n    if (response.operation === AppSettings.MARKS.toLowerCase()) {\n      if (this.isStaffLogin) {\n        this.router.navigate([RouteConfig.Staff_Test_Grading + '/' + response.clickedRow.id, { operation: AppSettings.TEST }]);\n      }\n      else {\n        this.router.navigate([RouteConfig.Test_Grading + '/' + response.clickedRow.id, { operation: AppSettings.TEST }]);\n      }\n\n    }\n  }\n\n  completeOrCancelRequest(response: any): void {\n    this.loadTestClassSections(this.testId);\n    this.openSnackBar(response.messages.ResultMessage);\n  }\n\n  onSelectSchoolBoard(schoolBoard: any): void {\n    this.gradeTermList = [];\n    this.classesList = [];\n    this.coursesList = [];\n    this.schoolBoardId = this.testTypeAndGradingForm.value.boardId;\n    this.gardeTermConfigurationService.gradingTermConfigurationGradingTermsByStaffGet(schoolBoard).subscribe(response => {\n      if (response.listViews && response.listViews.length) {\n        response.listViews.forEach(element => {\n          this.gradeTermList.push({\n            label: element.name,\n            value: element.id\n          });\n        });\n      }\n    }, error => {\n      this.errorResponse(error);\n    });\n\n    this.classTimetableService.classTimetableCoursesGet(this.testTypeAndGradingForm.value.boardId).subscribe(response => {\n      if (response.commonViewModel && response.commonViewModel.length) {\n        response.commonViewModel.forEach(element => {\n          this.coursesList.push({\n            label: element.name,\n            value: element.id\n          });\n        });\n      }\n    }, error => {\n      this.errorResponse(error);\n    });\n  }\n\n  onSelectGradingTerm(gradingTermId: any): void {\n    this.classesList = [];\n    this.sectionsList = [];\n    this.classSectionDetails = [];\n    this.testScheduleDetails = [];\n    this.testScheduleClassList = [];\n    this.testScheduleSectionList = [];\n    this.testScheduleData = [];\n    this.allClassSectionDetails = [];\n    this.testScheduleForm.reset();\n    this.classSectionForm.reset();\n    this.gardeTermConfigurationService.gradingTermConfigurationFetchClassesByGradingtermid(this.testTypeAndGradingForm.value.gradeTermId).subscribe(response => {\n      if (response && response.length) {\n        response.forEach(element => {\n          this.classesList.push({\n            label: element.name,\n            value: element.id\n          });\n        });\n      }\n    }, error => {\n      this.errorResponse(error);\n    });\n  }\n\n  onSelectClass(classId: any): void {\n    this.className = this.classesList.find(x => x.value === classId).label;\n    this.classId = classId;\n    this.sectionsList = [];\n    this.testScheduleService.getAllDetails(this.schoolBoardId, classId, this.testTypeAndGradingForm.value.gradeTermId).subscribe(response => {\n      if (response.academicSectionsLists && response.academicSectionsLists.length) {\n        response.academicSectionsLists.forEach(element => {\n          this.sectionsList.push({\n            label: element.sectionName,\n            value: element.schoolAcademicClassSectionId\n          });\n        });\n      }\n    }, error => {\n      this.errorResponse(error);\n    });\n    this.classSectionForm.patchValue({ sectionId: null });\n  }\n\n  onClassSectionSelectBtn(): void {\n    if (this.classSectionForm.value.classId != null) {\n      const index = this.allClassSectionDetails.findIndex(x => x.value === this.classSectionForm.value.classId);\n\n      if (this.classSectionForm.value.sectionId == null || !this.classSectionForm.value.sectionId.length) {\n        if (index === -1) {\n          this.allClassSectionDetails.push(\n            {\n              label: this.className,\n              value: this.classSectionForm.value.classId,\n              sections: this.sectionsList\n            });\n        }\n        else {\n          this.allClassSectionDetails.push(\n            {\n              label: this.className,\n              value: this.classSectionForm.value.classId,\n              sections: this.sectionsList\n            });\n          this.allClassSectionDetails.splice(index, 1);\n        }\n\n      }\n      else {\n        if (index === -1) {\n          this.allClassSectionDetails.push(\n            {\n              label: this.className,\n              value: this.classSectionForm.value.classId,\n              sections: this.classSectionForm.value.sectionId\n            });\n        }\n        else {\n          this.classSectionForm.value.sectionId.forEach(element1 => {\n            const i = this.allClassSectionDetails[index].sections.findIndex(x => x.value === element1.value);\n            if (i === -1) {\n              this.allClassSectionDetails[index].sections.push(element1);\n\n            }\n          });\n        }\n      }\n    }\n\n    this.cd.detectChanges();\n    this.validateTestSchedules();\n    this.onSelectTestScheduleClass(this.selectedClasses);\n    this.allClassSectionDetailsData = Promise.resolve(this.allClassSectionDetails);\n  }\n  onClassSectionDelete(classes: any, sectionId: any): void {\n    this.allClassSectionDetails.map((element: any, i: any) => {\n      if (element.value === classes.value) {\n        element.sections = element.sections.filter(e => e.value !== sectionId.value);\n        if (!element.sections.length) {\n          this.allClassSectionDetails.splice(i, 1);\n        }\n      }\n    });\n    this.testScheduleDetails = this.testScheduleDetails.filter(x => x.sectionId !== sectionId.value);\n    this.testScheduleData = this.testScheduleData.filter(x => x.schoolAcademicSessionClassSectionId !== sectionId.value);\n    this.validateTestSchedules();\n    this.onSelectTestScheduleClass(this.selectedClasses);\n    let sections = [];\n    if (this.testScheduleForm.value.sectionId != null) {\n      sections = this.testScheduleForm.value.sectionId.filter(e => e.value !== sectionId.value);\n    }\n\n    this.testScheduleForm.patchValue({ sectionId: sections.length ? sections : null });\n\n    if (!this.allClassSectionDetails.length) {\n      this.testScheduleForm.patchValue({ classId: null, sectionId: null });\n    }\n    this.cd.detectChanges();\n    this.allClassSectionDetailsData = Promise.resolve(this.allClassSectionDetails);\n  }\n\n  ontestScheduleDelete(data: any): void {\n    const index = this.testScheduleDetails.findIndex(x => x.sectionId === data.sectionId && x.courseId === data.courseId);\n    if (index !== -1) {\n      this.testScheduleDetails.splice(index, 1);\n    }\n    const index1 = this.testScheduleData.findIndex(x => x.schoolAcademicSessionClassSectionId === data.sectionId);\n    if (index1 !== -1) {\n\n      this.testScheduleData[index1].testSchedules.forEach((element: any, scheduleIndex: any) => {\n        if (element.courseId === data.courseId) {\n          this.testScheduleData[index1].testSchedules.splice(scheduleIndex, 1);\n        }\n      });\n    }\n\n    this.getOptionalScheduleStep();\n  }\n\n  onSelectTestScheduleClass(classId: any): void {\n    this.selectedClasses = classId;\n    if (this.selectedClasses !== null && this.selectedClasses.length > 1) {\n      this.testScheduleForm.controls['sectionId'].setValue(null);\n    }\n    if (this.selectedClasses !== null && this.selectedClasses.length === 1) {\n      this.selectedSection = Promise.resolve(this.selectedClasses[0].sections);\n    }\n  }\n  onSubmit(): void {\n    Object.assign(this.testView, this.testDetailsForm.value, this.testTypeAndGradingForm.value);\n\n    this.testView.testClassSections.forEach((data: any, index: any) => {\n      if (data === undefined) {\n        this.testView.testClassSections.splice(index, 1);\n      }\n    });\n\n    this.testScheduleData.forEach((element: any) => {\n      const index = this.testView.testClassSections.findIndex(x => x.schoolAcademicSessionClassSectionId === element.schoolAcademicSessionClassSectionId);\n      element.testSchedules.forEach(testSchedule => testSchedule.testMaxMarks = this.testTypeAndGradingForm.value.testMaxMarks);\n\n      let testClassSection = {};\n      if (index === -1) {\n        testClassSection = {\n          schoolAcademicSessionClassSectionId: element.schoolAcademicSessionClassSectionId,\n          testSchedules: element.testSchedules\n        };\n\n        this.testView.testClassSections.push(testClassSection);\n      }\n      else {\n        if (element.testSchedules.length) {\n          const testScheduleIndex = this.testView.testClassSections[index].testSchedules.findIndex(x => x.courseId === element.testSchedules[0].courseId);\n          if (testScheduleIndex === -1) {\n            this.testView.testClassSections[index].testSchedules.push(element.testSchedules[0]);\n          }\n          else {\n            this.testView.testClassSections[index].testSchedules[testScheduleIndex].testDate = element.testSchedules[0].testDate;\n          }\n        }\n      }\n    });\n\n    this.testView.testClassSections = this.testView.testClassSections.filter(x => x.schoolAcademicSessionClassSectionId != null);\n\n    this.testView.isPostCalender = this.testDetailsForm.value.isPostCalender === AppSettings.YES ? 1 : 0;\n    if (this.testView.fromDate !== '' && this.testView.fromDate !== null) {\n      this.testView.fromDate = this.getFormattedDateByAPIPattern(this.testView.fromDate);\n    }\n    if (this.testView.toDate !== '' && this.testView.toDate !== null) {\n      this.testView.toDate = this.getFormattedDateByAPIPattern(this.testView.toDate);\n    }\n\n    if (!this.isTestEdit) {\n      this.testScheduleService.createTest(this.testView)\n        .subscribe((res: any) => this.submitResponce(res), error => {\n          this.errorResponse(error);\n        });\n\n    }\n    else {\n      this.testView['testId'] = this.testId;\n      this.testScheduleService.updateTest(this.testView)\n        .subscribe((res: any) => this.submitResponce(res), error => {\n          this.errorResponse(error);\n        });\n    }\n  }\n\n  submitResponce(res: any): void {\n    this.testScheduleDetails = [];\n    this.classSectionDetails = [];\n    this.testScheduleClassList = [];\n    this.testScheduleSectionList = [];\n    this.onCancel();\n    this.loadTestSchedules();\n    document.getElementById('resetButtonStepper').click();\n    this.openSnackBar(res.messages.ResultMessage);\n  }\n\n  testScheduleSelectClick(): any {\n    if (this.testScheduleForm.value.classId != null && this.testScheduleForm.value.courseId != null && this.testScheduleForm.controls.testDate.valid) {\n      this.startAtTestDate = this.testScheduleForm.value.testDate;\n\n      this.testScheduleForm.value.classId.forEach((classes, i) => {\n        this.testScheduleForm.value.courseId.forEach(course => {\n\n          this.testScheduleView = {\n            courseId: course.value,\n            testDate: this.getFormattedDateByAPIPattern(this.testScheduleForm.value.testDate),\n            testMaxMarks: this.testTypeAndGradingForm.value.testMaxMarks\n          };\n\n          if (this.testScheduleForm.value.sectionId != null && this.testScheduleForm.value.sectionId.length) {\n            this.testScheduleForm.value.sectionId.forEach(sections => {\n              this.testData(classes, sections, course);\n            });\n          }\n          else {\n            classes.sections.forEach(sections => {\n              this.testData(classes, sections, course);\n            });\n          }\n        });\n      });\n\n      this.testScheduleData.forEach(element => {\n        element.testSchedules.forEach(el1 => {\n          const sIndex = this.testScheduleDetails.findIndex(x => x.sectionId === element.schoolAcademicSessionClassSectionId && x.courseId === el1.courseId);\n          if (sIndex === -1) {\n            this.testScheduleDetails.push({\n              sectionId: element.schoolAcademicSessionClassSectionId,\n              class: element.className,\n              section: element.sectionName,\n              course: this.coursesList.find(x => x.value === el1.courseId).label,\n              courseId: el1.courseId,\n              testDate: this.getFormattedDateByAPIPattern(this.testScheduleForm.value.testDate)\n            });\n          }\n        });\n      });\n    }\n  }\n  testData(classes: any, sections: any, course: any): void {\n    const scheduleIndex = this.testScheduleData.findIndex(x => x.schoolAcademicSessionClassSectionId === sections.value);\n\n    if (scheduleIndex === -1) {\n      this.testScheduleData.push(\n        {\n          className: classes.label,\n          sectionName: sections.label,\n          schoolAcademicSessionClassSectionId: sections.value,\n          courseId: course.value,\n          testSchedules: [this.testScheduleView]\n        });\n    }\n\n    else {\n      const c = this.testScheduleData[scheduleIndex].testSchedules.findIndex(x => x.courseId === course.value);\n      if (c === -1) {\n        this.testScheduleData[scheduleIndex].testSchedules.push(this.testScheduleView);\n      }\n      else {\n        this.testScheduleData[scheduleIndex].testSchedules[c].testDate = this.getFormattedDateByAPIPattern(this.testScheduleForm.value.testDate);\n      }\n    }\n    const detailsindex = this.testScheduleDetails.findIndex(x => x.sectionId === sections.value && x.courseId === course.value);\n    if (detailsindex !== -1) {\n      this.testScheduleDetails.splice(detailsindex, 1);\n    }\n  }\n  testScheduleReset(): void {\n    this.testScheduleForm.reset();\n    this.testScheduleFormData.resetForm();\n  }\n\n  checkExistData(): any {\n    let index = null;\n    for (const classSection of this.testView.testClassSections) {\n      if (classSection === undefined) {\n        this.testView.testClassSections.splice(this.testView.testClassSections.indexOf(classSection), 1);\n      }\n      else if (classSection.schoolAcademicSessionClassSectionId === this.testScheduleForm.value.sectionId) {\n        for (const ts of classSection.testSchedules) {\n          if (ts.courseId === this.testScheduleForm.value.courseId) {\n            classSection.testSchedules.splice(classSection.testSchedules.indexOf(ts), 1);\n            this.testScheduleDetails.splice(classSection.testSchedules.indexOf(ts), 1);\n          }\n        }\n        if (index !== false) {\n          index = (this.testView.testClassSections.indexOf(classSection));\n          break;\n        }\n      }\n    }\n    return index;\n  }\n\n  setTestView(): void {\n    this.testClassSectionView = {\n      schoolAcademicSessionClassSectionId: this.testScheduleForm.value.sectionId,\n      testSchedules: [this.testScheduleView]\n    };\n    this.testView.testClassSections.push(this.testClassSectionView);\n  }\n\n  onCancel(): void {\n    this.closeAddPanel = true;\n    this.testScheduleFormData.resetForm();\n    this.classSectionFormData.resetForm();\n    this.testDetailForm.resetForm();\n    this.classSectionForm.reset();\n    this.testScheduleForm.reset();\n    this.testScheduleClassList = [];\n    this.courseSectionsList = [];\n\n    for (const controls of this.classSectionFormControls) {\n      this.classSectionForm.controls[controls].setValidators(Validators.required);\n      this.classSectionForm.controls[controls].updateValueAndValidity();\n    }\n\n    this.stepper.reset();\n    this.isTestEdit = true;\n    this.testScheduleDetails = [];\n    this.classSectionDetails = [];\n    this.validate = true;\n    this.testDetailsForm.controls['isPostCalender'].setValue(AppSettings.NO);\n  }\n  dialogMethod(dialogData: any, disableClose: boolean, button1Text: string, button2Text?: string): any {\n    return this.dialog.open(CustomDialogComponent, {\n      disableClose: disableClose,\n      data: { text: this.commonService.getTranslation(dialogData), action: true, btn1Text: button1Text, btn2Text: button2Text },\n    });\n  }\n  getNameBasedOnValue(name, value): any {\n    if (value === '' || value === 0) {\n      return '';\n    }\n    let x;\n    switch (name) {\n      case 'board':\n        return (x = this.schoolBoardsList.filter(element => element.value === value)).length ? x[0].label : '';\n      case 'gradingTerm':\n        return (x = this.gradeTermList.filter(element => element.value === value)).length ? x[0].label : '';\n      case 'testType':\n        return (x = this.testTypesList.filter(element => element.value === value)).length ? x[0].label : '';\n      case 'course':\n        return (x = this.coursesList.filter(element => element.id === value)).length ? x[0].name : '';\n      default: break;\n    }\n  }\n  OnSelectionChange(event: any): void {\n    if (event.selectedIndex > this.interactedStepperIndex) {\n      this.interactedStepperIndex = event.selectedIndex;\n    } else {\n      this.stepper._steps._results.forEach((x, i) => {\n        x.interacted = i < this.interactedStepperIndex ? true : false;\n      });\n    }\n    if (event.selectedIndex === 2) {\n      (<any>Object).values(this.classSectionForm.controls).forEach((control: FormControl) => {\n        control.markAsUntouched();\n        control.updateValueAndValidity();\n      });\n      this.classSectionFormData.submitted = false;\n      this.stepper._steps._results[event.selectedIndex].interacted = false;\n    }\n    if (event.selectedIndex === 3) {\n      this.allClassSectionDetailsData = Promise.resolve(this.allClassSectionDetails);\n      if (this.testScheduleForm.value.classId != null && this.testScheduleForm.value.classId.length) {\n        const removedClasses = [];\n        this.testScheduleForm.value.classId.forEach((cls: any, i: any) => {\n          const index = this.allClassSectionDetails.findIndex(e => e.value === cls.value);\n          if (index !== -1) {\n            removedClasses.push(cls);\n          }\n        });\n        this.testScheduleForm.patchValue({ classId: removedClasses.length ? removedClasses : null });\n      }\n      (<any>Object).values(this.testScheduleForm.controls).forEach((control: FormControl) => {\n        control.markAsUntouched();\n        control.updateValueAndValidity();\n      });\n      this.classSectionFormData.submitted = false;\n      this.stepper._steps._results[event.selectedIndex].interacted = false;\n    }\n    if (event.selectedIndex > 4) {\n      this.scrollIntoView('app-table');\n    }\n  }\n  testScheduleNextBtn(): void {\n    if (this.validateTestSchedules()) {\n      this.openSnackBar(AppSettings.TEST_SCHEDULE_VALIDATION, true);\n    }\n  }\n\n  validateTestSchedules(): boolean {\n    let testFailed = false;\n    for (let index = 0; index < this.allClassSectionDetails.length; index++) {\n      for (let sections = 0; sections < this.allClassSectionDetails[index].sections.length; sections++) {\n        const element = this.allClassSectionDetails[index].sections[sections];\n        const checkTestSchedule = this.testScheduleDetails.filter(x => x.sectionId === element.value);\n        if (checkTestSchedule.length === 0) {\n          return testFailed = true;\n        } else {\n          testFailed = false;\n        }\n      }\n    }\n    return testFailed;\n  }\n\n  onAddFormClick(): void {\n\n    this.isTestEdit = false;\n    this.closeAddPanel = false;\n    this.classSectionDetails = [];\n    this.testScheduleDetails = [];\n\n    this.testClassSectionView = {\n      schoolAcademicSessionClassSectionId: null,\n      testSchedules: []\n    };\n    this.testView = {\n      testName: '',\n      testClassSections: [this.testClassSectionView],\n    };\n    this.interactedStepperIndex = 0;\n    this.stepper.reset();\n    this.setDefaultBoard();\n    this.testDetailsForm.controls['isPostCalender'].setValue(AppSettings.NO);\n  }\n\n\n  setDefaultBoard(): void {\n    this.setFormControl('testTypeAndGradingForm', 'boardId', this.schoolBoardsList[0].value);\n    this.onSelectSchoolBoard(this.schoolBoardsList[0].value);\n  }\n  getclassSectionDetails(): any {\n    if (this.allClassSectionDetails.length) {\n\n      return this.allClassSectionDetails;\n    }\n    return [];\n  }\n  selected(value: any): void {\n    this.index = value;\n    switch (value) {\n      case 0: {\n        this.isTestsViewActive = true;\n        if (this.getTokenParam('_as')) {\n          this.tabSettings = {\n            rows: [],\n            columns: this.cols,\n            model: this.testScheduleFilterView,\n            componentName: this.currentComponentName,\n            isPaginationRequired: true,\n            totalRowsCount: this.totalItems,\n            pageCnt: this.pageCnt,\n            isRowExpandRequired: true,\n            headerOperations: {\n              addingForm: {\n                btnName: AppSettings.NEW,\n                required: true,\n              },\n              infoButton: {\n                required: true,\n                text: 'Test Schedules/Marks'\n              },\n            }\n          };\n          this.loadTestSchedules();\n        }\n        else {\n          this.acadamicSessionExist();\n        }\n        window.location.hash = 'TestView';\n        break;\n      }\n      case 1: {\n        this.isTestsViewActive = false;\n        window.location.hash = 'TestScheduleView';\n        break;\n      }\n\n      default: {\n        break;\n      }\n    }\n  }\n  switchTabs(value): void {\n    switch (value) {\n      case '#TestView': {\n        this.index = 0;\n        break;\n      }\n      case '#TestScheduleView': {\n        this.index = 1;\n        break;\n      }\n      default: {\n        break;\n      }\n    }\n    this.selected(this.index);\n  }\n  onStartDateSelect(): void {\n    this.startAtTestDate = this.testDetailsForm.value.fromDate;\n  }\n  onTestTypeSelect(testType: any): void {\n    this.testScoreService.testTypeDetails(testType).subscribe(res => this.testMarks(res), error => {\n      this.errorResponse(error);\n    });\n  }\n  testMarks(data: any): void {\n    if (data.testTypeViewModel != null) {\n      this.testTypeAndGradingForm.controls['testMaxMarks'].setValue(data.testTypeViewModel.marksCount);\n    }\n    else {\n      this.testTypeAndGradingForm.controls['testMaxMarks'].setValue(null);\n    }\n  }\n  testScheduleClear(): void {\n    this.testScheduleFormData.resetForm();\n    this.selectedClasses = [];\n    this.selectedSection = Promise.resolve([]);\n    this.stepper.selected.interacted = false;\n  }\n  getOptionalClassStep(): any {\n    if (this.allClassSectionDetails.length) {\n      this.classSectionForm.patchValue({ classSectionStepper: true, emitEvent: false });\n      return true;\n    }\n    this.classSectionForm.patchValue({ classSectionStepper: null, emitEvent: false });\n    return false;\n  }\n  getOptionalScheduleStep(): any {\n    if (!this.validateTestSchedules() && this.allClassSectionDetails.length) {\n      this.testScheduleForm.patchValue({ testStepper: true, emitEvent: false });\n      return true;\n    }\n    this.testScheduleForm.patchValue({ testStepper: null, emitEvent: false });\n    return false;\n  }\n  onClassSectionNext(): void {\n    if (!this.allClassSectionDetails.length) {\n      this.openSnackBar(AppSettings.TEST_CLASS_SECTION, true);\n    }\n  }\n}\n","/**\n * BaseWebAPI\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: v1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams, HttpResponse, HttpEvent } from '@angular/common/http';\nimport { BaseUrlConfig, ModuleConfig } from '../../../url.config';\nimport { Configuration } from '../../base/configuration';\nimport { BASE_PATH } from '../../base/variables';\nimport { Observable } from 'rxjs';\nimport { ClassAssesmentGradesParamListViewModel } from '../../../modules/academics/grading/models/class-assesment-grades-param-list-view-model';\nimport { CustomHttpUrlEncodingCodec } from '../../base/encoder';\nimport { CommonComponent } from '../../../shared/common/common.component';\n\n\n\n@Injectable()\nexport class StudentAssessmentGradeService {\n\n    protected basePath = BaseUrlConfig.BasePath + ModuleConfig.Base;\n    // protected basePath = 'http://localhost:8030';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n\n    constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string,\n        private commonComponent: CommonComponent,\n        @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Create Assesment Grades\n     * \n     * @param classAssesmentGrades \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public createClassAssessmentParameters(classAssesmentGrades?: ClassAssesmentGradesParamListViewModel,\n        observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public createClassAssessmentParameters(classAssesmentGrades?: ClassAssesmentGradesParamListViewModel, observe?: 'events',\n        reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public createClassAssessmentParameters(classAssesmentGrades?: ClassAssesmentGradesParamListViewModel, observe?: 'body',\n        reportProgress?: boolean): Observable<any>;\n    public createClassAssessmentParameters(classAssesmentGrades?: ClassAssesmentGradesParamListViewModel, observe: any = 'body',\n        reportProgress: boolean = false): Observable<any> {\n\n\n\n        let headers = this.defaultHeaders;\n\n\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json-patch+json',\n            'application/json',\n            'text/json',\n            'application/_*+json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<any>(`${this.basePath}/StudentAssessmentGrade/class-assessment-grades`,\n            classAssesmentGrades,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get all for AssessmentGrades\n     * \n     * @param authorization access token\n     * @param classAssessmentGradesForm Gets or sets classAssessmentGradesForm\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public fetchAssessmentGrades(classAssessmentGradesForm, isShowAll?: boolean,\n        observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public fetchAssessmentGrades(classAssessmentGradesForm, isShowAll?: boolean,\n        observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public fetchAssessmentGrades(classAssessmentGradesForm, isShowAll?: boolean,\n        observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public fetchAssessmentGrades(classAssessmentGradesForm, isShowAll?: boolean,\n        observe: any = 'body', reportProgress: boolean = false): Observable<any> {\n\n        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });\n\n        queryParameters = this.commonComponent.setQueryParams(classAssessmentGradesForm.schoolBoardId, 'BoardId', queryParameters);\n        queryParameters = this.commonComponent.setQueryParams(classAssessmentGradesForm.classId, 'ClassId', queryParameters);\n        queryParameters = this.commonComponent.setQueryParams(classAssessmentGradesForm.sectionId, 'SectionId', queryParameters);\n        queryParameters = this.commonComponent.setQueryParams(classAssessmentGradesForm.gradingTermId, 'GradingTermId', queryParameters);\n        queryParameters = this.commonComponent.setQueryParams(classAssessmentGradesForm.assessmentGroupId, 'AssesmentGroupId', queryParameters);\n        queryParameters = this.commonComponent.setQueryParams(classAssessmentGradesForm.assessmentCategoryId, 'AssesmentCateoryId', queryParameters);\n        queryParameters = this.commonComponent.setQueryParams(classAssessmentGradesForm.assessmentParameterId, 'AssesmentParameterId', queryParameters);\n        queryParameters = this.commonComponent.setQueryParams(isShowAll, 'isShowAll', queryParameters);\n        queryParameters = this.commonComponent.setQueryParams(classAssessmentGradesForm.sortBy, 'SortBy', queryParameters);\n        queryParameters = this.commonComponent.setQueryParams(classAssessmentGradesForm.sortOrder, 'SortOrder', queryParameters);\n        queryParameters = this.commonComponent.setQueryParams(classAssessmentGradesForm.schoolAcademicSessionStudentId, 'SchoolAcademicSessionStudentId', queryParameters);\n\n\n        let headers = this.defaultHeaders;\n\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/StudentAssessmentGrade/students-assessment-grades`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get all for Student AssessmentGrades\n     * \n     * @param classId Gets or sets ClassId\n     * @param sectionId Gets or sets SectionId\n     * @param schoolBoardId Gets or sets SchoolBoardId\n     * @param gradingTermId Gets or sets GradingTermId\n     * @param schoolAcademicSessionStudentId Gets or sets SchoolAcademicSessionStudentId\n     * @param sortBy Gets or Sets of SortBy\n     * @param sortOrder Gets or Sets of SortOrder\n     * @param messages \n     * @param statusCode \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n\n    public studentAssessmentGrades(classAssessmentGradesForm, observe: any = 'body', reportProgress: boolean = false): Observable<any> {\n\n        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });\n        if (classAssessmentGradesForm.classId !== undefined && classAssessmentGradesForm.classId !== null) {\n            queryParameters = queryParameters.set('ClassId', <any>classAssessmentGradesForm.classId);\n        }\n        if (classAssessmentGradesForm.sectionId !== undefined && classAssessmentGradesForm.sectionId !== null) {\n            queryParameters = queryParameters.set('SectionId', <any>classAssessmentGradesForm.sectionId);\n        }\n        if (classAssessmentGradesForm.schoolBoardId !== undefined && classAssessmentGradesForm.schoolBoardId !== null) {\n            queryParameters = queryParameters.set('SchoolBoardId', <any>classAssessmentGradesForm.schoolBoardId);\n        }\n        if (classAssessmentGradesForm.gradingTermId !== undefined && classAssessmentGradesForm.gradingTermId !== null) {\n            queryParameters = queryParameters.set('GradingTermId', <any>classAssessmentGradesForm.gradingTermId);\n        }\n        if (classAssessmentGradesForm.schoolAcademicSessionStudentId !== undefined && classAssessmentGradesForm.schoolAcademicSessionStudentId !== null) {\n            queryParameters = queryParameters.set('SchoolAcademicSessionStudentId', <any>classAssessmentGradesForm.schoolAcademicSessionStudentId);\n        }\n        if (classAssessmentGradesForm.sortBy !== undefined && classAssessmentGradesForm.sortBy !== null) {\n            queryParameters = queryParameters.set('SortBy', <any>classAssessmentGradesForm.sortBy);\n        }\n        if (classAssessmentGradesForm.sortOrder !== undefined && classAssessmentGradesForm.sortOrder !== null) {\n            queryParameters = queryParameters.set('SortOrder', <any>classAssessmentGradesForm.sortOrder);\n        }\n\n\n        let headers = this.defaultHeaders;\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/StudentAssessmentGrade/student-assessments`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n}\n","/**\n * Course\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: v1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional } from '@angular/core';\nimport {\n    HttpClient, HttpHeaders, HttpParams,\n    HttpResponse, HttpEvent\n} from '@angular/common/http';\nimport { Observable } from 'rxjs/Observable';\nimport { Configuration } from '../base/configuration';\nimport { BASE_PATH } from '../base/variables';\nimport { CustomHttpUrlEncodingCodec } from '../base/encoder';\nimport { BaseUrlConfig, ModuleConfig } from 'app/url.config';\nimport { CommonComponent } from 'app/shared/common/common.component';\nimport { StudentCustomFieldsView } from 'app/models/grading/student-custom-fields-view';\n\n\n@Injectable()\nexport class GradeReportService {\n  \n     protected basePath = BaseUrlConfig.BasePath + ModuleConfig.Course;\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration,\n        private commonComponent: CommonComponent) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n* Get all student reports details\n* \n* @param authorization access token\n* @param schoolAcademicSessionStudentId Gets or sets\n* @param board Gets or Sets Board Encrypted Values\n* @param studentNames Gets or sets\n* @param gradingTermId Gets Or Sets\n* @param gradingTermName Gets or sets\n* @param reportCardStatus Gets or sets\n* @param admissionNumbers Gets or sets\n* @param rollNumbers Gets or sets\n* @param classIds Gets or sets\n* @param sectionIds Gets or sets\n* @param studentIds Gets or sets\n* @param statusId Gets or Sets StatusId\n* @param sortOrder Gets or Sets SortOrder\n* @param sortBy Gets or Sets SortBy\n* @param pageNumber \n* @param pageSize \n* @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n* @param reportProgress flag to report request and response progress.\n*/\n    public studentReportsFetchReportsDetailsGet(schoolAcademicSessionStudentId?: number, board?: Array<number>, studentName?: Array<string>,\n         gradingTermId?: Array<string>, gradingTermName?: string, reportCardStatus?: string, admissionNumber?: string, rollNumber?: Array<string>,\n          classIds?: Array<number>, sectionIds?: Array<number>, studentIds?: Array<string>, statusId?: Array<string>, sortOrder?: 0 | 1 | -1, \n          sortBy?: string, pageNumber?: number, pageSize?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public studentReportsFetchReportsDetailsGet(schoolAcademicSessionStudentId?: number, board?: Array<number>, studentName?: Array<string>,\n         gradingTermId?: Array<string>, gradingTermName?: string, reportCardStatus?: string, admissionNumber?: string, rollNumber?: Array<string>,\n          classIds?: Array<number>, sectionIds?: Array<number>, studentIds?: Array<string>, statusId?: Array<string>, sortOrder?: 0 | 1 | -1,\n           sortBy?: string, pageNumber?: number, pageSize?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public studentReportsFetchReportsDetailsGet(schoolAcademicSessionStudentId?: number, board?: Array<number>, studentName?: Array<string>,\n         gradingTermId?: Array<string>, gradingTermName?: string, reportCardStatus?: string, admissionNumber?: string, rollNumber?: Array<string>,\n          classIds?: Array<number>, sectionIds?: Array<number>, studentIds?: Array<string>, statusId?: Array<string>, sortOrder?: 0 | 1 | -1,\n           sortBy?: string, pageNumber?: number, pageSize?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public studentReportsFetchReportsDetailsGet(schoolAcademicSessionStudentId?: number, board?: Array<number>, studentName?: Array<string>,\n         gradingTermId?: Array<string>, gradingTermName?: string, reportCardStatus?: string, admissionNumber?: string, rollNumber?: Array<string>,\n          classIds?: Array<number>, sectionIds?: Array<number>, studentIds?: Array<string>, statusId?: Array<string>, sortOrder?: 0 | 1 | -1,\n           sortBy?: string, pageNumber?: number, pageSize?: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {\n\n        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });\n        queryParameters = this.commonComponent.setQueryParams(schoolAcademicSessionStudentId, 'SchoolAcademicSessionStudentId', queryParameters);\n        queryParameters = this.commonComponent.setQueryParams(board, 'Board', queryParameters);\n        queryParameters = this.commonComponent.setQueryParams(studentName, 'StudentName', queryParameters);\n        queryParameters = this.commonComponent.setQueryParams(gradingTermId, 'GradingTermId', queryParameters);\n        queryParameters = this.commonComponent.setQueryParams(gradingTermName, 'GradingTermName', queryParameters);\n        queryParameters = this.commonComponent.setQueryParams(reportCardStatus, 'ReportCardStatus', queryParameters);\n        queryParameters = this.commonComponent.setQueryParams(admissionNumber, 'AdmissionNumber', queryParameters);\n        queryParameters = this.commonComponent.setQueryParams(rollNumber, 'RollNumber', queryParameters);\n        queryParameters = this.commonComponent.setQueryParams(classIds, 'ClassIds', queryParameters);\n        queryParameters = this.commonComponent.setQueryParams(sectionIds, 'SectionIds', queryParameters);\n        queryParameters = this.commonComponent.setQueryParams(studentIds, 'StudentIds', queryParameters);\n        queryParameters = this.commonComponent.setQueryParams(statusId, 'StatusId', queryParameters);\n        queryParameters = this.commonComponent.setQueryParams(sortOrder, 'SortOrder', queryParameters);\n        queryParameters = this.commonComponent.setQueryParams(sortBy, 'SortBy', queryParameters);\n        queryParameters = this.commonComponent.setQueryParams(pageNumber, 'PageNumber', queryParameters);\n        queryParameters = this.commonComponent.setQueryParams(pageSize, 'PageSize', queryParameters);\n\n\n\n        let headers = this.defaultHeaders;\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/StudentReports/fetch-reports-details`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n    * Get student report card details by School Id(Required)\n    * \n    * @param id \n    * @param authorization access token\n    * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n    * @param reportProgress flag to report request and response progress.\n    */\n    public studentReportsReportsGetGet(id: string, gradingTermId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public studentReportsReportsGetGet(id: string, gradingTermId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public studentReportsReportsGetGet(id: string, gradingTermId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public studentReportsReportsGetGet(id: string, gradingTermId: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling studentReportsReportsGetGet.');\n        }\n\n        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });\n        if (id !== undefined && id !== null) {\n            queryParameters = queryParameters.set('Id', <any>id);\n        }\n\n        if (gradingTermId !== undefined && gradingTermId !== null) {\n            queryParameters = queryParameters.set('GradingTermId', <any>gradingTermId);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/StudentReports/reports-get`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Generate Student Report Card\n     * \n     * @param authorization access token\n     * @param gradingTermId Gets or Sets GradingTermId\n     * @param studentIds Gets or Sets StudentIds\n     * @param classId Gets or Sets SchoolAcademicSessionStudentId\n     * @param sectionId Gets or Sets SchoolAcademicSessionStudentId\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public reportsGenerateStudentReportGet(gradingTermId?: number, studentIds?: Array<number>, classId?: number, sectionId?: number,\n         observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public reportsGenerateStudentReportGet(gradingTermId?: number, studentIds?: Array<number>, classId?: number, sectionId?: number,\n         observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public reportsGenerateStudentReportGet(gradingTermId?: number, studentIds?: Array<number>, classId?: number, sectionId?: number,\n         observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public reportsGenerateStudentReportGet(gradingTermId?: number, studentIds?: Array<number>, classId?: number, sectionId?: number,\n         observe: any = 'body', reportProgress: boolean = false): Observable<any> {\n\n\n\n        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });\n        if (gradingTermId !== undefined && gradingTermId !== null) {\n            queryParameters = queryParameters.set('GradingTermId', <any>gradingTermId);\n        }\n        if (studentIds) {\n            studentIds.forEach((element) => {\n                queryParameters = queryParameters.append('StudentIds', <any>element);\n            });\n        }\n        if (classId !== undefined && classId !== null) {\n            queryParameters = queryParameters.set('ClassId', <any>classId);\n        }\n        if (sectionId !== undefined && sectionId !== null) {\n            queryParameters = queryParameters.set('SectionId', <any>sectionId);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/Reports/generate-student-report`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n\n    /**\n     * Approve Pending Approval Report Cards\n     * \n     * @param authorization access token\n     * @param schoolAcademicSessionStudentIds Gets or Sets SchoolAcademicSessionStudentId\n     * @param gradingTermId Gets or Sets GradingTermId\n     * @param classId Gets or Sets ClassId\n     * @param sectionId Gets or Sets SectionId\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public reportsApprovePendingapprovalReportsPut(schoolAcademicSessionStudentIds?: Array<number>, gradingTermId?: number, classId?: number, \n        sectionId?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public reportsApprovePendingapprovalReportsPut(schoolAcademicSessionStudentIds?: Array<number>, gradingTermId?: number, classId?: number, \n        sectionId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public reportsApprovePendingapprovalReportsPut(schoolAcademicSessionStudentIds?: Array<number>, gradingTermId?: number, classId?: number,\n         sectionId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public reportsApprovePendingapprovalReportsPut(schoolAcademicSessionStudentIds?: Array<number>, gradingTermId?: number, classId?: number,\n         sectionId?: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {\n\n\n\n        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });\n        if (schoolAcademicSessionStudentIds) {\n            schoolAcademicSessionStudentIds.forEach((element) => {\n                queryParameters = queryParameters.append('SchoolAcademicSessionStudentIds', <any>element);\n            });\n        }\n        if (gradingTermId !== undefined && gradingTermId !== null) {\n            queryParameters = queryParameters.set('GradingTermId', <any>gradingTermId);\n        }\n        if (classId !== undefined && classId !== null) {\n            queryParameters = queryParameters.set('ClassId', <any>classId);\n        }\n        if (sectionId !== undefined && sectionId !== null) {\n            queryParameters = queryParameters.set('SectionId', <any>sectionId);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.put<any>(`${this.basePath}/Reports/approve-pendingapproval-reports`,\n            null,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Approved Report Files\n     * \n     * @param authorization access token\n     * @param schoolAcademicSessionStudentIds Gets or Sets SchoolAcademicSessionStudentId\n     * @param gradingTermId Gets or Sets GradingTermId\n     * @param classId Gets or Sets ClassId\n     * @param sectionId Gets or Sets SectionId\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public reportsApprovedReportFilesGet(schoolAcademicSessionStudentIds?: Array<number>, gradingTermId?: number, classId?: number,\n         sectionId?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public reportsApprovedReportFilesGet(schoolAcademicSessionStudentIds?: Array<number>, gradingTermId?: number, classId?: number,\n         sectionId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public reportsApprovedReportFilesGet(schoolAcademicSessionStudentIds?: Array<number>, gradingTermId?: number, classId?: number,\n         sectionId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public reportsApprovedReportFilesGet(schoolAcademicSessionStudentIds?: Array<number>, gradingTermId?: number, classId?: number,\n         sectionId?: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {\n\n\n\n\n        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });\n        if (schoolAcademicSessionStudentIds) {\n            schoolAcademicSessionStudentIds.forEach((element) => {\n                queryParameters = queryParameters.append('SchoolAcademicSessionStudentIds', <any>element);\n            });\n        }\n        if (gradingTermId !== undefined && gradingTermId !== null) {\n            queryParameters = queryParameters.set('GradingTermId', <any>gradingTermId);\n        }\n        if (classId !== undefined && classId !== null) {\n            queryParameters = queryParameters.set('ClassId', <any>classId);\n        }\n        if (sectionId !== undefined && sectionId !== null) {\n            queryParameters = queryParameters.set('SectionId', <any>sectionId);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/Reports/approved-report-files`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Generate Student Report Card\n     * \n     * @param authorization access token\n     * @param schoolAcademicSessionStudentIds Gets or Sets SchoolAcademicSessionStudentId\n     * @param gradingTermId Gets or Sets GradingTermId\n     * @param classId Gets or Sets ClassId\n     * @param sectionId Gets or Sets SectionId\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public reportsClearStudentReportsDelete(schoolAcademicSessionStudentIds?: Array<number>, gradingTermId?: number, classId?: number,\n         sectionId?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public reportsClearStudentReportsDelete(schoolAcademicSessionStudentIds?: Array<number>, gradingTermId?: number, classId?: number,\n         sectionId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public reportsClearStudentReportsDelete(schoolAcademicSessionStudentIds?: Array<number>, gradingTermId?: number, classId?: number,\n         sectionId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public reportsClearStudentReportsDelete(schoolAcademicSessionStudentIds?: Array<number>, gradingTermId?: number, classId?: number,\n         sectionId?: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {\n\n\n\n        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });\n        if (schoolAcademicSessionStudentIds) {\n            schoolAcademicSessionStudentIds.forEach((element) => {\n                queryParameters = queryParameters.append('SchoolAcademicSessionStudentIds', <any>element);\n            });\n        }\n        if (gradingTermId !== undefined && gradingTermId !== null) {\n            queryParameters = queryParameters.set('GradingTermId', <any>gradingTermId);\n        }\n        if (classId !== undefined && classId !== null) {\n            queryParameters = queryParameters.set('ClassId', <any>classId);\n        }\n        if (sectionId !== undefined && sectionId !== null) {\n            queryParameters = queryParameters.set('SectionId', <any>sectionId);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.delete<any>(`${this.basePath}/Reports/clear-student-reports`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Genarate Pending,Incomplete Report Cards\n     * \n     * @param authorization access token\n     * @param schoolAcademicSessionStudentId Gets or sets\n     * @param board Gets or Sets Board Encrypted Values\n     * @param gradingTermId Gets Or Sets\n     * @param classId Gets or sets\n     * @param sectionId Gets or sets\n     * @param studentIds Gets or sets\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public reportsGeneratePendingIncompleteReportsPost(schoolAcademicSessionStudentId?: Array<string>, board?: number, gradingTermId?: number,\n         classId?: number, sectionId?: number, studentIds?: Array<string>, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public reportsGeneratePendingIncompleteReportsPost(schoolAcademicSessionStudentId?: Array<string>, board?: number, gradingTermId?: number,\n         classId?: number, sectionId?: number, studentIds?: Array<string>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public reportsGeneratePendingIncompleteReportsPost(schoolAcademicSessionStudentId?: Array<string>, board?: number, gradingTermId?: number,\n         classId?: number, sectionId?: number, studentIds?: Array<string>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public reportsGeneratePendingIncompleteReportsPost(schoolAcademicSessionStudentId?: Array<string>, board?: number, gradingTermId?: number,\n         classId?: number, sectionId?: number, studentIds?: Array<string>, observe: any = 'body', reportProgress: boolean = false): Observable<any> {\n\n\n\n        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });\n        if (schoolAcademicSessionStudentId) {\n            schoolAcademicSessionStudentId.forEach((element) => {\n                queryParameters = queryParameters.append('SchoolAcademicSessionStudentId', <any>element);\n            });\n        }\n        if (board !== undefined && board !== null) {\n            queryParameters = queryParameters.set('Board', <any>board);\n        }\n        if (gradingTermId !== undefined && gradingTermId !== null) {\n            queryParameters = queryParameters.set('GradingTermId', <any>gradingTermId);\n        }\n        if (classId !== undefined && classId !== null) {\n            queryParameters = queryParameters.set('ClassId', <any>classId);\n        }\n        if (sectionId !== undefined && sectionId !== null) {\n            queryParameters = queryParameters.set('SectionId', <any>sectionId);\n        }\n        if (studentIds) {\n            studentIds.forEach((element) => {\n                queryParameters = queryParameters.append('StudentIds', <any>element);\n            });\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.post<any>(`${this.basePath}/Reports/generate-pending-incomplete-reports`,\n            null,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n\n    /**\n     * Get all student reports details\n     * \n     * @param board Gets or Sets Board Encrypted Values\n     * @param schoolAcademicSessionStudentId Gets or sets\n     * @param studentNames Gets or sets\n     * @param gradingTermId Gets Or Sets\n     * @param gradingTermName Gets or sets\n     * @param admissionNumbers Gets or sets\n     * @param rollNumbers Gets or sets\n     * @param classIds Gets or sets\n     * @param sectionIds Gets or sets\n     * @param studentIds Gets or sets\n     * @param reportCardItemName Gets or sets\n     * @param reportCardItemValue Gets or sets\n     * @param sortOrder Gets or Sets SortOrder\n     * @param sortBy Gets or Sets SortBy\n     * @param pageNumber \n     * @param pageSize \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public studentReportsStudentAdditionalInformationGet(schoolAcademicSessionStudentId?: number, board?: Array<number>, studentNames?: Array<string>,\n         gradingTermId?: Array<string>, gradingTermName?: string, reportCardStatus?: string, admissionNumbers?: string, rollNumbers?: Array<string>,\n          classIds?: Array<number>, sectionIds?: Array<number>, studentIds?: Array<string>, reportCardItemName?: string, reportCardItemValue?: string,\n           sortOrder?: 0 | 1 | -1, sortBy?: string, pageNumber?: number, pageSize?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    \n    public studentReportsStudentAdditionalInformationGet(schoolAcademicSessionStudentId?: number, board?: Array<number>, studentNames?: Array<string>, \n        gradingTermId?: Array<string>, gradingTermName?: string, reportCardStatus?: string, admissionNumbers?: string, rollNumbers?: Array<string>, classIds?: Array<number>,\n         sectionIds?: Array<number>, studentIds?: Array<string>, reportCardItemName?: string, reportCardItemValue?: string, sortOrder?: 0 | 1 | -1,\n          sortBy?: string, pageNumber?: number, pageSize?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n\n    public studentReportsStudentAdditionalInformationGet(schoolAcademicSessionStudentId?: number, board?: Array<number>, studentNames?: Array<string>,\n         gradingTermId?: Array<string>, gradingTermName?: string, reportCardStatus?: string, admissionNumbers?: string, rollNumbers?: Array<string>,\n          classIds?: Array<number>, sectionIds?: Array<number>, studentIds?: Array<string>,\n          reportCardItemName?: string, reportCardItemValue?: string, sortOrder?: 0 | 1 | -1, sortBy?: string, pageNumber?: number, pageSize?: number,\n           observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n\n    public studentReportsStudentAdditionalInformationGet(schoolAcademicSessionStudentId?: number, board?: Array<number>, studentNames?: Array<string>,\n         gradingTermId?: Array<string>, gradingTermName?: string, reportCardStatus?: string, admissionNumbers?: string, rollNumbers?: Array<string>, \n        classIds?: Array<number>, sectionIds?: Array<number>, studentIds?: Array<string>, reportCardItemName?: string, reportCardItemValue?: string,\n         sortOrder?: 0 | 1 | -1, sortBy?: string, pageNumber?: number, pageSize?: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {\n        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });\n        queryParameters = this.commonComponent.setQueryParams(schoolAcademicSessionStudentId, 'SchoolAcademicSessionStudentId', queryParameters);\n        queryParameters = this.commonComponent.setQueryParams(board, 'Board', queryParameters);\n        queryParameters = this.commonComponent.setQueryParams(studentNames, 'StudentNames', queryParameters);\n        queryParameters = this.commonComponent.setQueryParams(gradingTermId, 'GradingTermId', queryParameters);\n        queryParameters = this.commonComponent.setQueryParams(gradingTermName, 'GradingTermName', queryParameters);\n        queryParameters = this.commonComponent.setQueryParams(reportCardStatus, 'ReportCardStatus', queryParameters);\n        queryParameters = this.commonComponent.setQueryParams(admissionNumbers, 'AdmissionNumbers', queryParameters);\n        queryParameters = this.commonComponent.setQueryParams(rollNumbers, 'RollNumbers', queryParameters);\n        queryParameters = this.commonComponent.setQueryParams(classIds, 'ClassIds', queryParameters);\n        queryParameters = this.commonComponent.setQueryParams(sectionIds, 'SectionIds', queryParameters);\n        queryParameters = this.commonComponent.setQueryParams(studentIds, 'StudentIds', queryParameters);\n        queryParameters = this.commonComponent.setQueryParams(reportCardItemName, 'ReportCardItemName', queryParameters);\n        queryParameters = this.commonComponent.setQueryParams(reportCardItemValue, 'ReportCardItemValue', queryParameters);\n        queryParameters = this.commonComponent.setQueryParams(sortOrder, 'SortOrder', queryParameters);\n        queryParameters = this.commonComponent.setQueryParams(sortBy, 'SortBy', queryParameters);\n        queryParameters = this.commonComponent.setQueryParams(pageNumber, 'PageNumber', queryParameters);\n        queryParameters = this.commonComponent.setQueryParams(pageSize, 'PageSize', queryParameters);\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/StudentReports/student-additional-information`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * To Update the Student Custom Fields\n     * \n     * @param studentCustomFieldsView \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public studentReportsStudentCustomDetailsPut(studentCustomFieldsView?: StudentCustomFieldsView, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public studentReportsStudentCustomDetailsPut(studentCustomFieldsView?: StudentCustomFieldsView, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public studentReportsStudentCustomDetailsPut(studentCustomFieldsView?: StudentCustomFieldsView, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public studentReportsStudentCustomDetailsPut(studentCustomFieldsView?: StudentCustomFieldsView, observe: any = 'body', reportProgress: boolean = false): Observable<any> {\n\n        let headers = this.defaultHeaders;\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json-patch+json',\n            'application/json',\n            'text/json',\n            'application/_*+json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.put<any>(`${this.basePath}/StudentReports/student-custom-details`,\n            studentCustomFieldsView,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n}\n"],"sourceRoot":""}