{"version":3,"sources":["webpack:///./src/app/modules/configuration/grading/academic-grades/academic-grades.component.html","webpack:///./src/app/modules/configuration/grading/academic-grades/academic-grades.component.scss","webpack:///./src/app/modules/configuration/grading/academic-grades/academic-grades.component.ts","webpack:///./src/app/modules/configuration/grading/assessment-grades/assessment-grades.component.html","webpack:///./src/app/modules/configuration/grading/assessment-grades/assessment-grades.component.scss","webpack:///./src/app/modules/configuration/grading/assessment-grades/assessment-grades.component.ts","webpack:///./src/app/modules/configuration/grading/grading-routing.module.ts","webpack:///./src/app/modules/configuration/grading/grading-term-details/grading-term-details.component.html","webpack:///./src/app/modules/configuration/grading/grading-term-details/grading-term-details.component.scss","webpack:///./src/app/modules/configuration/grading/grading-term-details/grading-term-details.component.ts","webpack:///./src/app/modules/configuration/grading/grading-terms/grading-terms.component.html","webpack:///./src/app/modules/configuration/grading/grading-terms/grading-terms.component.scss","webpack:///./src/app/modules/configuration/grading/grading-terms/grading-terms.component.ts","webpack:///./src/app/modules/configuration/grading/grading.component.html","webpack:///./src/app/modules/configuration/grading/grading.component.scss","webpack:///./src/app/modules/configuration/grading/grading.component.ts","webpack:///./src/app/modules/configuration/grading/grading.module.ts","webpack:///./src/app/modules/configuration/grading/test-type/test-type.component.html","webpack:///./src/app/modules/configuration/grading/test-type/test-type.component.scss","webpack:///./src/app/modules/configuration/grading/test-type/test-type.component.ts"],"names":[],"mappings":"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","file":"default~app-modules-configuration-grading-grading-module~app-shared-wizard-wizard-module.js","sourcesContent":["module.exports = \"<app-table [settings]=\\\"tabSettings\\\" (rowBasedAction)='rowActions($event)' (openAddForm)=\\\"addForm()\\\" [closeRowForm]='closeAddPanel'\\n  [templateRef]=\\\"addAcademicGradeTemplate\\\" (getTableData)='getAcdademicGrades($event)'></app-table>\\n\\n<ng-template #addAcademicGradeTemplate>\\n  <form [formGroup]=\\\"academicgradeForm\\\" (ngSubmit)=\\\"addUpdateAcademicGrade(academicgradeForm)\\\" #academicGrade=\\\"ngForm\\\">\\n    <div fxFlexFill fxLayout=\\\"column\\\" fxLayout.gt-xs=\\\"row\\\" class=\\\"pt-24\\\" fxLayoutAlign=\\\"center center\\\">\\n\\n      <mat-form-field appearance=\\\"outline\\\" fxLayout=\\\"column\\\" fxFlexFill fxFlex=\\\"100\\\" fxFlex.gt-xs=\\\"20\\\" class=\\\"pr-sm-24\\\">\\n        <mat-label #gradeIndicator translate>Grade</mat-label>\\n        <input (keyup)=\\\"preventSpace($event,'academicgradeForm','gradeIndicator')\\\" matInput autocomplete=\\\"off\\\" formControlName=\\\"gradeIndicator\\\" (blur)=\\\"trimTextBoxSpaces('academicgradeForm','gradeIndicator')\\\"\\n          required>\\n        <mat-error>\\n          <app-validation [labelName]=\\\"gradeIndicator.innerText\\\" [validationControl]=\\\"academicgradeForm.controls.gradeIndicator\\\"\\n            [doValidate]=\\\"academicGradeFormSubmitted\\\">\\n          </app-validation>\\n        </mat-error>\\n      </mat-form-field>\\n      <mat-form-field appearance=\\\"outline\\\" class=\\\"pr-sm-24\\\" fxLayout=\\\"column\\\" fxFlexFill fxFlex=\\\"100\\\" fxFlex.gt-xs=\\\"20\\\">\\n        <mat-label #lowMark translate>LowMark</mat-label>\\n        <input matInput autocomplete=\\\"off\\\" formControlName=\\\"lowMark\\\" (blur)=\\\"trimTextBoxSpaces('academicgradeForm','lowMark')\\\" required>\\n        <mat-error>\\n          <app-validation [labelName]=\\\"lowMark.innerText\\\" [validationControl]=\\\"academicgradeForm.controls.lowMark\\\"\\n            [doValidate]=\\\"academicGradeFormSubmitted\\\">\\n          </app-validation>\\n        </mat-error>\\n      </mat-form-field>\\n      <mat-form-field appearance=\\\"outline\\\" class=\\\"pr-sm-24\\\" fxLayout=\\\"column\\\" fxFlexFill fxFlex=\\\"100\\\" fxFlex.gt-xs=\\\"20\\\">\\n        <mat-label #highMark translate>HighMark</mat-label>\\n        <input matInput autocomplete=\\\"off\\\" formControlName=\\\"highMark\\\" (blur)=\\\"trimTextBoxSpaces('academicgradeForm','highMark')\\\" required>\\n        <mat-error>\\n          <app-validation [labelName]=\\\"highMark.innerText\\\" [validationControl]=\\\"academicgradeForm.controls.highMark\\\"\\n            [doValidate]=\\\"academicGradeFormSubmitted\\\">\\n          </app-validation>\\n        </mat-error>\\n      </mat-form-field>\\n      <mat-form-field appearance=\\\"outline\\\" fxLayout=\\\"column\\\" fxFlexFill fxFlex=\\\"100\\\" fxFlex.gt-xs=\\\"40\\\">\\n        <mat-label #evaluation translate>Evaluation</mat-label>\\n        <input (keyup)=\\\"preventSpace($event,'academicgradeForm','evaluation')\\\" matInput autocomplete=\\\"off\\\" formControlName=\\\"evaluation\\\" (blur)=\\\"trimTextBoxSpaces('academicgradeForm','evaluation')\\\">\\n        <mat-error>\\n          <app-validation [labelName]=\\\"evaluation.innerText\\\" [validationControl]=\\\"academicgradeForm.controls.evaluation\\\"\\n            [doValidate]=\\\"academicGradeFormSubmitted\\\">\\n          </app-validation>\\n        </mat-error>\\n      </mat-form-field>\\n    </div>\\n    <div fxFlexFill fxLayout=\\\"column\\\" fxLayout.gt-xs=\\\"row\\\" fxLayoutAlign=\\\"center center\\\" class=\\\"pt-12\\\">\\n      <mat-form-field *ngIf=\\\"isSchoolBoards\\\" appearance=\\\"outline\\\" fxLayout=\\\"column\\\" fxFlex=\\\"100\\\" fxFlexFill>\\n        <mat-label #schoolBoardId translate>School Board</mat-label>\\n        <mat-select formControlName=\\\"schoolBoardId\\\" (selectionChange)=\\\"onSelectSchoolBoard($event.value)\\\" required>\\n          <mat-option *ngFor=\\\"let schoolBoard of schoolBoardsList\\\" [value]=\\\"schoolBoard.value\\\">\\n            {{schoolBoard.label}}\\n          </mat-option>\\n        </mat-select>\\n        <mat-error>\\n          <app-validation [labelName]='schoolBoardId.innerText' [validationControl]=\\\"academicgradeForm.controls.schoolBoardId\\\"\\n            [doValidate]=\\\"academicGradeFormSubmitted\\\">\\n          </app-validation>\\n        </mat-error>\\n      </mat-form-field>\\n\\n      <mat-form-field appearance=\\\"outline\\\" class=\\\"px-sm-24\\\" fxLayout=\\\"column\\\" fxFlex=\\\"100\\\" fxFlexFill>\\n        <mat-label #classId translate>Class</mat-label>\\n        <mat-select formControlName=\\\"classId\\\" (selectionChange)=\\\"onSelectClass($event)\\\">\\n          <mat-option *ngIf=\\\"classNames?.length\\\"></mat-option>\\n          <mat-option *ngFor=\\\"let class of classNames\\\" [value]=\\\"class.value\\\">\\n            {{class.label}}\\n          </mat-option>\\n        </mat-select>\\n      </mat-form-field>\\n\\n      <mat-form-field appearance=\\\"outline\\\" fxLayout=\\\"column\\\" fxFlex=\\\"100\\\" fxFlexFill>\\n        <mat-label #sectionId translate>Section</mat-label>\\n        <mat-select formControlName=\\\"sectionId\\\">\\n          <mat-option *ngIf=\\\"sectionNames?.length\\\"></mat-option>\\n          <mat-option *ngFor=\\\"let section of sectionNames\\\" [value]=\\\"section.value\\\">\\n            {{section.label}}\\n          </mat-option>\\n        </mat-select>\\n      </mat-form-field>\\n    </div>\\n\\n    <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"end center\\\" class=\\\"pt-16 pb-8\\\">\\n      <button mat-raised-button type=\\\"button\\\" class=\\\"text-uppercase mr-12\\\" (click)=\\\"onCancelClick()\\\">{{'Cancel' | translate}}</button>\\n      <button [disabled]=\\\"disbleSubmitBtn\\\" mat-raised-button type=\\\"submit\\\" color=\\\"accent\\\" class=\\\"text-uppercase\\\"\\n        mat-button>{{this.buttonName | translate}}</button>\\n    </div>\\n  </form>\\n</ng-template>\\n\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL21vZHVsZXMvY29uZmlndXJhdGlvbi9ncmFkaW5nL2FjYWRlbWljLWdyYWRlcy9hY2FkZW1pYy1ncmFkZXMuY29tcG9uZW50LnNjc3MifQ== */\"","import { Component, OnInit, ViewChild } from '@angular/core';\n\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { MatDialog, MatSnackBar } from '@angular/material';\n\nimport * as HttpStatus from 'http-status-codes';\n\nimport { AcademicGradeParamsView, GradeConfigurationView, AcademicGradeView } from '../../../../models/grading/models';\nimport { GradeSetupService } from '../../../../service/grading-service/api/grade-setup.service';\nimport { CommonService } from '../../../../service/common.service';\nimport { AppSettings, Pattern } from '../../../../app.constants';\nimport { CustomDialogComponent } from '../../../../shared/custom-dialog/custom-dialog.component';\nimport { CommonComponent } from '../../../../shared/common/common.component';\n\n@Component({\n  selector: 'app-academic-grades',\n  templateUrl: './academic-grades.component.html',\n  styleUrls: ['./academic-grades.component.scss'],\n})\nexport class AcademicGradesComponent extends CommonComponent implements OnInit {\n\n  @ViewChild('addAcademicGradeTemplate') addAcademicGradeTemplate;\n  @ViewChild('academicGrade') myAcademicGradeForm;\n\n  academicgradeForm: FormGroup;\n  academicGradeParameters: AcademicGradeParamsView;\n  gradeConfigurationView: GradeConfigurationView;\n  academicGradeView: AcademicGradeView;\n  academicGradeFormSubmitted = true;\n  schoolBoardsList: Array<any> = [];\n  classesList: Array<any> = [];\n  isSchoolBoards = false;\n  sectionsList: Array<any> = [];\n  custRowsPerPageOptions: Array<number> = [];\n  academicDetails: any;\n  rows: Array<any>;\n  totalItems: number;\n  pageCnt: number;\n  cols: any[];\n  tabSettings: {};\n  classNames: Array<any> = [];\n  sectionNames: Array<any> = [];\n  selectAll = false;\n  isDeleteAllRequired = false;\n  closeAddPanel = false;\n  isUpdateData = false;\n  academicGradeIds: Array<string> = [];\n  failedRecords: any = [];\n  checkedRecords: any;\n  filteredRecords: any;\n  filterClasses: Array<any> = [];\n  filterSections: Array<any> = [];\n  errorMessages: any;\n  errorsList: Array<any> = [];\n  currentComponent = 'AcademicGradesComponent';\n  disbleSubmitBtn = false;\n  buttonName: any;\n\n  constructor(private gradeSetupService: GradeSetupService, public commonService: CommonService, public dialog: MatDialog, public snackBar: MatSnackBar) {\n    super();\n    this.academicGradeParameters = {\n      sortBy: '',\n      sortOrder: 0,\n      gradeIndicator: [],\n      highMark: [],\n      lowMark: [],\n      schoolBoardId: [],\n      evaluation: [],\n      classId: [],\n      sectionId: [],\n      pageNumber: AppSettings.PAGENUMBER,\n      pageSize: AppSettings.PAGESIZE,\n    };\n  }\n\n  ngOnInit(): void {\n    const modelTableComponent = this.getModelComponent(this.currentComponent);\n    if (modelTableComponent) {\n      this.academicGradeParameters = modelTableComponent;\n    }\n\n    this.cols = [\n      { field: 'gradeIndicator', header: 'Grade', sort: true },\n      { field: 'lowMark', header: 'LowMark', sort: true },\n      { field: 'highMark', header: 'HighMark', sort: true },\n      { field: 'schoolBoard', header: 'School board', sort: true },\n      { field: 'class', header: 'Class', sort: true },\n      { field: 'section', header: 'Section', sort: true },\n      { field: 'evaluation', header: 'Evaluation', sort: true },\n      { field: 'actions', header: 'Actions', sort: false },\n    ];\n\n    this.tabSettings = {\n      rows: [],\n      columns: this.cols,\n      model: this.academicGradeParameters,\n      tablename: 'Academic Grades',\n      componentName: this.currentComponent\n    };\n    this.commonService.getTableLSObj(this.tabSettings);\n\n    this.getAcdademicGrades(this.academicGradeParameters);\n\n    // initialization of form controls in form group\n    this.academicgradeForm = new FormGroup({\n      gradeIndicator: new FormControl('', [Validators.required, Validators.maxLength(3)]),\n      lowMark: new FormControl('', [Validators.required, Validators.pattern(Pattern.NUMBER_PATTERN), Validators.max(100)]),\n      highMark: new FormControl('', [Validators.required, Validators.pattern(Pattern.NUMBER_PATTERN), Validators.max(100)]),\n      evaluation: new FormControl('', Validators.maxLength(25)),\n      schoolBoardId: new FormControl('', Validators.required),\n      classId: new FormControl(''),\n      sectionId: new FormControl(''),\n    });\n  }\n\n  // get the list school boards\n  getSchoolBoardsList(): void {\n    this.schoolBoardsList = [];\n\n    this.commonService.schoolAcademicBoards().subscribe(res => {\n      if (res.listViews.length) {\n        this.isSchoolBoards = true;\n        res.listViews.forEach(element => {\n          this.schoolBoardsList.push({\n            label: element.name,\n            value: element.id\n          });\n        });\n        this.setDefaultBoard();\n      } else {\n        this.isSchoolBoards = false;\n      }\n    }, error => {\n      this.errorResponse(error);\n    });\n  }\n  // End\n\n  // on Selection of school board\n  onSelectSchoolBoard(schoolBoard: any): void {\n    this.classNames = [];\n    this.sectionNames = [];\n    this.academicgradeForm.controls['classId'].setValue('');\n    this.academicgradeForm.controls['sectionId'].setValue('');\n\n\n    this.commonService.schoolAcademicClasses(schoolBoard, null).subscribe(response => {\n      if (response.listViews && response.listViews.length) {\n        response.listViews.forEach(element => {\n          this.classNames.push({\n            label: element.name,\n            value: element.id\n          });\n        });\n      }\n    }, error => {\n      this.errorResponse(error);\n    });\n  }\n  // End\n\n  // on selection of class\n  onSelectClass(data: any): void {\n    if (data.value) {\n      this.getSectionsBasedOnClass(data.value);\n    } else {\n      this.academicgradeForm.controls['sectionId'].setValue('');\n      this.sectionNames = [];\n    }\n  }\n  // End\n\n  getSectionsBasedOnClass(classId: any): void {\n    if (classId) {\n      this.sectionNames = [];\n      this.commonService.schoolAcademicClassSections(null, classId).subscribe(response => {\n        if (response.listViews.length) {\n          response.listViews.forEach(element => {\n            this.sectionNames.push({\n              label: element.name,\n              value: element.id\n            });\n          });\n        }\n      }, error => {\n        this.errorResponse(error);\n      });\n    }\n  }\n\n  // Get Sections to filter table data\n  getSectionsList(): void {\n    this.filterSections = [];\n    this.commonService.schoolAcademicClassSections().subscribe(response => {\n      if (response.listViews != null) {\n        if (response.listViews.length) {\n          response.listViews.forEach(element => {\n            this.filterSections.push({\n              label: element.name,\n              value: element.id\n            });\n          });\n        }\n      }\n    }, error => {\n      this.errorResponse(error);\n    });\n  }\n  // End\n\n  //  list of academic grade Configurations\n  getAcdademicGrades(academicGradeParams: AcademicGradeParamsView): void {\n    this.academicGradeParameters = academicGradeParams;\n    this.gradeSetupService.academicGrades(academicGradeParams.gradeIndicator,\n      academicGradeParams.highMark, academicGradeParams.lowMark, academicGradeParams.evaluation,\n      academicGradeParams.classId, academicGradeParams.sectionId, academicGradeParams.schoolBoardId,\n      academicGradeParams.sortBy, academicGradeParams.sortOrder, academicGradeParams.pageNumber,\n      academicGradeParams.pageSize).subscribe(res => { this.getAcademicGradesData(res); }, error => {\n        this.errorResponse(error);\n      });\n  }\n\n  getAcademicGradesData(gradesData: any): void {\n    if (!gradesData.searchAacademicGradeData) {\n      this.rows = [];\n    } else {\n      this.rows = gradesData.searchAacademicGradeData.list;\n      this.totalItems = gradesData.searchAacademicGradeData.totalItems;\n    }\n\n    const academicGradeOperations = [\n      {\n        name: AppSettings.EDIT_OPERATION,\n        icon: AppSettings.EDIT\n      },\n      {\n        name: AppSettings.DELETE_OPERATION,\n        icon: AppSettings.DELETE,\n      },\n    ];\n\n    this.rows.forEach(e => {\n      e.operations = academicGradeOperations;\n\n    });\n    if (gradesData.searchAacademicGradeData) {\n      this.academicGradeParameters.pageNumber = gradesData.searchAacademicGradeData.pageNumber;\n    }\n\n    this.tabSettings = {\n      columns: this.cols,\n      model: this.academicGradeParameters,\n      rows: this.rows,\n      tablename: 'Academic Grades',\n      componentName: this.currentComponent,\n      isPaginationRequired: true,\n      totalRowsCount: this.totalItems,\n      custRowsPerPageOptions: this.custRowsPerPageOptions,\n      pageCnt: this.pageCnt,\n\n      headerOperations: {\n        addingForm: {\n          required: true,\n          btnName: AppSettings.NEW\n        },\n        infoButton: {\n          required: true,\n          text: 'Academic Grades'\n        },\n      },\n      filtersList: gradesData.filters\n    };\n    this.getSchoolBoardsList();\n  }\n  // End\n\n  // to open the add form(reset things)\n  addForm(): void {\n    this.closeAddPanel = false;\n    this.isUpdateData = false;\n    this.buttonName = AppSettings.SUBMIT;\n  }\n  // End\n\n  // submit the data of academic grades\n  addUpdateAcademicGrade(academicGradeForm: any): void {\n    this.academicGradeFormSubmitted = true;\n    if (academicGradeForm.status === AppSettings.VALID) {\n      this.disbleSubmitBtn = true;\n      if (this.isUpdateData === true) {\n        this.buttonName = AppSettings.UPDATE;\n        this.academicGradeView = academicGradeForm.value;\n        this.academicGradeView.id = this.academicDetails.id;\n\n        this.gradeSetupService.updateAcademicGrades(this.academicGradeView).subscribe(res => this.updateResponse(res),\n          error => {\n            this.disbleSubmitBtn = false;\n            this.errorResponse(error);\n          });\n      } else {\n        this.buttonName = AppSettings.SUBMIT;\n        this.gradeConfigurationView = academicGradeForm.value;\n        this.gradeSetupService.createAcademicGrades(this.gradeConfigurationView).subscribe(res => this.addResponse(res),\n          error => {\n            this.disbleSubmitBtn = false;\n            this.errorResponse(error);\n          });\n      }\n    }\n  }\n  // End\n\n  // response after add data of academic grades\n  addResponse(response): void {\n    this.disbleSubmitBtn = false;\n    if (response.statusCode === HttpStatus.OK || response.statusCode === HttpStatus.BAD_REQUEST || response.statusCode === HttpStatus.CONFLICT) {\n      this.closeAddPanel = true;\n      this.getAcdademicGrades(this.academicGradeParameters);\n      this.clearForm();\n      this.isUpdateData = false;\n    }\n    this.openSnackBar(response.messages.ResultMessage);\n  }\n  // End\n\n  // response of academic grade after update data\n  updateResponse(response): void {\n    this.disbleSubmitBtn = false;\n    if (response.statusCode === HttpStatus.OK || response.statusCode === HttpStatus.BAD_REQUEST || response.statusCode === HttpStatus.CONFLICT) {\n      if (response.statusCode === HttpStatus.BAD_REQUEST || response.statusCode === HttpStatus.CONFLICT) {\n        this.closeAddPanel = false;\n      } else {\n        this.closeAddPanel = true;\n        this.getAcdademicGrades(this.academicGradeParameters);\n        this.clearForm();\n        this.isUpdateData = false;\n      }\n    } else {\n      this.closeAddPanel = false;\n    }\n    this.openSnackBar(response.messages.ResultMessage);\n  }\n  // End\n\n  // onCancelClick\n  onCancelClick(): void {\n    this.clearForm();\n    this.closeAddPanel = true;\n    this.isUpdateData = false;\n    this.academicGradeFormSubmitted = false;\n    this.disbleSubmitBtn = false;\n    this.sectionNames = [];\n  }\n  // End\n\n  // row-wise actions of the table(edit/delete)\n  rowActions(response: any): void {\n    if (response.operation === AppSettings.EDIT) {\n      this.buttonName = AppSettings.UPDATE;\n      this.isUpdateData = true;\n      this.closeAddPanel = false;\n      this.gradeSetupService.academicGradesById(response.clickedRow.id)\n        .subscribe(res => this.academicGradesByIdValue(res),\n          error => {\n            this.errorResponse(error);\n          });\n    }\n\n    if (response.operation === AppSettings.DELETE) {\n      const dialogRef = this.dialog.open(CustomDialogComponent, {\n        disableClose: true,\n        data: { text: this.commonService.getTranslation(AppSettings.WARNING_ON_SINGLE_DELETE, ''), action: true, btn1Text: AppSettings.NO, btn2Text: AppSettings.YES },\n      });\n\n      dialogRef.afterClosed().subscribe(action => {\n        if (action === AppSettings.YES) {\n          this.gradeSetupService.deleteAcademicGrades(response.clickedRow.id).subscribe(res => this.deleteResponse(res), error => {\n            this.errorResponse(error);\n          });\n        }\n      });\n    }\n  }\n  // End\n\n  // response after delete operation\n  deleteResponse(deleteResponse: any): void {\n    this.getAcdademicGrades(this.academicGradeParameters);\n    this.openSnackBar(deleteResponse.messages.ResultMessage);\n  }\n  // End\n  // to set academic grades data to form after edit click\n  academicGradesByIdValue(gradeData: any): void {\n    if (gradeData.academicGradeView != null) {\n      this.onSelectSchoolBoard(gradeData.academicGradeView.schoolBoardId);\n      this.academicgradeForm.controls['gradeIndicator'].setValue(gradeData.academicGradeView.gradeIndicator);\n      this.academicgradeForm.controls['lowMark'].setValue(gradeData.academicGradeView.lowMark);\n      this.academicgradeForm.controls['highMark'].setValue(gradeData.academicGradeView.highMark);\n      this.academicgradeForm.controls['evaluation'].setValue(gradeData.academicGradeView.evaluation);\n      this.academicgradeForm.controls['schoolBoardId'].setValue(gradeData.academicGradeView.schoolBoardId);\n      this.academicgradeForm.controls['classId'].setValue(gradeData.academicGradeView.classId);\n      if (gradeData.academicGradeView.classId !== null && gradeData.academicGradeView.classId !== undefined) {\n        this.getSectionsBasedOnClass(gradeData.academicGradeView.classId);\n      }\n      this.academicgradeForm.controls['sectionId'].setValue(gradeData.academicGradeView.sectionId);\n      this.academicDetails = gradeData.academicGradeView;\n    } else {\n      this.openSnackBar(gradeData.messages.ResultMessage, true);\n    }\n  }\n\n  clearForm(): void {\n    this.academicgradeForm.reset();\n    this.myAcademicGradeForm.resetForm();\n    this.setDefaultBoard();\n  }\n\n  setDefaultBoard(): void {\n    this.setFormControl('academicgradeForm', 'schoolBoardId', this.schoolBoardsList[0].value);\n    this.onSelectSchoolBoard(this.schoolBoardsList[0].value);\n  }\n  // End\n\n}\n","module.exports = \"\\n<app-table [settings]=\\\"tabSettings\\\" (rowBasedAction)='rowActions($event)' (openAddForm)=\\\"addForm()\\\" [closeRowForm]='closeAddPanel'\\n  [templateRef]=\\\"addAssessmentGradeTemplate\\\" (getTableData)='getAssessmentGrades($event)'></app-table>\\n\\n<ng-template #addAssessmentGradeTemplate>\\n  <form [formGroup]=\\\"assessmentgradeForm\\\" (ngSubmit)=\\\"addUpdateAssessmentGrade(assessmentgradeForm)\\\" #assessmentGrade=\\\"ngForm\\\">\\n    <div fxFlexFill fxLayout=\\\"column\\\" fxLayout.gt-xs=\\\"row\\\" class=\\\"pt-24\\\">\\n\\n      <mat-form-field appearance=\\\"outline\\\" fxLayout=\\\"column\\\" fxFlexFill fxFlex=\\\"100\\\">\\n        <mat-label #gradeIndicator translate>GradeIndicator</mat-label>\\n        <input (keyup)=\\\"preventSpace($event,'assessmentgradeForm','gradeIndicator')\\\" matInput autocomplete=\\\"off\\\" formControlName=\\\"gradeIndicator\\\" (blur)=\\\"trimTextBoxSpaces('assessmentgradeForm','gradeIndicator')\\\"\\n          required>\\n        <mat-error>\\n          <app-validation [labelName]=\\\"gradeIndicator.innerText\\\" [validationControl]=\\\"assessmentgradeForm.controls.gradeIndicator\\\"\\n            [doValidate]=\\\"assessmentGradeFormSubmitted\\\">\\n          </app-validation>\\n        </mat-error>\\n      </mat-form-field>\\n\\n      <mat-form-field appearance=\\\"outline\\\" class=\\\"pl-sm-20\\\" fxLayout=\\\"column\\\" fxFlexFill fxFlex=\\\"100\\\">\\n        <mat-label #evaluation translate>Evaluation</mat-label>\\n        <input (keyup)=\\\"preventSpace($event,'assessmentgradeForm','evaluation')\\\" matInput autocomplete=\\\"off\\\" formControlName=\\\"evaluation\\\" (blur)=\\\"trimTextBoxSpaces('assessmentgradeForm','evaluation')\\\"\\n          required>\\n        <mat-error>\\n          <app-validation [labelName]=\\\"evaluation.innerText\\\" [validationControl]=\\\"assessmentgradeForm.controls.evaluation\\\"\\n            [doValidate]=\\\"assessmentGradeFormSubmitted\\\">\\n          </app-validation>\\n        </mat-error>\\n      </mat-form-field>\\n    </div>\\n\\n    <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"end center\\\" class=\\\"pt-16 pb-8\\\">\\n      <button mat-raised-button type=\\\"button\\\" class=\\\"text-uppercase\\\" (click)=\\\"onCancelClick()\\\">{{'Cancel' | translate}}</button>\\n        <button [disabled]=\\\"disbleSubmitBtn\\\" mat-raised-button type=\\\"submit\\\" color=\\\"accent\\\" class=\\\"text-uppercase ml-12\\\"\\n        mat-button>{{this.buttonName | translate}}</button>\\n    </div>\\n  </form>\\n</ng-template>\\n\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL21vZHVsZXMvY29uZmlndXJhdGlvbi9ncmFkaW5nL2Fzc2Vzc21lbnQtZ3JhZGVzL2Fzc2Vzc21lbnQtZ3JhZGVzLmNvbXBvbmVudC5zY3NzIn0= */\"","import { Component, OnInit, ViewChild } from '@angular/core';\n\nimport { MatDialog, MatSnackBar } from '@angular/material';\nimport * as HttpStatus from 'http-status-codes';\n\nimport { AssessmentGradeParametersView, AssessmentGradeConfigurationView, AssessmentGradeView } from '../../../../models/grading/models';\nimport { AppSettings } from '../../../../app.constants';\nimport { CommonComponent } from '../../../../shared/common/common.component';\nimport { GradeSetupService } from '../../../../service/grading-service/api/grade-setup.service';\nimport { CommonService } from '../../../../service/common.service';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { CustomDialogComponent } from '../../../../shared/custom-dialog/custom-dialog.component';\n\n@Component({\n  selector: 'app-assessment-grades',\n  templateUrl: './assessment-grades.component.html',\n  styleUrls: ['./assessment-grades.component.scss']\n})\nexport class AssessmentGradesComponent extends CommonComponent implements OnInit {\n\n  @ViewChild('addAssessmentGradeTemplate') addAssessmentGradeTemplate;\n  @ViewChild('assessmentGrade') myAssessmentGradeForm;\n\n  assessmentGradeParameters: AssessmentGradeParametersView;\n  assessmentGradeConfigurationView: AssessmentGradeConfigurationView;\n  assessmentGradeView: AssessmentGradeView;\n  assessmentgradeForm: FormGroup;\n  assessmentGradeFormSubmitted = true;\n\n  closeAddPanel = false;\n  isUpdateData = false;\n  currentComponent = 'AssessmentGradesComponent';\n  cols: any[];\n  tabSettings: {};\n  rows: Array<any>;\n  totalItems: number;\n  pageCnt: number;\n  custRowsPerPageOptions: Array<number> = [];\n  errorMessages: any;\n  errorsList: Array<any> = [];\n  assessmentGradeDetails: any;\n  disbleSubmitBtn = false;\n  buttonName: any;\n\n  constructor(private gradeSetupService: GradeSetupService, public commonService: CommonService, public dialog: MatDialog, public snackBar: MatSnackBar) {\n    super();\n    this.assessmentGradeParameters = {\n      sortBy: '',\n      sortOrder: 0,\n      gradeIndicator: [],\n      evaluation: [],\n      pageNumber: AppSettings.PAGENUMBER,\n      pageSize: AppSettings.PAGESIZE,\n    };\n  }\n\n  ngOnInit(): void {\n    const modelTableComponent = this.getModelComponent(this.currentComponent);\n    if (modelTableComponent) {\n      this.assessmentGradeParameters = modelTableComponent;\n    }\n\n    this.cols = [\n      { field: 'gradeIndicator', header: 'Grade', sort: true },\n      { field: 'evaluation', header: 'Evaluation', sort: true },\n      { field: 'actions', header: 'Actions', sort: false },\n    ];\n\n    this.tabSettings = {\n      rows: [],\n      columns: this.cols,\n      model: this.assessmentGradeParameters,\n      tablename: 'Assessment Grades',\n      componentName: this.currentComponent\n    };\n    this.commonService.getTableLSObj(this.tabSettings);\n    this.getAssessmentGrades(this.assessmentGradeParameters);\n\n    // initialization of form controls in form group\n    this.assessmentgradeForm = new FormGroup({\n      gradeIndicator: new FormControl('', [Validators.required, Validators.maxLength(3)]),\n      evaluation: new FormControl('', [Validators.required, Validators.maxLength(25)]),\n    });\n  }\n\n  //  list of assessment grade Configurations\n  getAssessmentGrades(assessmentGradeParams: AssessmentGradeParametersView): void {\n    this.assessmentGradeParameters = assessmentGradeParams;\n    this.gradeSetupService.assessmentGrades(assessmentGradeParams.gradeIndicator,\n    assessmentGradeParams.evaluation, assessmentGradeParams.sortBy, assessmentGradeParams.sortOrder,\n    assessmentGradeParams.pageNumber, assessmentGradeParams.pageSize).subscribe(res => { this.getAssessmentGradesData(res); }, error => {\n      this.errorResponse(error);\n    });\n  }\n\n  getAssessmentGradesData(gradesData: any): void {\n    if (!gradesData.searchAssessmentGradeData) {\n      this.rows = [];\n    } else {\n      this.rows = gradesData.searchAssessmentGradeData.list;\n      this.totalItems = gradesData.searchAssessmentGradeData.totalItems;\n    }\n\n    const assessmentGradeOperations = [\n      {\n        name: AppSettings.EDIT_OPERATION,\n        icon: AppSettings.EDIT\n      },\n      {\n        name: AppSettings.DELETE_OPERATION,\n        icon: AppSettings.DELETE,\n      },\n    ];\n\n    this.rows.forEach(e => {\n      e.operations = assessmentGradeOperations;\n    });\n\n    if (gradesData.searchAssessmentGradeData) {\n      this.assessmentGradeParameters.pageNumber = gradesData.searchAssessmentGradeData.pageNumber;\n    }\n\n    this.tabSettings = {\n      columns: this.cols,\n      model: this.assessmentGradeParameters,\n      rows: this.rows,\n      tablename: 'Assessment Grades',\n      componentName: this.currentComponent,\n      isPaginationRequired: true,\n      totalRowsCount: this.totalItems,\n      custRowsPerPageOptions: this.custRowsPerPageOptions,\n      pageCnt: this.pageCnt,\n\n      headerOperations: {\n        addingForm: {\n          required: true,\n          btnName: AppSettings.NEW\n        },\n        infoButton: {\n          required: true,\n          text: 'Assessment Grades'\n        },\n      },\n      filtersList: gradesData.filters\n    };\n  }\n  // End\n\n  // to open the add form(reset things)\n  addForm(): void {\n    this.closeAddPanel = false;\n    this.assessmentgradeForm.reset();\n    this.myAssessmentGradeForm.resetForm();\n    this.isUpdateData = false;\n    this.buttonName = AppSettings.SUBMIT;\n  }\n  // End\n\n  // to add/update of assement grade\n  addUpdateAssessmentGrade(assessmentGrade: any): void {\n    this.assessmentGradeFormSubmitted = true;\n    if (this.assessmentgradeForm.status === AppSettings.VALID) {\n      this.disbleSubmitBtn = true;\n      if (this.isUpdateData === true) {\n        this.buttonName = AppSettings.UPDATE;\n        this.assessmentGradeConfigurationView = assessmentGrade.value;\n        this.assessmentGradeConfigurationView.id = this.assessmentGradeDetails.id;\n\n        this.gradeSetupService.updateAssessmentGrades(this.assessmentGradeConfigurationView).subscribe(res => this.updateResponse(res), error => {\n          this.disbleSubmitBtn = false;\n          this.errorResponse(error);\n        });\n      } else {\n        this.buttonName = AppSettings.SUBMIT;\n        this.assessmentGradeView = assessmentGrade.value;\n        this.gradeSetupService.createAssessmentGrades(this.assessmentGradeView).subscribe(res =>\n          this.addResponse(res), error => {\n            this.disbleSubmitBtn = false;\n            this.errorResponse(error);\n          });\n      }\n    }\n  }\n\n  // response after add data of assessment grades\n  addResponse(response: any): void {\n    this.disbleSubmitBtn = false;\n    if (response.statusCode === HttpStatus.OK || response.statusCode === HttpStatus.BAD_REQUEST || response.statusCode === HttpStatus.CONFLICT) {\n          if (response.statusCode === HttpStatus.BAD_REQUEST || response.statusCode === HttpStatus.CONFLICT) {\n            this.closeAddPanel = false;\n          } else {\n            this.closeAddPanel = true;\n            this.getAssessmentGrades(this.assessmentGradeParameters);\n            this.assessmentgradeForm.reset();\n            this.myAssessmentGradeForm.resetForm();\n            this.isUpdateData = false;\n          }\n    } else {\n          this.closeAddPanel = false;\n    }\n    this.openSnackBar(response.messages.ResultMessage);\n  }\n  // End\n\n  // response of assessment grade after update data\n  updateResponse(response: any): void {\n    this.disbleSubmitBtn = false;\n    if (response.statusCode === HttpStatus.OK || response.statusCode === HttpStatus.BAD_REQUEST || response.statusCode === HttpStatus.CONFLICT) {\n          if (response.statusCode === HttpStatus.BAD_REQUEST || response.statusCode === HttpStatus.CONFLICT) {\n            this.closeAddPanel = false;\n          } else {\n            this.closeAddPanel = true;\n            this.getAssessmentGrades(this.assessmentGradeParameters);\n            this.assessmentgradeForm.reset();\n            this.isUpdateData = false;\n          }\n    } else {\n          this.closeAddPanel = false;\n    }\n    this.openSnackBar(response.messages.ResultMessage);\n  }\n  // End\n\n\n  // onCancelClick\n  onCancelClick(): void {\n    this.assessmentgradeForm.reset();\n    this.myAssessmentGradeForm.resetForm();\n    this.closeAddPanel = true;\n    this.isUpdateData = false;\n    this.assessmentGradeFormSubmitted = false;\n    this.disbleSubmitBtn = false;\n  }\n  // End\n\n  // row-wise actions of the table(edit/delete)\n  rowActions(response: any): void {\n    if (response.operation === AppSettings.EDIT) {\n      this.buttonName = AppSettings.UPDATE;\n      this.isUpdateData = true;\n      this.closeAddPanel = false;\n      this.gradeSetupService.assessmentGradesById(response.clickedRow.id)\n        .subscribe(res => this.assessmentGradesByIdValue(res), error => {\n          this.errorResponse(error);\n        });\n    }\n\n    if (response.operation === AppSettings.DELETE) {\n      const dialogRef = this.dialog.open(CustomDialogComponent, {\n        disableClose: true,\n        data: { text: this.commonService.getTranslation(AppSettings.WARNING_ON_SINGLE_DELETE, ''), action: true, btn1Text: AppSettings.NO, btn2Text: AppSettings.YES },\n      });\n\n      dialogRef.afterClosed().subscribe(action => {\n        if (action === AppSettings.YES) {\n          this.gradeSetupService.deleteAssessmentGrades(response.clickedRow.id).subscribe(res => this.deleteResponse(res), error => {\n            this.errorResponse(error);\n          });\n        }\n      });\n    }\n  }\n  // End\n\n  // response after delete operation\n  deleteResponse(deleteResponse: any): void {\n    this.getAssessmentGrades(this.assessmentGradeParameters);\n    this.openSnackBar(deleteResponse.messages.ResultMessage);\n  }\n  // End\n\n  // to set assessment grades data to form after edit click\n  assessmentGradesByIdValue(gradeData: any): void {\n    if (gradeData.assessmentGradeConfigurationView != null) {\n      this.assessmentgradeForm.controls['gradeIndicator'].setValue(gradeData.assessmentGradeConfigurationView.gradeIndicator);\n      this.assessmentgradeForm.controls['evaluation'].setValue(gradeData.assessmentGradeConfigurationView.evaluation);\n\n      this.assessmentGradeDetails = gradeData.assessmentGradeConfigurationView;\n    } else {\n       this.openSnackBar(gradeData.messages.ResultMessage, true);\n    }\n  }\n  // End\n\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { TestTypeComponent } from './test-type/test-type.component';\nimport { AcademicGradesComponent } from './academic-grades/academic-grades.component';\nimport { GradingComponent } from './grading.component';\nimport { GradingTermsComponent } from './grading-terms/grading-terms.component';\nimport { AssessmentGradesComponent } from './assessment-grades/assessment-grades.component';\nimport { GradingTermDetailsComponent } from './grading-term-details/grading-term-details.component';\n\n\nconst routes: Routes = [\n  {\n    path: '', component: GradingComponent,\n    children: [\n      { path: '', pathMatch: 'full', redirectTo: 'test-type',  data: {title: 'Courses'} },\n      { path: 'test-type', component: TestTypeComponent,  data: {title: 'Test Type'} },\n      { path: 'academic-grades', component: AcademicGradesComponent,  data: {title: 'Academic Grades'} },\n      { path: 'grading-terms', component: GradingTermsComponent,  data: {title: 'Grading Terms'} },\n      { path: 'assessment-grades', component: AssessmentGradesComponent,  data: {title: 'Assessment Grades'} },\n      { path: '', pathMatch: 'full', redirectTo: 'test-type',  data: {title: 'Courses'} },\n      { path: 'grading-terms/grading-term-details/:Id', component: GradingTermDetailsComponent,  data: {title: 'Grading Term Details'} },\n      { path: 'grading-term-details', component: GradingTermDetailsComponent,  data: {title: 'Grading Term Details'} },\n    ]\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class GradingRoutingModule { }\n","module.exports = \"<div fxLayout=\\\"column\\\" class=\\\"info-relative mt-12 pt-40\\\">\\n  <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"end center\\\" class=\\\"edit-info\\\">\\n    <button mat-raised-button translate type=\\\"submit\\\" color=\\\"primary\\\" class=\\\"text-uppercase mr-4\\\" (click)=\\\"back()\\\">\\n      Back\\n    </button>\\n  </div>\\n</div>\\n\\n<mat-tab-group class=\\\"manage-institue\\\">\\n  <mat-tab translate label=\\\"{{'Grading Term Details' | translate}}\\\">\\n\\n    <div class=\\\"mx-40 mb-20\\\" fxLayout=\\\"column\\\">\\n      <mat-list fxLayout.gt-xs=\\\"row wrap\\\" fxFlex=\\\"100\\\" fxLayout.lt-sm=\\\"column\\\"\\n        class=\\\"institution-details pt-0 confirm-table border mat-elevation-z3 simple-table-container radius-t-20\\\">\\n\\n        <ng-container *ngFor=\\\"let column of dataConfiguration | keys\\\">\\n          <mat-list-item fxLayout=\\\"column\\\" fxFlex.gt-xs=\\\"50\\\" *ngIf=\\\"gradeTermConfigurationColumns[column.key]\\\">\\n            <div fxLayout=\\\"row\\\" fxFlex=\\\"40\\\"><strong>\\n                {{gradeTermConfigurationColumns[column.key] | translate}}</strong></div>\\n            <div fxLayout=\\\"row\\\" fxFlex=\\\"60\\\"><strong class=\\\"pr-4\\\">:</strong>{{column['value']?column['value']:'--'}}\\n            </div>\\n          </mat-list-item>\\n        </ng-container>\\n\\n      </mat-list>\\n    </div>\\n\\n  </mat-tab>\\n\\n  <mat-tab translate label=\\\"{{'Applies to Class & Section' | translate}}\\\">\\n    <div class=\\\"mat-elevation-z3 simple-table-container radius-t-20 mx-40 mb-20\\\">\\n      <app-table [settings]=\\\"appliedClassSection\\\">\\n      </app-table>\\n    </div>\\n  </mat-tab>\\n\\n  <mat-tab translate label=\\\"{{'Tests & Contributions' | translate}}\\\"\\n    *ngIf=\\\"gradeTestContributionSettings?.rows?.length\\\">\\n    <div class=\\\"mat-elevation-z3 simple-table-container radius-t-20 mx-40 mb-20\\\">\\n      <app-table [settings]=\\\"gradeTestContributionSettings\\\">\\n      </app-table>\\n    </div>\\n  </mat-tab>\\n\\n  <mat-tab translate label=\\\"{{'Report Card Configurations' | translate}}\\\" *ngIf=\\\"additionalColumnsRows?.length\\\">\\n    <div class=\\\"mat-elevation-z3 simple-table-container radius-t-20 mx-40 mb-20\\\">\\n      <app-table [settings]=\\\"additionalColumns\\\">\\n      </app-table>\\n    </div>\\n  </mat-tab>\\n\\n</mat-tab-group>\"","module.exports = \".manage-institue ::ng-deep .mat-table .mat-row:last-child {\\n  border-bottom: none; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi92YXIvd3d3L2h0bWwvc2Nob29sLW1hbmFnZW1lbnQtZnVzZS9zcmMvYXBwL21vZHVsZXMvY29uZmlndXJhdGlvbi9ncmFkaW5nL2dyYWRpbmctdGVybS1kZXRhaWxzL2dyYWRpbmctdGVybS1kZXRhaWxzLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXNCQTtFQUtZLG1CQUFtQixFQUFBIiwiZmlsZSI6InNyYy9hcHAvbW9kdWxlcy9jb25maWd1cmF0aW9uL2dyYWRpbmcvZ3JhZGluZy10ZXJtLWRldGFpbHMvZ3JhZGluZy10ZXJtLWRldGFpbHMuY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIvLyAuY29uZmlybS10YWJsZXtcbi8vICAgICA6Om5nLWRlZXAgLm1hdC1saXN0LWl0ZW0tY29udGVudHtcbi8vICAgICB3aWR0aDoxMDAlO1xuLy8gICAgIH1cbi8vICAgICAuYnJlYWstd29yZHtcbi8vICAgICB3b3JkLWJyZWFrOiBicmVhay1hbGw7XG4vLyAgICAgfVxuLy8gICAgIC5tYXQtbGlzdC1pdGVtOm50aC1vZi10eXBlKG9kZCkge1xuLy8gICAgIGJvcmRlci1yaWdodDogbm9uZSAhaW1wb3J0YW50O1xuLy8gICAgIH1cbi8vICAgICAubWF0LWxpc3QtaXRlbTpsYXN0LWNoaWxke1xuLy8gICAgIGJvcmRlci1ib3R0b206IG5vbmU7XG4vLyAgICAgfVxuLy8gICAgIH1cblxuLy8gLm1hbmFnZS1pbnN0aXR1ZS1lZGl0IHtcbi8vICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4vLyAgICAgcmlnaHQ6IDcxcHg7XG4vLyAgICAgdG9wOiA1NXB4O1xuLy8gICAgIHotaW5kZXg6IDk5O1xuLy8gfVxuXG4ubWFuYWdlLWluc3RpdHVlIHtcbiAgICA6Om5nLWRlZXAgLm1hdC10YWJsZSB7XG4gICAgICAgIC8vIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xuXG4gICAgICAgIC5tYXQtcm93Omxhc3QtY2hpbGQge1xuICAgICAgICAgICAgYm9yZGVyLWJvdHRvbTogbm9uZTtcbiAgICAgICAgfVxuICAgIH1cbn0iXX0= */\"","import { Component, OnInit } from '@angular/core';\nimport { CommonComponent } from 'app/shared/common/common.component';\nimport { Router, ActivatedRoute, Params } from '@angular/router';\nimport { GardeTermConfigurationService } from 'app/service/grading-service/api/garde-term-configuration.service';\nimport { GradingTermDataModel } from 'app/models/grading/grading-term-data-model';\nimport { AppSettings, URLConstants } from 'app/app.constants';\nimport { CommonService } from 'app/service/common.service';\nimport { Location } from '@angular/common';\n\n@Component({\n  selector: 'app-grading-term-details',\n  templateUrl: './grading-term-details.component.html',\n  styleUrls: ['./grading-term-details.component.scss']\n})\nexport class GradingTermDetailsComponent extends CommonComponent implements OnInit {\n  gradeTermId: any;\n  fieldListTest: any;\n  fieldListClass: any;\n  classsections: any;\n  dataConfiguration: any;\n  dataTest: Array<any>;\n  data: any;\n  evaluationTypes: Array<any> = [];\n  gradeTermIds: Array<any> = [];\n  marksGroupCriteria: Array<any> = [];\n  testTypes: Array<any> = [];\n  priorGradingTerms: Array<any> = [];\n  filterYesNo: Array<any> = [];\n  appliedClassSection: any;\n  classSectionRows: any;\n  gradeTestContributionRows: any[];\n  gradeTestContributionSettings: any;\n  additionalColumns: any; \n  additionalColumnsRows: any[];\n  constructor(public _commonService: CommonService, private gradeTermConfigurationService: GardeTermConfigurationService, private router: Router, private routes: ActivatedRoute,\n     public location: Location) {\n    super();\n  }\n\n  gradeClassSectionCols = [\n    { field: 'className', header: 'Class Name', sort: false },\n    { field: 'sectionName', header: 'Section Name', sort: false },\n  ];\n\n  additionalColumnsData = [\n    { field: 'title', header: 'Column Name', sort: false },\n    { field: 'gradingTermName', header: 'Grading Term', sort: false },\n    { field: 'contribution', header: 'Contribution %' , sort: false },\n    { field: 'isVisible', header: 'Is Visible', sort: false },\n  ];\n\n  columnsToDisplayTest = [\n    { field: 'testTypeName', header: 'Name', sort: false },\n    { field: 'contribution', header: 'Contribution', sort: false },\n    { field: 'consideration', header: 'Consideration', sort: false},\n    { field: 'isDisplayOnreportCard', header: 'Displayed On Report Card', sort: false },\n    { field: 'otherGradingTermId', header: 'Prior Grading Term', sort: false },\n    { field: 'marksGroupCriteriaId', header: 'Marks Group Criteria', sort: false },\n    { field: 'marksGroupCriteriaCount', header: 'Marks Group Criteria Count', sort: false },\n    { field: 'displayGradeorMarks', header: 'Display Grade/Marks', sort: false },\n  ];\n\n  gradeTermConfigurationColumns =\n    {\n      termName: 'Term Name',\n      description: 'Description',\n      displayName: 'Display Name',\n      termCode: 'Term Code',\n      evaluationTypeId: 'Evaluation Type Id',\n      evaluationTypeName: 'Evaluation Type',\n      generateReportCard: 'Generate Report',\n      termStartDate: 'Term Start Date',\n      termEndDate: 'Term End Date',\n      generateOverAllGrade: 'Generate Overall Grade',\n      overALLGradeDisplayName: 'Overall Grade Display Name',\n      schoolBoardName: 'School Board'\n    };\n\n  ngOnInit(): void {\n    this.getEvaluationTypeList();\n    this.yesNoList();\n    this.getMarksGroupCriteria();\n    this.getTestTypes();\n\n    this.routes.params\n      .subscribe((params: Params) => this.gradeTermId = params['Id']);\n\n    this.gradeTermConfigurationService.gradingTermConfigurationGradeTermGet(this.gradeTermId).subscribe(res => {\n      \n      this.data = res.gradingTermConfigurationDataViewModel[0].gradingTermClassSectionViewModel;\n      const sections = [];\n      for (const section of this.data) {\n        sections.push(section.sectionsId);\n      }\n      const dataInfo = {\n        boardId: this.data[0].boardId,\n        classId: this.data[0].classId,\n        sectionId: sections\n      };\n      this.getPriorGradingTerms(res, dataInfo); \n    });\n  }\n\n  configurationResponse(_data: GradingTermDataModel): void {\n    delete _data['gradingTermTestViewModel'];\n    delete _data['gradingTermClassSectionViewModel'];\n    delete _data['id'];\n    delete _data['evaluationTypeId'];\n    delete _data['schoolBoardId'];\n    delete _data['isContribution'];\n    this.dataConfiguration = _data;\n    this.dataConfiguration.termStartDate = (this.dataConfiguration.termStartDate == null) ?\n      null : this._commonService.customDateFormat(this.dataConfiguration.termStartDate, this.getSchoolDateFormat()).date;\n    this.dataConfiguration.termEndDate = (this.dataConfiguration.termEndDate == null) ?\n      null : this._commonService.customDateFormat(this.dataConfiguration.termEndDate, this.getSchoolDateFormat()).date;\n    this.dataConfiguration.testsStartDate = (this.dataConfiguration.testsStartDate == null) ?\n      null : this._commonService.customDateFormat(this.dataConfiguration.testsStartDate, this.getSchoolDateFormat()).date;\n    this.dataConfiguration.testsEndDate = (this.dataConfiguration.testsEndDate == null)\n      ? null : this._commonService.customDateFormat(this.dataConfiguration.testsEndDate, this.getSchoolDateFormat()).date;\n    this.dataConfiguration.generateOverAllGrade = this._commonService.defaultEmpty(\n      this._commonService.selectedDropDownData(this.filterYesNo, this.dataConfiguration.generateOverAllGrade)).label;\n    this.dataConfiguration.generateReportCard = this._commonService.defaultEmpty(\n      this._commonService.selectedDropDownData(this.filterYesNo, this.dataConfiguration.generateReportCard)).label;\n  }\n\n\n\n\n  getEvaluationTypeList(): void {\n    this.evaluationTypes = [];\n    this.gradeTermConfigurationService.evaluationTypes().subscribe(response => {\n      if (response.listViews != null) {\n        if (response.listViews.length) {\n          response.listViews.forEach(element => {\n            this.evaluationTypes.push({\n              label: element.name,\n              value: element.id\n            });\n          });\n        }\n      }\n    });\n  }\n\n  getMarksGroupCriteria(): void {\n    this.marksGroupCriteria = [];\n    this.gradeTermConfigurationService.fetchMarksGroupCriteria().subscribe(response => {\n      if (response.listViews != null) {\n        if (response.listViews.length) {\n          response.listViews.forEach(element => {\n            this.marksGroupCriteria.push({\n              label: element.name,\n              value: element.id\n            });\n          });\n        }\n      }\n    });\n\n  }\n\n  yesNoList(): void {\n    this.filterYesNo = [];\n    this.filterYesNo.push({\n      label: AppSettings.YES,\n      value: 1\n    });\n    this.filterYesNo.push({\n      label: AppSettings.NO,\n      value: 0\n    });\n  }\n\n  getPriorGradingTerms(res, data): void {\n    this.priorGradingTerms = [];\n    this.gradeTermConfigurationService.fetchGradingTermsByBoardId(data.boardId, data.classId, data.sectionId).subscribe(response => {\n      if (response.listViews != null) {\n        if (response.listViews.length) {\n          response.listViews.forEach(element => {\n            this.priorGradingTerms.push({\n              label: element.name,\n              value: element.id\n            });\n          });\n        }\n      }\n      this.dataTest = res.gradingTermConfigurationDataViewModel[0].gradingTermTestViewModel;\n     this.additionalColumnsRows = [];\n      for (const value of res.gradingTermConfigurationDataViewModel[0].usedGradingTermAdditionalView){\n        this.additionalColumnsRows.push(this.setAdditionalColumnData(value)); \n      }\n      for (const value of res.gradingTermConfigurationDataViewModel[0].forGradingTermAdditionalView){\n        this.additionalColumnsRows.push(this.setAdditionalColumnData(value, true)); \n      } \n      this.configurationResponse(res.gradingTermConfigurationDataViewModel[0]);\n      this.fieldListClass = this.gradeClassSectionCols.map(x => x.field);\n      this.dataTest.forEach(e => {\n        e.marksGroupCriteriaId = this._commonService.defaultEmpty(this._commonService.selectedDropDownData(this.marksGroupCriteria, e.marksGroupCriteriaId)).label,\n          e.isDisplayOnreportCard = this._commonService.defaultEmpty(this._commonService.selectedDropDownData(this.filterYesNo, e.isDisplayOnreportCard)).label,\n          e.otherGradingTermId = this._commonService.defaultEmpty(this._commonService.selectedDropDownData(this.priorGradingTerms, e.otherGradingTermId)).label,\n          e.displayGradeorMarks = this._commonService.defaultEmpty((this._commonService.selectedDropDownData(this.evaluationTypes, e.displayTypeId))).label;\n      });\n      for (let i = 0; i < this.columnsToDisplayTest.length; i++){\n           const index = this.dataTest.findIndex(e => e[this.columnsToDisplayTest[i].field]);\n           if (index === -1){\n            this.columnsToDisplayTest.splice(i, 1);\n          } \n      }\n      this.fieldListTest = this.columnsToDisplayTest.map(x => x.field);\n      this.getGradeTermTable(); \n    });\n\n  }\n\n  getTestTypes(): void {\n    this.testTypes = [];\n    this.gradeTermConfigurationService.fetchTestTypes().subscribe(response => {\n      if (response.listViews != null) {\n        if (response.listViews.length) {\n          response.listViews.forEach(element => {\n            this.testTypes.push({\n              label: element.name,\n              value: element.id\n            });\n          });\n        }\n      }\n    });\n\n  }\n\n  onBackButtonClick(): void {\n    this.router.navigate(\n      [URLConstants.GRADE_TERMS]);\n  }\n\n  getGradeTermTable(): any {\n    this.classSectionRows = this.data;\n    this.appliedClassSection = {\n      rows: this.classSectionRows,\n      columns: this.gradeClassSectionCols,\n      hideHeader: true,\n      tabTable: true,\n      padding: true\n    };\n    this.gradeTestContributionRows = this.dataTest;\n    this.gradeTestContributionSettings = {\n      rows: this.gradeTestContributionRows,\n      columns: this.columnsToDisplayTest,\n      hideHeader: true,\n      tabTable: true,\n      padding: true\n    };\n    this.additionalColumns = {\n      rows: this.additionalColumnsRows,\n      columns: this.additionalColumnsData,\n      hideHeader: true,\n      // tabTable: true,\n      padding: true\n    };\n  }\n  setAdditionalColumnData(value, isPresentGradingTerm = false): any{\n    return { \n      title: value.title,\n      gradingTermName: value.gradingTermName,\n      isVisible: value.isVisible ? 'YES' : 'NO',\n      contribution: value.contribution, \n    };\n  }\n\n}\n\n\n","module.exports = \"<app-table [settings]=\\\"tabSettings\\\" id=\\\"app-table-grading-terms\\\" (selectedRows)=\\\"selectAllData($event)\\\"\\n  [templateRef]=\\\"gradingTerm\\\" [templateRef]=\\\"gradingTerm\\\" (getTableData)='gradingTermTableData($event)'\\n  (rowSelect)='onTableRowSelect($event)' (rowBasedAction)='rowActions($event)' [closeRowForm]='closeAddPanel'\\n  (openAddForm)=\\\"openForm()\\\" [showSelectAll]=\\\"isDeleteAllRequired\\\" (rowUnselect)='onTableRowUnSelect($event)'>\\n</app-table>\\n\\n<ng-template #gradingTerm>\\n\\n  <div *ngIf=\\\"cloneEnable\\\" class=\\\"p-24\\\" id=\\\"clone-form\\\">\\n    <div class=\\\"h3 pb-12\\\" id=\\\"customExpansion\\\" translate>Clone Grading Term</div>\\n    <mat-accordion class=\\\"tabs-table-padding0\\\">\\n      <mat-expansion-panel [expanded]=\\\"true\\\" class=\\\"mb-16\\\">\\n        <mat-expansion-panel-header class=\\\"border-bottom\\\">\\n          <mat-panel-title class=\\\"h3\\\" translate>Selected Grading Term Details</mat-panel-title>\\n        </mat-expansion-panel-header>\\n        <mat-list fxLayout.gt-sm=\\\"row wrap\\\" fxFlex=\\\"100\\\" fxLayout=\\\"column\\\"\\n          class=\\\"institution-details pt-0 confirm-table border m-24\\\" *ngIf=\\\"termConfigurationData\\\">\\n          <mat-list-item fxLayout=\\\"column\\\" fxFlex.gt-sm=\\\"50\\\" *ngFor=\\\"let column of cloneGradeDetails\\\">\\n            <div fxLayout=\\\"row\\\" fxFlex=\\\"45\\\" translate> {{column.header}}</div>\\n            <div fxLayout=\\\"row\\\" fxFlex=\\\"55\\\">:<span class=\\\"pl-8\\\">{{termConfigurationData[column.field]?termConfigurationData[column.field]:'--'}}</span></div>\\n          </mat-list-item>\\n        </mat-list>\\n      </mat-expansion-panel>\\n\\n      <mat-expansion-panel (opened)=\\\"panelOpenState = true;onOpenTests()\\\" (closed)=\\\"panelOpenState = false\\\">\\n        <mat-expansion-panel-header class=\\\"border-bottom\\\">\\n          <mat-panel-title class=\\\"h3\\\" translate>\\n            Selected Grading Term's Test and Contributions\\n          </mat-panel-title>\\n        </mat-expansion-panel-header>\\n        <app-table [settings]=\\\"cloneGradingTermContributionSettings\\\">\\n        </app-table>\\n      </mat-expansion-panel>\\n    </mat-accordion>\\n\\n    <form fxLayout=\\\"column\\\" (ngSubmit)=\\\"clonePost(cloneFormGroup.value)\\\" [formGroup]=\\\"cloneFormGroup\\\"\\n      #cloneGradingTermForm=\\\"ngForm\\\">\\n      <div class=\\\"h3 pt-24\\\" translate> Clone to Class and Sections</div>\\n      <div fxLayout=\\\"column\\\" class=\\\"pt-8\\\" fxLayout.gt-sm=\\\"row\\\" fxFlex=\\\"100\\\" fxLayoutAlign=\\\"start center\\\">\\n        <mat-form-field *ngIf=\\\"termConfigurationData && cloneClasses.length\\\" appearance=\\\"outline\\\" fxFlexFill\\n          fxLayout=\\\"column\\\" fxFlex=\\\"100\\\" fxFlex.gt-sm=\\\"50\\\">\\n          <mat-label translate #cloneClassId>Class</mat-label>\\n          <mat-select required name=\\\"cloneClassId\\\" formControlName=\\\"cloneClassId\\\"\\n            (selectionChange)=\\\"onClassSelect($event)\\\">\\n            <mat-option *ngFor=\\\"let cloneClass of cloneClasses\\\" [value]=\\\"cloneClass.value\\\">\\n              {{cloneClass.label}}\\n            </mat-option>\\n          </mat-select>\\n          <mat-error>\\n            <app-validation [labelName]=\\\"cloneClassId.innerText\\\"\\n              [validationControl]=\\\"cloneFormGroup.controls.cloneClassId\\\" [doValidate]=\\\"validate\\\">\\n            </app-validation>\\n          </mat-error>\\n          <div #gradesexeed translate class=\\\"subCat\\\" translate>{{gradingTermsExceeded}}</div>\\n        </mat-form-field>\\n        <div *ngIf=\\\"termConfigurationData && !cloneClasses?.length\\\" class=\\\"message-box error\\\">\\n          No class is available for board, to clone grading term.\\n        </div>\\n        <div *ngIf=\\\"cloneSections\\\" class=\\\"px-sm-24\\\" fxLayout=\\\"column\\\" fxFlex=\\\"100\\\" fxFlexFill>\\n          <app-custom-dropdown formControlName=\\\"cloneSectionId\\\" appearance=\\\"outline\\\" fxFlexFill fxLayout=\\\"column\\\"\\n            fxFlex=\\\"100\\\" fxFlex.gt-sm=\\\"18\\\" [dropDownConf]=\\\"cloneSections\\\" [disabled]=disableCloneSection\\n            [errorCheck]=\\\"cloneFormGroup.controls.cloneSectionId\\\" ngDefaultControl>\\n          </app-custom-dropdown>\\n        </div>\\n      </div>\\n      <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"end center\\\" class=\\\"mt-20\\\">\\n        <button mat-raised-button class=\\\"mr-12 text-uppercase\\\" type=\\\"reset\\\"\\n          (click)=\\\"onCloneCancel()\\\">{{'Cancel' | translate}}</button>\\n        <button *ngIf=\\\"termConfigurationData && cloneClasses?.length\\\" mat-raised-button type=\\\"submit\\\" color=\\\"accent\\\"\\n          [disabled]=\\\"cloneDisable\\\" class=\\\"text-uppercase\\\">\\n          {{'Clone' | translate}}\\n        </button>\\n      </div>\\n    </form>\\n  </div>\\n\\n  <div *ngIf=\\\"!cloneEnable\\\">\\n    <mat-vertical-stepper [linear]=\\\"true\\\" #stepper (selectionChange)=\\\"OnSelectionChange($event)\\\"\\n      (animationDone)=\\\"onStepperAnimationDone(stepper.selectedIndex)\\\">\\n      <mat-step [stepControl]=\\\"ClassSectionFormGroup\\\">\\n        <form fxLayout=\\\"column\\\" (ngSubmit)=\\\"saveClassSection(ClassSectionFormGroup.value)\\\"\\n          [formGroup]=\\\"ClassSectionFormGroup\\\" #classSectionForm=\\\"ngForm\\\">\\n          <ng-template matStepLabel>{{'Applies to Class & Section' | translate}}</ng-template>\\n          <div *ngIf=\\\"classSectionDisable\\\" fxFlexFill fxLayout=\\\"column\\\" class=\\\"pt-24\\\" fxLayout.gt-sm=\\\"row\\\">\\n            <mat-form-field appearance=\\\"outline\\\" *ngIf=\\\"isSchoolBoards\\\" fxFlexFill fxLayout=\\\"column\\\" fxFlex=\\\"100\\\"\\n              fxFlex.gt-sm=\\\"50\\\">\\n              <mat-label translate #board>Board</mat-label>\\n              <mat-select required name=\\\"boardId\\\" formControlName=\\\"boardId\\\"\\n                (selectionChange)=\\\"onSchoolBoardSelect($event)\\\">\\n                <mat-option *ngFor=\\\"let board of schoolBoards\\\" [value]=\\\"board.value\\\">\\n                  {{board.label}}\\n                </mat-option>\\n              </mat-select>\\n              <mat-error>\\n                <app-validation [labelName]=\\\"board.innerText\\\"\\n                  [validationControl]=\\\"ClassSectionFormGroup.controls.boardId\\\" [doValidate]=\\\"validate\\\">\\n                </app-validation>\\n              </mat-error>\\n            </mat-form-field>\\n            <mat-form-field appearance=\\\"outline\\\" class=\\\"pl-sm-20\\\" fxFlexFill fxLayout=\\\"column\\\" fxFlex=\\\"100\\\"\\n              fxFlex.gt-sm=\\\"50\\\">\\n              <mat-label translate #class>Class</mat-label>\\n              <mat-select required name=\\\"classId\\\" formControlName=\\\"classId\\\" (selectionChange)=\\\"onSelectClass($event)\\\"\\n                [disabled]=classDisabled>\\n                <mat-option *ngFor=\\\"let class of classNames\\\" [value]=\\\"class.value\\\">\\n                  {{class.label}}\\n                </mat-option>\\n              </mat-select>\\n              <mat-error>\\n                <app-validation [labelName]=\\\"class.innerText\\\"\\n                  [validationControl]=\\\"ClassSectionFormGroup.controls.classId\\\" [doValidate]=\\\"validate\\\">\\n                </app-validation>\\n              </mat-error>\\n            </mat-form-field>\\n            <div *ngIf=\\\"sectionNames\\\" class=\\\"pl-sm-20\\\" fxLayout=\\\"column\\\" fxFlex=\\\"100\\\" fxFlexFill>\\n              <app-custom-dropdown formControlName=\\\"sectionsId\\\" appearance=\\\"outline\\\" fxFlexFill fxLayout=\\\"column\\\"\\n                fxFlex=\\\"100\\\" fxFlex.gt-sm=\\\"18\\\" [dropDownConf]=\\\"sectionNames\\\" [disabled]=sectionDisabled\\n                (selectedData)=\\\"onSelectSection($event)\\\" [errorCheck]=\\\"ClassSectionFormGroup.controls.sectionsId\\\"\\n                ngDefaultControl>\\n              </app-custom-dropdown>\\n            </div>\\n          </div>\\n          <div\\n            *ngIf=\\\"(gridData) && (isUpdateData|| gradeClassSectionViewModel && gradeClassSectionViewModel.sectionId != 0)\\\"\\n            class=\\\"pb-20\\\">\\n            <app-table [settings]=\\\"appliedClassSection\\\" (rowBasedAction)='deleteClassMember($event)'>\\n            </app-table>\\n          </div>\\n          <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"center center\\\" class=\\\"mt-20\\\">\\n            <button mat-raised-button translate class=\\\"mr-12 text-uppercase\\\" type=\\\"reset\\\" #formCancel id=\\\"formCancel\\\"\\n              (click)=\\\"onCancel()\\\"> <span translate>Cancel</span> </button>\\n            <button mat-raised-button matStepperNext translate type=\\\"submit\\\" color=\\\"accent\\\" class=\\\"text-uppercase\\\"><span\\n                translate>Next</span>\\n            </button>\\n          </div>\\n        </form>\\n      </mat-step>\\n      <mat-step [stepControl]=\\\"gradingTermForm\\\">\\n        <form fxLayout=\\\"column\\\" (ngSubmit)=\\\"saveGradingTermDetails(gradingTermForm.value)\\\" [formGroup]=\\\"gradingTermForm\\\"\\n          #gradeTermDetailsForm=\\\"ngForm\\\">\\n          <ng-template translate matStepLabel>{{'Grading Term Details' | translate}}</ng-template>\\n          <div fxFlexFill fxLayout=\\\"column\\\" class=\\\"pt-24\\\" fxLayout.gt-sm=\\\"row\\\">\\n            <mat-form-field appearance=\\\"outline\\\" fxFlexFill fxLayout=\\\"column\\\" fxFlex=\\\"100\\\" fxFlex.gt-sm=\\\"50\\\">\\n              <mat-label translate #name>Name</mat-label>\\n              <input (blur)=\\\"trimTextBoxSpaces('gradingTermForm','termName')\\\" (keyup)=\\\"preventSpace($event,'gradingTermForm','termName')\\\" matInput\\n                required name=\\\"termName\\\" formControlName=\\\"termName\\\">\\n              <mat-error>\\n                <app-validation [labelName]=\\\"name.innerText\\\" [validationControl]=\\\"gradingTermForm.controls.termName\\\"\\n                  [doValidate]=\\\"validate\\\">\\n                </app-validation>\\n              </mat-error>\\n            </mat-form-field>\\n            <mat-form-field appearance=\\\"outline\\\" fxFlexFill fxLayout=\\\"column\\\" fxFlex=\\\"100\\\" fxFlex.gt-sm=\\\"50\\\"\\n              class=\\\"pl-sm-20\\\">\\n              <mat-label translate #displayname>Display Name</mat-label>\\n              <input (keyup)=\\\"preventSpace($event,'gradingTermForm','displayName')\\\" matInput name=\\\"displayName\\\" formControlName=\\\"displayName\\\"\\n                (blur)=\\\"trimTextBoxSpaces('gradingTermForm','displayName')\\\">\\n              <mat-error>\\n                <app-validation [labelName]=\\\"displayname.innerText\\\"\\n                  [validationControl]=\\\"gradingTermForm.controls.displayName\\\" [doValidate]=\\\"validate\\\">\\n                </app-validation>\\n              </mat-error>\\n            </mat-form-field>\\n          </div>\\n          <div fxLayout=\\\"column\\\" class=\\\"pt-12\\\" fxFlexFill fxLayout.gt-sm=\\\"row\\\">\\n            <mat-form-field appearance=\\\"outline\\\" fxFlexFill fxLayout=\\\"column\\\" fxFlex=\\\"100\\\">\\n              <mat-label translate #description>Description</mat-label>\\n              <input (keyup)=\\\"preventSpace($event,'gradingTermForm','description')\\\" matInput name=\\\"description\\\" formControlName=\\\"description\\\"\\n                (blur)=\\\"trimTextBoxSpaces('gradingTermForm','description')\\\">\\n              <mat-error>\\n                <app-validation [labelName]=\\\"description.innerText\\\"\\n                  [validationControl]=\\\"gradingTermForm.controls.description\\\" [doValidate]=\\\"validate\\\">\\n                </app-validation>\\n              </mat-error>\\n            </mat-form-field>\\n          </div>\\n          <div fxFlexFill class=\\\"pt-12\\\" fxLayout=\\\"column\\\" fxLayout.gt-sm=\\\"row\\\">\\n            <mat-form-field appearance=\\\"outline\\\" fxFlexFill fxLayout=\\\"column\\\" fxFlex=\\\"100\\\" fxFlex.gt-sm=\\\"32\\\">\\n              <mat-label translate #code>Code</mat-label>\\n              <input (keyup)=\\\"preventSpace($event,'gradingTermForm','termCode')\\\" matInput name=\\\"termCode\\\" formControlName=\\\"termCode\\\"\\n                (blur)=\\\"trimTextBoxSpaces('gradingTermForm','termCode')\\\">\\n              <mat-error>\\n                <app-validation [labelName]=\\\"code.innerText\\\" [validationControl]=\\\"gradingTermForm.controls.termCode\\\"\\n                  [doValidate]=\\\"validate\\\">\\n                </app-validation>\\n              </mat-error>\\n            </mat-form-field>\\n            <mat-form-field appearance=\\\"outline\\\" fxFlexFill fxFlex=\\\"100\\\" fxFlex.gt-sm=\\\"36\\\" class=\\\"px-sm-20 icon-center\\\"\\n              fxLayout=\\\"column\\\">\\n              <mat-label #startDate translate>Term Start Date</mat-label>\\n              <input matInput (keyup)=\\\"forceValidation('termStartDate',gradingTermForm)\\\" required\\n                [matDatepicker]=\\\"picker\\\" formControlName=\\\"termStartDate\\\" [min]=\\\"academicSessionMinDate\\\"\\n                [max]=\\\"academicSessionMaxDate\\\">\\n              <mat-datepicker-toggle matSuffix [for]=\\\"picker\\\"></mat-datepicker-toggle>\\n              <mat-datepicker #picker></mat-datepicker>\\n              <mat-error>\\n                <app-validation [labelName]=\\\"startDate.innerText\\\"\\n                  [validationControl]=\\\"gradingTermForm.controls.termStartDate\\\" [doValidate]=\\\"validate\\\">\\n                </app-validation>\\n              </mat-error>\\n            </mat-form-field>\\n            <mat-form-field appearance=\\\"outline\\\" fxFlexFill fxFlex=\\\"100\\\" fxLayout=\\\"column\\\" fxFlex.gt-sm=\\\"32\\\"\\n              class=\\\"icon-center\\\">\\n              <mat-label #endDate translate>Term End Date</mat-label>\\n              <input matInput (keyup)=\\\"forceValidation('termEndDate',gradingTermForm)\\\" required\\n                [matDatepicker]=\\\"picker1\\\" [min]=\\\"gradingTermForm.controls.termStartDate.value\\\"\\n                [max]=\\\"academicSessionMaxDate\\\" formControlName=\\\"termEndDate\\\">\\n              <mat-datepicker-toggle matSuffix [for]=\\\"picker1\\\"></mat-datepicker-toggle>\\n              <mat-datepicker #picker1></mat-datepicker>\\n              <mat-error>\\n                <app-validation [labelName]=\\\"endDate.innerText\\\"\\n                  [validationControl]=\\\"gradingTermForm.controls.termEndDate\\\" [doValidate]=\\\"validate\\\">\\n                </app-validation>\\n              </mat-error>\\n            </mat-form-field>\\n          </div>\\n          <div fxFlexFill fxLayout=\\\"column\\\" fxLayout.gt-sm=\\\"row\\\" class=\\\"pt-12\\\">\\n            <mat-form-field appearance=\\\"outline\\\" fxFlexFill fxLayout=\\\"column\\\" fxFlex=\\\"100\\\" fxFlex.gt-sm=\\\"50\\\">\\n              <mat-label translate #greport>Generate Report Card</mat-label>\\n              <mat-select required name=\\\"generateReportCard\\\" formControlName=\\\"generateReportCard\\\">\\n                <mat-option *ngFor=\\\"let yesAndNo of filterYesNo\\\" [value]=\\\"yesAndNo.value\\\">\\n                  {{yesAndNo.label}}\\n                </mat-option>\\n              </mat-select>\\n              <mat-error>\\n                <app-validation [labelName]=\\\"greport.innerText\\\"\\n                  [validationControl]=\\\"gradingTermForm.controls.generateReportCard\\\" [doValidate]=\\\"validate\\\">\\n                </app-validation>\\n              </mat-error>\\n            </mat-form-field>\\n          </div>\\n          <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"center center\\\" class=\\\"mt-20\\\">\\n            <button translate mat-raised-button matStepperPrevious type=\\\"button\\\" class=\\\"text-uppercase mr-12\\\">\\n              <span translate>Previous</span>\\n            </button>\\n            <button translate mat-raised-button matStepperNext type=\\\"submit\\\" color=\\\"accent\\\" class=\\\"text-uppercase\\\">\\n              <span translate>Next</span>\\n            </button>\\n          </div>\\n        </form>\\n      </mat-step>\\n      <mat-step [stepControl]=\\\"TestsFormGroup\\\" [completed]=\\\"getTestOptional()\\\" [optional]=\\\"getTestOptional()\\\"\\n        *ngIf=\\\"gradingTermForm.value.generateReportCard === 1\\\">\\n        <form fxLayout=\\\"column\\\" (ngSubmit)=\\\"onSelect(TestsFormGroup.value)\\\" [formGroup]=\\\"TestsFormGroup\\\"\\n          #testsForm=\\\"ngForm\\\" [doValidate]=\\\"validate\\\">\\n          <ng-template translate matStepLabel>{{'Test Contributions/Considerations' | translate}}</ng-template>\\n\\n          <div fxLayoutAlign=\\\"center center\\\" fxFlex.gt-sm=\\\"50\\\" fxLayout=\\\"column\\\" class=\\\"pt-12\\\">\\n            <div translate fxLayout=\\\"row\\\">ConsiderationMessage</div>\\n            <div fxLayout=\\\"row\\\" class=\\\"pt-8\\\">\\n              <mat-radio-group name=\\\"opList\\\" [(ngModel)]=\\\"radioOptions\\\" [ngModelOptions]=\\\"{standalone: true}\\\"\\n                (change)=\\\"onChangeContribution($event.value)\\\">\\n                <mat-radio-button *ngFor=\\\"let op of contributionOptions\\\" class=\\\"mr-20\\\" [value]=\\\"op.id\\\" name=\\\"opList\\\">\\n                  <span translate>{{ op.name}}</span></mat-radio-button>\\n              </mat-radio-group>\\n            </div>\\n          </div>\\n          <div fxFlexFill fxLayout=\\\"column\\\" class=\\\"pt-24\\\" fxLayout.gt-sm=\\\"row\\\">\\n            <mat-form-field appearance=\\\"outline\\\" fxFlexFill fxLayout=\\\"column\\\" fxFlex=\\\"100\\\" fxFlex.gt-sm=\\\"50\\\">\\n              <mat-label translate #othergradingterm>Prior Grading Term</mat-label>\\n              <mat-select name=\\\"otherGradingTermId\\\" formControlName=\\\"otherGradingTermId\\\">\\n                <mat-option *ngIf=\\\"priorGradingTerms?.length\\\" [value]=\\\"null\\\"></mat-option>\\n                <mat-option [style.display]=\\\"(termId == gradingTerm?.value) ? 'none' : 'block'\\\"\\n                  *ngFor=\\\"let gradingTerm of priorGradingTerms\\\" [value]=\\\"gradingTerm.value\\\">\\n                  {{gradingTerm.label}}\\n                </mat-option>\\n              </mat-select>\\n              <mat-error>\\n                <app-validation [labelName]=\\\"othergradingterm.innerText\\\"\\n                  [validationControl]=\\\"TestsFormGroup.controls.otherGradingTermId\\\" [doValidate]=\\\"validate\\\">\\n                </app-validation>\\n              </mat-error>\\n            </mat-form-field>\\n            <mat-form-field appearance=\\\"outline\\\" fxFlexFill fxLayout=\\\"column\\\" fxFlex=\\\"100\\\" fxFlex.gt-sm=\\\"50\\\"\\n              class=\\\"pl-sm-20\\\">\\n              <mat-label translate #testtype>Test Type</mat-label>\\n              <mat-select required name=\\\"testTypeId\\\" formControlName=\\\"testTypeId\\\">\\n                <mat-option *ngFor=\\\"let testTypes of testTypes\\\" [value]=\\\"testTypes.value\\\">\\n                  {{testTypes.label}}\\n                </mat-option>\\n              </mat-select>\\n              <mat-error>\\n                <app-validation [labelName]=\\\"testtype.innerText\\\"\\n                  [validationControl]=\\\"TestsFormGroup.controls.testTypeId\\\" [doValidate]=\\\"validate\\\">\\n                </app-validation>\\n              </mat-error>\\n            </mat-form-field>\\n          </div>\\n          <div fxFlexFill fxLayout=\\\"column\\\" fxLayout.gt-sm=\\\"row\\\" class=\\\"pt-12\\\">\\n            <mat-form-field *ngIf=\\\"isContribution\\\" appearance=\\\"outline\\\" fxFlexFill fxLayout=\\\"column\\\" fxFlex=\\\"100\\\"\\n              fxFlex.gt-sm=\\\"50\\\">\\n              <mat-label translate #contribution>Contribution to Subject Grade</mat-label>\\n              <input matInput required name=\\\"contribution\\\" (keyup)=\\\"preventSpace($event,'TestsFormGroup','contribution')\\\" formControlName=\\\"contribution\\\"\\n                (blur)=\\\"trimTextBoxSpaces('TestsFormGroup','contribution')\\\" placeholder=\\\"%\\\">\\n              <mat-error>\\n                <app-validation [labelName]=\\\"contribution.innerText\\\"\\n                  [validationControl]=\\\"TestsFormGroup.controls.contribution\\\" [doValidate]=\\\"validate\\\">\\n                </app-validation>\\n              </mat-error>\\n            </mat-form-field>\\n\\n            <mat-form-field *ngIf=\\\"!isContribution\\\" appearance=\\\"outline\\\" fxFlexFill fxLayout=\\\"column\\\" fxFlex=\\\"100\\\"\\n              fxFlex.gt-sm=\\\"50\\\">\\n              <mat-label translate #consideration>Consideration For Subject Grade</mat-label>\\n              <input (keyup)=\\\"preventSpace($event,'TestsFormGroup','consideration')\\\"  matInput required name=\\\"consideration\\\"\\n                formControlName=\\\"consideration\\\" (blur)=\\\"trimTextBoxSpaces('TestsFormGroup','consideration')\\\"\\n                placeholder=\\\"%\\\">\\n              <mat-error>\\n                <app-validation [labelName]=\\\"consideration.innerText\\\"\\n                  [validationControl]=\\\"TestsFormGroup.controls.consideration\\\" [doValidate]=\\\"validate\\\">\\n                </app-validation>\\n              </mat-error>\\n            </mat-form-field>\\n\\n            <mat-form-field appearance=\\\"outline\\\" fxFlexFill fxLayout=\\\"column\\\" fxFlex=\\\"100\\\" fxFlex.gt-sm=\\\"50\\\"\\n              class=\\\"pl-sm-20\\\">\\n              <mat-label translate #displayOption>Display Option</mat-label>\\n              <mat-select required name=\\\"displayOption\\\" formControlName=\\\"displayOption\\\">\\n                <mat-option *ngFor=\\\"let evaluationType of evaluationTypes\\\" [value]=\\\"evaluationType.value\\\">\\n                  {{evaluationType.label}}\\n                </mat-option>\\n              </mat-select>\\n              <mat-error>\\n                <app-validation [labelName]=\\\"displayOption.innerText\\\"\\n                  [validationControl]=\\\"TestsFormGroup.controls.displayOption\\\" [doValidate]=\\\"validate\\\">\\n                </app-validation>\\n              </mat-error>\\n            </mat-form-field>\\n          </div>\\n          <div fxFlexFill fxLayout=\\\"column\\\" fxLayout.gt-sm=\\\"row\\\" class=\\\"pt-12\\\">\\n            <mat-form-field appearance=\\\"outline\\\" fxFlexFill fxLayout=\\\"column\\\" fxFlex=\\\"100\\\" fxFlex.gt-sm=\\\"50\\\">\\n              <mat-label translate #groupingcriteria>Marks Group Criteria</mat-label>\\n              <mat-select (selectionChange)=\\\"onSelectMarksGroupCriteria($event)\\\" required name=\\\"marksGroupCriteriaId\\\"\\n                formControlName=\\\"marksGroupCriteriaId\\\">\\n                <mat-option *ngFor=\\\"let criteria of marksGroupCriteria\\\" [value]=\\\"criteria.value\\\">\\n                  {{criteria.label}}\\n                </mat-option>\\n              </mat-select>\\n              <mat-error>\\n                <app-validation [labelName]=\\\"groupingcriteria.innerText\\\"\\n                  [validationControl]=\\\"TestsFormGroup.controls.marksGroupCriteriaId\\\" [doValidate]=\\\"validate\\\">\\n                </app-validation>\\n              </mat-error>\\n            </mat-form-field>\\n            <mat-form-field appearance=\\\"outline\\\" fxFlexFill fxLayout=\\\"column\\\" fxFlex=\\\"100\\\" fxFlex.gt-sm=\\\"50\\\"\\n              class=\\\"pl-sm-20\\\">\\n              <mat-label translate #criteriacount>Marks Group Criteria Count</mat-label>\\n              <input [required]=\\\"markGroupRequired\\\" (keyup)=\\\"preventSpace($event,'TestsFormGroup','marksGroupCriteriaCount')\\\" matInput\\n                [readonly]=\\\"+TestsFormGroup.value.marksGroupCriteriaId != 1\\\" name=\\\"marksGroupCriteriaCount\\\"\\n                (blur)=\\\"trimTextBoxSpaces('TestsFormGroup','marksGroupCriteriaCount')\\\"\\n                formControlName=\\\"marksGroupCriteriaCount\\\" numbersOnly>\\n              <mat-error>\\n                <app-validation [labelName]=\\\"criteriacount.innerText\\\"\\n                  [validationControl]=\\\"TestsFormGroup.controls.marksGroupCriteriaCount\\\" [doValidate]=\\\"validate\\\">\\n                </app-validation>\\n              </mat-error>\\n            </mat-form-field>\\n          </div>\\n          <div fxFlexFill fxLayout=\\\"column\\\" fxLayout.gt-sm=\\\"row\\\" class=\\\"pt-12\\\">\\n            <mat-form-field appearance=\\\"outline\\\" fxFlexFill fxLayout=\\\"column\\\" fxFlex=\\\"100\\\" fxFlex.gt-sm=\\\"50\\\">\\n              <mat-label translate #displayedoncard>Displayed On Report Card</mat-label>\\n              <mat-select required name=\\\"isDisplayOnreportCard\\\" formControlName=\\\"isDisplayOnreportCard\\\">\\n                <mat-option *ngFor=\\\"let yesAndNo of filterYesNo\\\" [value]=\\\"yesAndNo.value\\\">\\n                  {{yesAndNo.label}}\\n                </mat-option>\\n              </mat-select>\\n              <mat-error>\\n                <app-validation [labelName]=\\\"displayedoncard.innerText\\\"\\n                  [validationControl]=\\\"TestsFormGroup.controls.isDisplayOnreportCard\\\" [doValidate]=\\\"validate\\\">\\n                </app-validation>\\n              </mat-error>\\n            </mat-form-field>\\n            <div fxLayout=\\\"column\\\" fxFlex=\\\"100\\\" fxFlex.gt-sm=\\\"50\\\" fxLayoutAlign=\\\"center start\\\" class=\\\"pb-16 pl-24\\\">\\n              <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"end center\\\">\\n                <button translate mat-raised-button type=\\\"submit\\\" color=\\\"primary\\\" class=\\\"text-uppercase\\\"\\n                  [disabled]=\\\"disableSelect\\\">\\n                  <span translate>{{'Select' | translate}}</span> \\n                </button>\\n              </div>\\n            </div>\\n          </div>\\n          <mat-error *ngIf=\\\"show && isContribution\\\" translate #contibuteError>Total contribution should be 100%\\n          </mat-error>\\n          <div class=\\\"pb-20 pt-24\\\">\\n            <div fxLayout=\\\"column\\\" class=\\\"w-100-p simple-table-container\\\">\\n              <app-table [sticky]=\\\"false\\\" [settings]=\\\"gradingTermTestGridSettings\\\"\\n                (rowBasedAction)='deleteMember($event)'>\\n              </app-table>\\n            </div>\\n          </div>\\n\\n          <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"center center\\\" class=\\\"mt-20\\\">\\n            <button translate mat-raised-button matStepperPrevious type=\\\"button\\\" class=\\\"text-uppercase mr-12\\\">\\n              <span translate>Previous</span>\\n            </button>\\n            <button translate mat-raised-button matStepperNext type=\\\"button\\\" color=\\\"accent\\\" class=\\\"text-uppercase\\\"\\n              [disabled]=\\\"disableNext\\\">\\n              <span translate>Next</span>\\n            </button>\\n          </div>\\n        </form>\\n      </mat-step>\\n      <mat-step [stepControl]=\\\"reportsForm\\\" [completed]=\\\"getReportsIsOptional()\\\" [optional]=\\\"getReportsIsOptional()\\\"\\n        *ngIf=\\\"gradingTermForm.value.generateReportCard === 1\\\">\\n        <form fxLayout=\\\"column\\\" [formGroup]=\\\"reportsForm\\\">\\n          <ng-template translate matStepLabel>{{'Report Card Configuration' | translate}}</ng-template>\\n          <div fxLayout=\\\"column\\\" class=\\\"pt-12\\\" fxLayout.gt-sm=\\\"row\\\">\\n            <div appearance=\\\"outline\\\" fxLayout=\\\"column\\\" fxFlex=\\\"100\\\" fxFlex.gt-sm=\\\"50\\\" translate>Please select the\\n              Evaluation Type to be used in the Report Card for this Grading term ?</div>\\n            <div class=\\\"pl-sm-20\\\" appearance=\\\"outline\\\" fxLayout=\\\"column\\\" fxFlex=\\\"100\\\" fxFlex.gt-sm=\\\"50\\\" translate>Please\\n              select the Report card Template to use for this Grading term ?</div>\\n          </div>\\n          <div fxFlexFill fxLayout=\\\"column\\\" fxLayout.gt-sm=\\\"row\\\">\\n            <mat-form-field appearance=\\\"outline\\\" fxFlexFill fxLayout=\\\"column\\\" fxFlex=\\\"100\\\" fxFlex.gt-sm=\\\"50\\\">\\n              <mat-label translate #evaluationtype>Evaluation Type</mat-label>\\n              <mat-select required name=\\\"evaluationTypeId\\\" formControlName=\\\"evaluationTypeId\\\">\\n                <mat-option *ngFor=\\\"let evaluationType of evaluationTypes\\\" [value]=\\\"evaluationType.value\\\">\\n                  {{evaluationType.label}}\\n                </mat-option>\\n              </mat-select>\\n              <mat-error>\\n                <app-validation [labelName]=\\\"evaluationtype.innerText\\\"\\n                  [validationControl]=\\\"reportsForm.controls.evaluationTypeId\\\" [doValidate]=\\\"validate\\\">\\n                </app-validation>\\n              </mat-error>\\n            </mat-form-field>\\n            <mat-form-field appearance=\\\"outline\\\" fxFlexFill fxLayout=\\\"column\\\" fxFlex=\\\"100\\\" fxFlex.gt-sm=\\\"50\\\"\\n              class=\\\"pl-sm-20\\\">\\n              <mat-label translate #reportID>Report Card Template</mat-label>\\n              <mat-select required name=\\\"reportTemplateId\\\" formControlName=\\\"reportTemplateId\\\">\\n                <mat-option *ngFor=\\\"let template of templates\\\" [value]=\\\"template.id\\\">\\n                  {{template.name}}\\n                </mat-option>\\n              </mat-select>\\n              <mat-error>\\n                <app-validation [labelName]=\\\"reportID.innerText\\\"\\n                  [validationControl]=\\\"reportsForm.controls.reportTemplateId\\\" [doValidate]=\\\"validate\\\">\\n                </app-validation>\\n              </mat-error>\\n            </mat-form-field>\\n          </div>\\n          <div translate class=\\\"pt-12\\\">Do You Want To Generate an Overall Grade in the Report Card based on the Markes obtained in the\\n            each course ?</div>\\n          <div fxFlexFill fxLayout=\\\"column\\\" fxLayout.gt-sm=\\\"row\\\">\\n            <mat-form-field appearance=\\\"outline\\\" fxFlexFill fxLayout=\\\"column\\\" fxFlex=\\\"100\\\" fxFlex.gt-sm=\\\"50\\\">\\n              <mat-label translate #overallGrade>Generate Overall Grade</mat-label>\\n              <mat-select required name=\\\"generateOverAllGrade\\\" formControlName=\\\"generateOverAllGrade\\\"\\n                (selectionChange)=\\\"onChangeOverallGrade($event)\\\">\\n                <mat-option *ngFor=\\\"let yesAndNo of filterYesNo\\\" [value]=\\\"yesAndNo.value\\\">\\n                  {{yesAndNo.label}}\\n                </mat-option>\\n              </mat-select>\\n              <mat-error>\\n                <app-validation [labelName]=\\\"overallGrade.innerText\\\"\\n                  [validationControl]=\\\"reportsForm.controls.generateOverAllGrade\\\" [doValidate]=\\\"validate\\\">\\n                </app-validation>\\n              </mat-error>\\n            </mat-form-field>\\n            <mat-form-field appearance=\\\"outline\\\" fxFlexFill fxLayout=\\\"column\\\" fxFlex=\\\"100\\\" fxFlex.gt-sm=\\\"50\\\"\\n              class=\\\"pl-sm-20\\\">\\n              <mat-label translate #overallDisplay>Overall Grade Display Name</mat-label>\\n              <input (keyup)=\\\"preventSpace($event,'reportsForm','overALLGradeDisplayName')\\\" matInput name=\\\"overALLGradeDisplayName\\\"\\n                formControlName=\\\"overALLGradeDisplayName\\\">\\n              <mat-error>\\n                <app-validation [labelName]=\\\"overallDisplay.innerText\\\"\\n                  [validationControl]=\\\"reportsForm.controls.overALLGradeDisplayName\\\" [doValidate]=\\\"validate\\\">\\n                </app-validation>\\n              </mat-error>\\n            </mat-form-field>\\n          </div>\\n          <div translate class=\\\"pt-12\\\">Do you want the Report Card to include additional columns based on the previous or current\\n            Grading Term Data to calculate the overall Grade ?</div>\\n          <div fxLayout=\\\"column\\\" fxLayout.gt-sm=\\\"row\\\">\\n            <mat-form-field appearance=\\\"outline\\\" fxLayout=\\\"column\\\" fxFlex=\\\"100\\\" fxFlex.gt-sm=\\\"50\\\">\\n              <mat-label translate #additionalColumn>Additional Columns</mat-label>\\n              <mat-select (selectionChange)=\\\"onAdditionalColumnSelect($event)\\\" required name=\\\"additionalColumns\\\"\\n                formControlName=\\\"additionalColumns\\\">\\n                <mat-option *ngFor=\\\"let yesAndNo of filterYesNo\\\" [value]=\\\"yesAndNo.value\\\">\\n                  {{yesAndNo.label}}\\n                </mat-option>\\n              </mat-select>\\n              <mat-error>\\n                <app-validation [labelName]=\\\"additionalColumn.innerText\\\"\\n                  [validationControl]=\\\"reportsForm.controls.additionalColumns\\\" [doValidate]=\\\"validate\\\">\\n                </app-validation>\\n              </mat-error>\\n            </mat-form-field>\\n          </div>\\n\\n          <fieldset *ngIf=\\\"totalContribution < 100 && reportsForm.value?.additionalColumns\\\" class=\\\"border p-20\\\">\\n            <legend translate>Additional Columns</legend>\\n            <div fxLayout=\\\"column\\\" class=\\\"pt-12\\\" fxLayout.gt-sm=\\\"row\\\" fxLayoutAlign=\\\"start center\\\">             \\n              <mat-checkbox translate formControlName=\\\"isPresentGradingTerm\\\" (change)=\\\"onChangeThisTerm($event)\\\" class=\\\"mb-20\\\">\\n                {{'THIS GRADING TERM' | translate}}</mat-checkbox>\\n                <small class=\\\"px-8 mb-20\\\">(OR)</small>\\n              <mat-form-field appearance=\\\"outline\\\" fxLayout=\\\"column\\\" fxFlex=\\\"100\\\" fxFlex.gt-sm=\\\"45\\\">\\n                <mat-label translate #othergradingterm>Prior Grading Term</mat-label>\\n                <mat-select [required]=\\\"reportsForm.value?.additionalColumns ? true : false\\\"\\n                  [disabled]=\\\"reportsForm.value.isPresentGradingTerm\\\" name=\\\"otherGradingTermId\\\"\\n                  formControlName=\\\"usingGradingTermId\\\">\\n                  <mat-option *ngIf=\\\"priorGradingTerms?.length\\\"></mat-option>\\n                  <mat-option [style.display]=\\\"(termId == gradingTerm?.value) ? 'none' : 'block'\\\"\\n                    *ngFor=\\\"let gradingTerm of priorGradingTerms\\\" [value]=\\\"gradingTerm.value\\\">\\n                    {{gradingTerm.label}}\\n                  </mat-option>\\n                </mat-select>\\n                <mat-error>\\n                  <app-validation [labelName]=\\\"othergradingterm.innerText\\\"\\n                    [validationControl]=\\\"reportsForm.controls.usingGradingTermId\\\" [doValidate]=\\\"validate\\\">\\n                  </app-validation>\\n                </mat-error>\\n              </mat-form-field>           \\n              <mat-form-field appearance=\\\"outline\\\" fxLayout=\\\"column\\\" fxFlex=\\\"100\\\" fxFlex.gt-sm=\\\"45\\\"\\n                class=\\\"pl-sm-20\\\">\\n                <mat-label translate #overallDisplay>Contribution</mat-label>\\n                <input [required]=\\\"reportsForm.value?.additionalColumns ? true : false\\\" (keyup)=\\\"preventSpace($event,'reportsForm','contribution')\\\"\\n                  matInput required name=\\\"selectedContribution\\\" placeholder=\\\"%\\\" formControlName=\\\"contribution\\\">\\n                <mat-error>\\n                  <app-validation [labelName]=\\\"overallDisplay.innerText\\\"\\n                    [validationControl]=\\\"reportsForm.controls.contribution\\\" [doValidate]=\\\"validate\\\">\\n                  </app-validation>\\n                </mat-error>\\n              </mat-form-field>           \\n            </div>\\n            <div fxLayout=\\\"column\\\" class=\\\"pt-12\\\" fxLayout.gt-sm=\\\"row\\\">\\n              <mat-checkbox formControlName=\\\"isVisible\\\" class=\\\"pr-sm-20 mb-20\\\" fxLayoutAlign=\\\"start center\\\">{{'Is this Column visible on the Report card' | translate}}\\n              </mat-checkbox>\\n              <mat-form-field appearance=\\\"outline\\\" fxLayout=\\\"column\\\" fxFlex=\\\"100\\\" fxFlex.gt-sm=\\\"40\\\">\\n                <mat-label translate #columnDisplay>Column Display Name</mat-label>\\n                <input required (keyup)=\\\"preventSpace($event,'reportsForm','title')\\\" matInput name=\\\"columnDisplayName\\\" formControlName=\\\"title\\\"\\n                  (blur)=\\\"trimTextBoxSpaces('reportsForm','title')\\\">\\n                <mat-error>\\n                  <app-validation [labelName]=\\\"columnDisplay.innerText\\\" [validationControl]=\\\"reportsForm.controls.title\\\"\\n                    [doValidate]=\\\"validate\\\">\\n                  </app-validation>\\n                </mat-error>\\n              </mat-form-field>        \\n            </div>\\n\\n            <div class=\\\"pl-sm-20 mt-12\\\" fxLayout=\\\"row\\\" fxLayoutAlign=\\\"end center\\\">\\n              <button translate mat-raised-button type=\\\"button\\\" color=\\\"primary\\\" class=\\\"text-uppercase mr-12\\\"\\n                (click)=\\\"onClear()\\\">\\n                <span translate>{{'Reset' | translate}}</span> \\n              </button>\\n              <button translate mat-raised-button type=\\\"button\\\" color=\\\"accent\\\" class=\\\"text-uppercase\\\"\\n                (click)=\\\"onSelectAdditionColumns()\\\">\\n               <span translate>{{'Select' | translate}}</span> \\n              </button>\\n            </div>\\n          </fieldset>\\n          <div *ngIf=\\\"reportsForm.value?.additionalColumns && additionalColumnData?.length\\\"\\n            class=\\\"simple-table-container mat-elevation-z3 my-20 radius-t-20 responsive-normal-table\\\">\\n            <table class=\\\"simple\\\">\\n              <thead>\\n                <tr>\\n                  <th translate>COLUMN NAME</th>\\n                  <th translate>GRADING TERM</th>\\n                  <th translate>CONTRIBUTION %</th>\\n                  <th translate>ISVISIBLE</th>\\n                  <th translate>ACTION</th>\\n                </tr>\\n              </thead>\\n              <tbody>\\n                <tr *ngFor=\\\"let column of additionalColumnData; let i = index;\\\">\\n                  <td>{{column?.title ? column?.title : '-'}}</td>\\n                  <td>\\n                    {{column?.usingGradingTermId ? getLabelOfGradingTerms(column?.usingGradingTermId) : gradingTermForm.value?.termName }}\\n                  </td>\\n                  <td>{{column?.contribution}}</td>\\n                  <td>{{column?.isVisible ? 'YES' : 'NO'}}</td>\\n                  <td class=\\\"cursor-pointer\\\" (click)=\\\"onDeleteAdditionalColumn(i)\\\">\\n                    <mat-icon class=\\\"red-400-fg\\\">delete</mat-icon>\\n                  </td>\\n                </tr>\\n              </tbody>\\n            </table>\\n          </div>\\n          <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"center center\\\" class=\\\"mt-20\\\">\\n            <button translate mat-raised-button matStepperPrevious type=\\\"button\\\" class=\\\"text-uppercase mr-12\\\">\\n              <span translate>Previous</span>\\n            </button>\\n            <button translate mat-raised-button matStepperNext type=\\\"button\\\" color=\\\"accent\\\" class=\\\"text-uppercase\\\"\\n              (click)=\\\"onClickNext()\\\">\\n              <span translate>Next</span>\\n            </button>\\n          </div>\\n        </form>\\n      </mat-step>\\n      <mat-step [stepControl]=\\\"SubmitForm\\\">\\n        <form fxLayout=\\\"column\\\" (ngSubmit)=\\\"createOrUpdateGradingTerms()\\\" [formGroup]=\\\"SubmitForm\\\" #submitForm=\\\"ngForm\\\">\\n          <ng-template translate matStepLabel>{{'Done' | translate}}</ng-template>\\n          <div fxFlex=\\\"80\\\" class=\\\"text-center font-size-18 m-auto pb-20 pt-8\\\" translate>Please verify the entered\\n            information before your final submit</div>\\n          <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"center center\\\" class=\\\"mt-32 pt-24\\\">\\n            <button mat-raised-button matStepperPrevious translate type=\\\"button\\\" class=\\\"text-uppercase mr-12\\\">\\n              <span translate>Previous</span>\\n            </button>\\n            <button mat-raised-button type=\\\"submit\\\" class=\\\"text-uppercase\\\"\\n              color=\\\"accent\\\">{{(isUpdateData ? 'Update':'Submit') | translate}}</button>\\n          </div>\\n        </form>\\n      </mat-step>\\n    </mat-vertical-stepper>\\n  </div>\\n</ng-template>\"","module.exports = \".subCat {\\n  position: absolute;\\n  top: 50px;\\n  color: red; }\\n\\n.tabs-table-padding0 ::ng-deep .mat-expansion-panel-body {\\n  padding: 0 0px 0px; }\\n\\n.min-w-200 {\\n  min-width: 120px; }\\n\\n::ng-deep .mat-step-optional {\\n  display: none !important; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi92YXIvd3d3L2h0bWwvc2Nob29sLW1hbmFnZW1lbnQtZnVzZS9zcmMvYXBwL21vZHVsZXMvY29uZmlndXJhdGlvbi9ncmFkaW5nL2dyYWRpbmctdGVybXMvZ3JhZGluZy10ZXJtcy5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNJLGtCQUFrQjtFQUNsQixTQUFTO0VBQ1QsVUFBVSxFQUFBOztBQUdWO0VBRVEsa0JBQWtCLEVBQUE7O0FBRzNCO0VBQ0ksZ0JBQWdCLEVBQUE7O0FBR3ZCO0VBQ0Usd0JBQXdCLEVBQUEiLCJmaWxlIjoic3JjL2FwcC9tb2R1bGVzL2NvbmZpZ3VyYXRpb24vZ3JhZGluZy9ncmFkaW5nLXRlcm1zL2dyYWRpbmctdGVybXMuY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuc3ViQ2F0e1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB0b3A6IDUwcHg7XG4gICAgY29sb3I6IHJlZDtcbiAgICB9XG5cbiAgICAudGFicy10YWJsZS1wYWRkaW5nMCB7XG4gICAgICAgOjpuZy1kZWVwIC5tYXQtZXhwYW5zaW9uLXBhbmVsLWJvZHkge1xuICAgICAgICAgICAgcGFkZGluZzogMCAwcHggMHB4O1xuICAgICAgICB9XG4gICAgfVxuICAgLm1pbi13LTIwMHtcbiAgICAgICBtaW4td2lkdGg6IDEyMHB4O1xuICAgfVxuXG46Om5nLWRlZXAgLm1hdC1zdGVwLW9wdGlvbmFse1xuICBkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7XG59Il19 */\"","import { Component, OnInit, ViewChild, ChangeDetectorRef } from '@angular/core';\nimport { AppSettings, Pattern, URLConstants, Messages } from 'app/app.constants';\nimport { CustomDialogComponent } from 'app/shared/custom-dialog/custom-dialog.component';\nimport { CommonService } from 'app/service/common.service';\nimport { GardeTermConfigurationService } from 'app/service/grading-service/api/garde-term-configuration.service';\nimport { MatDialog, MatSnackBar } from '@angular/material';\nimport {\n  GradingTermClassSectionViewModel, GradingTermDataViewModel, GradingTermTestViewModel,\n  GradingTermSearchViewModel\n} from '../../../../models/grading/models';\nimport { HttpClient } from '@angular/common/http';\nimport { FormGroup, FormControl, Validators, FormBuilder } from '@angular/forms';\nimport { ClassSectionService } from 'app/service/academic-service/api/class-section.service';\nimport * as HttpStatus from 'http-status-codes';\nimport { CommonComponent } from '../../../../shared/common/common.component';\nimport { Router, ActivatedRoute, Params } from '@angular/router';\nimport { GradingTermDataModel } from 'app/models/grading/grading-term-data-model';\nimport { GradeSetupService } from 'app/service/grading-service/api/grade-setup.service';\nimport { GradingTermCloneViewModel } from 'app/models/grading/grading-term-clone-view-model';\nimport { DropDownConfModel } from 'app/models/drop-down-conf-view';\nimport { GradeClassSectionView } from 'app/models/grading/grade-class-section-view';\nimport { distinctUntilChanged } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-grading-terms',\n  templateUrl: './grading-terms.component.html',\n  styleUrls: ['./grading-terms.component.scss']\n})\nexport class GradingTermsComponent extends CommonComponent implements OnInit {\n\n  @ViewChild('classSectionForm') classSectionForm;\n  @ViewChild('gradeTermDetailsForm') gradeTermDetailsForm;\n  @ViewChild('testsForm') testsForm;\n  @ViewChild('submitForm') submitForm;\n  @ViewChild('stepper') stepper;\n  @ViewChild('cloneGradingTermForm') cloneGradingTermForm;\n\n\n  gradingTermClassSectionViewModel: GradingTermClassSectionViewModel;\n  gradingTermDataViewModel: GradingTermDataViewModel;\n  gradingTermTestViewModel: GradingTermTestViewModel;\n  gradingTermSearchViewModel: GradingTermSearchViewModel;\n  gradeClassSectionViewModel: GradeClassSectionView;\n  isUpdateData = false;\n  closeAddPanel: boolean;\n  buttonDisable: boolean;\n  gradeTermIds: Array<any> = [];\n  classNames: Array<any> = [];\n  sectionNames: DropDownConfModel;\n  evaluationTypes: Array<any> = [];\n  marksGroupCriteria: Array<any> = [];\n  testTypes: Array<any> = [];\n  priorGradingTerms: Array<any> = [];\n  filterYesNo: Array<any> = [];\n  ClassSectionFormGroup: FormGroup;\n  gradingTermForm: FormGroup;\n  TestsFormGroup: FormGroup;\n  cloneFormGroup: FormGroup;\n  SubmitForm: FormGroup;\n  tableData: Array<any> = [];\n  rows: Array<any>;\n  cols: any[];\n  gradeClassSectionCols: any[];\n  pageCnt: number;\n  totalItems: number;\n  custRowsPerPageOptions: Array<number> = [];\n  tabSettings: {};\n  isValidRight: any;\n  failedRecords: any = [];\n  checkedRecords: any;\n  dataLoaded = Promise.resolve(false);\n  isDeleteAllRequired = false;\n  modelname: any;\n  currentComponentName = 'GradingTermsComponent';\n  reportsForm: FormGroup;\n  appliedClassSection: { tablename: string; rows: any[]; hideHeader: boolean; columns: any[]; rowGroupingColumns: any[]; };\n  gradingTermTestGridSettings: { tablename?: string; rows: any[]; columns: any[]; hideHeader: boolean; tabTable: boolean; padding: boolean; };\n  classSectionDetails: Array<GradingTermClassSectionViewModel>;\n  gradingTermTestDetails: Array<GradingTermTestViewModel>;\n  gradingTermsDetailsView: GradingTermDataViewModel;\n  updateGradingTerm: GradingTermDataModel;\n  gradingList: Array<any> = [];\n  gradeClassSectionData: Array<any> = [];\n  idsToDisplay: any;\n  termConfigurationData: any;\n  displaygradeClassSectionCols: any[];\n  termClassSectionsData: any[];\n  displaygradeTestCols: any[];\n  fieldListTermTests: string[] = [];\n  contributionGridColumns: string[] = [];\n  contributionGridHeaderData: any[];\n  gradingTermTestGridData: Array<any>;\n  gridName = '';\n  contributionTableSettings = {};\n  show = false;\n  disableNext = true;\n  disableSelect = false;\n  removedTestTypeIds: Array<number> = [];\n  classSectionDisable = true;\n  gridData: Array<any>;\n  gridColumsArray: any[];\n  gridColums: string[] = [];\n  gridTitle: string;\n  schoolBoards: Array<any> = [];\n  cloneClasses: Array<any> = [];\n  cloneSections: DropDownConfModel;\n  cloneEnable: Boolean;\n  cloneGradeDetailsList: string[] = [];\n  cloneGradeDetails: any[];\n  contributionColumnList: string[] = [];\n  isCloneFormValid: boolean;\n  cloneGradingTermDetails: GradingTermCloneViewModel;\n  cloneGradingTermId: string;\n  disableCloneSection = true;\n  gradingTermsExceeded: string;\n  classDisabled: boolean;\n  sectionDisabled: boolean;\n  templateReference: any;\n  sectionNamesList: Array<any> = [];\n  cloneSectionNamesList: Array<any> = [];\n  removedClassSectionIds: Array<number> = [];\n  cloneDisable = true;\n  interactedStepperIndex: Number = 0;\n  isSchoolBoards = false;\n  cloneContributionGridHeaderData: any[];\n  classSectionGroupCriteria: any[];\n  cloneGradingTermContributionSettings: { tablename?: string; rows: any[]; columns: any[]; hideHeader: boolean; padding: boolean; };\n  filterRowData: any = [];\n  isContribution: boolean;\n  contributionOptions = [\n    { name: 'Considerations', id: 0 },\n    { name: 'Contribution', id: 1 }\n  ];\n  validate = true;\n  termId: any;\n  additionalColumnData = [];\n  radioOptions = 0;\n  templates: any[] = [];\n  totalContribution = 0;\n  markGroupRequired: boolean;\n  constructor(private gradeSetupService: GradeSetupService,\n    public commonService: CommonService, public dialog: MatDialog,\n    private _classSectionService: ClassSectionService,\n    private _gradingTermConfigurationService: GardeTermConfigurationService,\n    private http: HttpClient, private router: Router,\n    private routes: ActivatedRoute, public snackBar: MatSnackBar,\n    public changeDetecor: ChangeDetectorRef\n  ) {\n    super();\n    this.isContribution = false;\n    this.gradingTermSearchViewModel = {\n      sortBy: '',\n      sortOrder: 0,\n      pageNumber: AppSettings.PAGENUMBER, pageSize: AppSettings.PAGESIZE,\n      classes: [],\n      sections: [],\n      names: [],\n      codes: [],\n      evaluationTypeId: [],\n      generateOverallGrade: [],\n      generateReportCard: [],\n      overallGradeDisplayNames: [],\n      termEndDatesBegin: null,\n      termEndDatesEnd: null,\n      termStartDatesBegin: null,\n      termStartDatesEnd: null\n    };\n    this.gradeClassSectionViewModel = {\n      boardId: 0,\n      classId: 0,\n      sectionId: [],\n      pageNumber: AppSettings.PAGENUMBER,\n      pageSize: AppSettings.PAGESIZE\n    };\n    this.updateGradingTerm = {\n      id: null,\n      termName: null,\n      description: null,\n      displayName: null,\n      termCode: null,\n      evaluationTypeId: 0,\n      generateReportCard: 0,\n      termStartDate: null,\n      termEndDate: null,\n      testsStartDate: null,\n      testsEndDate: null,\n      generateOverAllGrade: 0,\n      overALLGradeDisplayName: null,\n      gradingTermTestViewModel: null,\n      removedGradingTermTestIds: [],\n      removedGradingtermClassSectionIds: [],\n      gradingTermClassSectionViewModel: [],\n    };\n  }\n  ngOnInit(): void {\n    this.termId = null;\n    this.initializeClassSectionForm();\n\n    this.cols = [\n      { field: 'termName', header: 'Term' },\n      { field: 'classSectionName', header: 'Class & Section' },\n      { field: 'termCode', header: 'Code' },\n      { field: 'evaluationType', header: 'Evaluation Type' },\n      { field: 'genarateReportCard', header: 'G. Report Card' },\n      { field: 'termStartDate', header: 'Term Start Date' },\n      { field: 'termEndDate', header: 'Term End Date' },\n      { field: 'generateOverallGrade', header: 'G Overall Grade' },\n      { field: 'overallGradeDisplayName', header: 'Grade Display On RC' },\n      { field: 'actions', header: 'Actions', sort: false },\n    ];\n\n    this.gradeClassSectionCols = [\n      { field: 'name', header: 'Grading Term Name', sort: false },\n      { field: 'boardName', header: 'Board', sort: false },\n      { field: 'className', header: 'Class', sort: false },\n      { field: 'sectionName', header: 'Section', sort: false },\n      { field: 'termStartDate', header: 'Start Date', sort: false },\n      { field: 'termEndDate', header: 'End Date', sort: false },\n    ];\n\n    this.contributionGridHeaderData = [\n      { field: 'otherGradingTermId', header: 'Prior Grading Term', sort: false },\n      { field: 'testTypeId', header: 'Test Type', sort: false },\n      { field: 'displayOption', header: 'Display', sort: false },\n      { field: 'contribution', header: 'Contribution %', sort: false },\n      { field: 'consideration', header: 'Consideration %', sort: false },\n      { field: 'marksGroupCriteriaId', header: 'Marks Group Criteria', sort: false },\n      { field: 'marksGroupCriteriaCount', header: 'Marks Group Criteria Count', sort: false },\n      { field: 'isDisplayOnreportCard', header: 'Display On Report Card', sort: false },\n      { field: 'delete', header: 'Actions', sort: false },\n    ];\n\n    this.contributionGridColumns = this.contributionGridHeaderData.map(x => x.field);\n\n    this.displaygradeClassSectionCols = [\n      { field: 'schoolBoardName', header: 'Board', sort: false },\n      { field: 'className', header: 'Class Name', sort: false },\n      { field: 'sectionName', header: 'Section Name', sort: false },\n      // { field: 'delete', header: 'Actions', sort: false },\n    ];\n\n    this.cloneGradeDetails = [\n      { field: 'termName', header: 'Name' },\n      { field: 'description', header: 'Description' },\n      { field: 'displayName', header: 'Display Name' },\n      { field: 'termCode', header: 'Code' },\n      { field: 'evaluationTypeId', header: 'Evaluation Type' },\n      { field: 'generateReportCard', header: 'Generate Report Card' },\n      { field: 'termStartDate', header: 'Term Start Date' },\n      { field: 'termEndDate', header: 'Term End Date' },\n      // { field: 'testsStartDate', header: 'Consider Test From Date' },\n      // { field: 'testsEndDate', header: 'Consider Test To Date' },\n      { field: 'generateOverAllGrade', header: 'Generate OverAll Grade' },\n      { field: 'overALLGradeDisplayName', header: 'Overall Grade Display Name' },\n      { field: 'schoolBoardName', header: 'School Board' },\n    ];\n\n    this.cloneGradeDetailsList = this.cloneGradeDetails.map(x => x.field);\n\n    this.cloneContributionGridHeaderData = [\n      { field: 'otherGradingTermId', header: 'Prior Grading Term', sort: false },\n      { field: 'testTypeId', header: 'Test Type', sort: false },\n      { field: 'displayOption', header: 'Display', sort: false },\n      { field: 'contribution', header: 'Contribution', sort: false },\n      { field: 'consideration', header: 'Consideration', sort: false },\n      { field: 'marksGroupCriteriaId', header: 'Marks Group Criteria', sort: false },\n      { field: 'marksGroupCriteriaCount', header: 'Marks Group Criteria Count', sort: false },\n      { field: 'isDisplayOnreportCard', header: 'Display On Report Card', sort: false },\n    ];\n\n\n    const modelTableComponent = this.getModelComponent(this.currentComponentName);\n    if (modelTableComponent) {\n      this.gradingTermSearchViewModel = modelTableComponent;\n    }\n    // / initializing table settings /\n    this.tabSettings = {\n      rows: [],\n      columns: this.cols,\n      model: this.gradingTermSearchViewModel,\n      tablename: 'Grading Terms',\n      componentName: this.currentComponentName,\n      isPaginationRequired: true,\n      totalRowsCount: this.totalItems,\n      custRowsPerPageOptions: this.custRowsPerPageOptions,\n      pageCnt: this.pageCnt,\n    };\n    this.contributionColumnList = ['testTypeId', 'contribution', 'consideration', 'displayOption',\n      'marksGroupCriteriaId', 'marksGroupCriteriaCount', 'isDisplayOnreportCard', 'isDisplayOnreportCard'];\n    this.loagGradingTermdata();\n    this.getTemplates();\n  }\n\n  initializeClassSectionForm(initial = true): void {\n    this.setReportConfigurationForm();\n    if (initial) {\n      this.getEvaluationTypeList();\n      this.yesNoList();\n      this.getMarksGroupCriteria();\n      this.getTestTypes();\n    }\n    this.gradingTermTestDetails = [];\n    this.gradingTermTestGridData = [];\n    this.classSectionDetails = [];\n\n    this.ClassSectionFormGroup = new FormGroup({\n      boardId: new FormControl(''),\n      classId: new FormControl(''),\n      sectionsId: new FormControl('', [Validators.required]),\n    });\n\n    this.gradingTermForm = new FormGroup({\n      termName: new FormControl('', [Validators.required, Validators.maxLength(45)]),\n      displayName: new FormControl('', [Validators.maxLength(45)]),\n      description: new FormControl('', [Validators.maxLength(135)]),\n      termCode: new FormControl('', [Validators.maxLength(6)]),\n      termStartDate: new FormControl('', [Validators.required]),\n      termEndDate: new FormControl('', [Validators.required]),\n      generateReportCard: new FormControl('', [Validators.required])\n    });\n    this.setTestFormFroup();\n    this.cloneFormGroup = new FormGroup({\n      cloneClassId: new FormControl('', [Validators.required]),\n      cloneSectionId: new FormControl('', [Validators.required]),\n    });\n    this.SubmitForm = new FormGroup({});\n  }\n  setTestFormFroup(): void {\n    this.TestsFormGroup = new FormGroup({\n      testsStartDate: new FormControl(''),\n      testsEndDate: new FormControl(''),\n      otherGradingTermId: new FormControl(null),\n      testTypeId: new FormControl('', [Validators.required]),\n      contribution: new FormControl(null, [Validators.required, Validators.min(1), Validators.pattern(Pattern.DECIMAL_WITH_TWO_PRECISIONS), Validators.max(100)]),\n      displayOption: new FormControl('', [Validators.required]),\n      marksGroupCriteriaId: new FormControl('', [Validators.required]),\n      marksGroupCriteriaCount: new FormControl('', [Validators.required, Validators.pattern(Pattern.NUMBER_PATTERN), Validators.min(1), Validators.max(100)]),\n      isDisplayOnreportCard: new FormControl('', [Validators.required]),\n      consideration: new FormControl('', [Validators.required, Validators.min(1), Validators.pattern(Pattern.DECIMAL_WITH_TWO_PRECISIONS), Validators.max(999.99)]),\n      stepperController: new FormControl(null, [Validators.required]),\n    });\n    // this.TestsFormGroup.controls.marksGroupCriteriaCount.disable();\n  }\n  initializeCloneGradingTermForm(): void {\n\n    this.cloneFormGroup = new FormGroup({\n      cloneClassId: new FormControl('', [Validators.required]),\n      cloneSectionId: new FormControl('', [Validators.required]),\n    });\n  }\n  setReportConfigurationForm(): void {\n    this.reportsForm = new FormGroup({\n      evaluationTypeId: new FormControl(null, [Validators.required]),\n      reportTemplateId: new FormControl(null),\n      generateOverAllGrade: new FormControl(null, [Validators.required]),\n      overALLGradeDisplayName: new FormControl(null, [Validators.maxLength(45)]),\n      additionalColumns: new FormControl(null, [Validators.required]),\n      stepperController: new FormControl(true, [Validators.required]),\n\n      usingGradingTermId: new FormControl(null),\n      isPresentGradingTerm: new FormControl(false),\n      contribution: new FormControl(null),\n      isVisible: new FormControl(true),\n      title: new FormControl(null)\n    });\n    this.reportsForm.controls.overALLGradeDisplayName.disable();\n    this.reportsForm.valueChanges.pipe(distinctUntilChanged()).subscribe(value => {\n      this.updateStepperController();\n    });\n  }\n  loagGradingTermdata(): void {\n    this._gradingTermConfigurationService.fetchGradingTermsList(this.gradingTermSearchViewModel.sortBy, this.gradingTermSearchViewModel.sortOrder,\n      this.gradingTermSearchViewModel.names, this.gradingTermSearchViewModel.classes, this.gradingTermSearchViewModel.sections,\n      this.gradingTermSearchViewModel.evaluationTypeId, this.gradingTermSearchViewModel.codes,\n      this.gradingTermSearchViewModel.termStartDatesBegin, this.gradingTermSearchViewModel.termStartDatesEnd,\n      this.gradingTermSearchViewModel.termEndDatesBegin, this.gradingTermSearchViewModel.termEndDatesEnd, this.gradingTermSearchViewModel.generateReportCard,\n      this.gradingTermSearchViewModel.generateOverallGrade, this.gradingTermSearchViewModel.overallGradeDisplayNames,\n      this.gradingTermSearchViewModel.pageNumber, this.gradingTermSearchViewModel.pageSize).subscribe(data => this.response(data), error => {\n        this.errorResponse(error);\n      });\n  }\n\n  saveClassSection(form: GradingTermClassSectionViewModel): void {\n    this.classSectionDetails = [];\n    if (!this.isUpdateData) {\n      if (this.ClassSectionFormGroup.status === AppSettings.VALID) {\n        this.classSectionDetails.push({\n          classId: form.classId,\n          sectionsId: form.sectionsId.map(element => {\n            return element.value;\n          }),\n          boardId: form.boardId\n        });\n      }\n    }\n    else {\n      const classSectionColumnList: string[] = ['boardId', 'classId', 'sectionsId'];\n      this.customClearValidation(this.ClassSectionFormGroup, classSectionColumnList);\n    }\n  }\n\n  saveGradingTermDetails(form: GradingTermDataViewModel): void {\n    if (this.gradingTermForm.status === AppSettings.VALID) {\n      this.gradingTermsDetailsView = form;\n    }\n  }\n\n  createOrUpdateGradingTerms(): void {\n    if (this.isUpdateData) {\n      this.gradingTermsDetailsView = this.gradingTermForm.value;\n      if (this.removedTestTypeIds !== undefined) {\n        this.updateGradingTerm.removedGradingTermTestIds = this.removedTestTypeIds;\n      }\n      if (this.removedClassSectionIds !== undefined) {\n        this.updateGradingTerm.removedGradingtermClassSectionIds = this.removedClassSectionIds;\n      }\n      this.updateGradingTerm.id = this.idsToDisplay;\n      this.updateGradingTerm.schoolBoardId = this.termConfigurationData.schoolBoardId;\n      this.updateGradingTerm.termName = this.gradingTermsDetailsView.termName;\n      this.updateGradingTerm.description = this.gradingTermsDetailsView.description;\n      this.updateGradingTerm.displayName = this.gradingTermsDetailsView.displayName;\n      this.updateGradingTerm.termCode = this.gradingTermsDetailsView.termCode;\n      this.updateGradingTerm.evaluationTypeId = this.reportsForm.value.evaluationTypeId;\n      this.updateGradingTerm.generateReportCard = this.gradingTermsDetailsView.generateReportCard;\n      this.updateGradingTerm.termStartDate = this.gradingTermsDetailsView.termStartDate;\n      this.updateGradingTerm.termEndDate = this.gradingTermsDetailsView.termEndDate;\n      this.updateGradingTerm.testsStartDate = this.TestsFormGroup.value.testsStartDate;\n      this.updateGradingTerm.testsEndDate = this.TestsFormGroup.value.testsEndDate;\n\n      this.updateGradingTerm.generateOverAllGrade = this.reportsForm.value.generateOverAllGrade;\n\n      this.updateGradingTerm.overALLGradeDisplayName = this.reportsForm.value.overALLGradeDisplayName;\n      this.updateGradingTerm.gradingTermTestViewModel = this.gradingTermTestDetails;\n\n      Object.assign(this.updateGradingTerm, this.reportsForm.value);\n      this.updateGradingTerm['usedGradingTermAdditionalTotalColumns'] = this.additionalColumnData.filter(e => e.usingGradingTermId);\n      this.updateGradingTerm['forGradingTermAdditionalTotalColumns'] = this.additionalColumnData.filter(e => !e.usingGradingTermId);\n      delete this.updateGradingTerm['usingGradingTermId'];\n      this._gradingTermConfigurationService.gradingTermConfigurationGradingTermPut(this.updateGradingTerm)\n        .subscribe(res => this.addorUpdateResponse(res), error => {\n          this.errorResponse(error);\n        });\n    } else {\n      this.classSectionDetails = [];\n      this.classSectionDetails.push({\n        classId: this.ClassSectionFormGroup.value.classId,\n        sectionsId: this.ClassSectionFormGroup.value.sectionsId.map(element => {\n          return element.value;\n        }),\n        boardId: this.ClassSectionFormGroup.value.boardId\n      });\n      this.gradingTermsDetailsView = this.gradingTermForm.value;\n      this.gradingTermDataViewModel = this.gradingTermsDetailsView;\n      Object.assign(this.gradingTermDataViewModel, this.reportsForm.value);\n      this.gradingTermDataViewModel['usedGradingTermAdditionalTotalView'] = this.additionalColumnData.filter(e => e.usingGradingTermId);\n      this.gradingTermDataViewModel['forGradingTermAdditionalTotalColumns'] = this.additionalColumnData.filter(e => !e.usingGradingTermId);\n\n      this.gradingTermDataViewModel.testsStartDate = this.TestsFormGroup.value.testsStartDate;\n      this.gradingTermDataViewModel.testsEndDate = this.TestsFormGroup.value.testsEndDate;\n\n      this.gradingTermDataViewModel.schoolBoardId = this.classSectionDetails[0].boardId;\n      this.gradingTermDataViewModel.gradingTermClassSectionViewModel = this.classSectionDetails;\n      this.gradingTermDataViewModel.gradingTermTestViewModel = this.gradingTermTestDetails;\n      this._gradingTermConfigurationService.gardeTermConfigurationCreateGradingTermPost(this.gradingTermDataViewModel)\n        .subscribe(res => this.addorUpdateResponse(res), error => {\n          this.errorResponse(error);\n        });\n    }\n  }\n\n  // response after add data of GradingTerm\n  addorUpdateResponse(response: any): void {\n    this.cloneEnable = false;\n    this.clearCloneSection();\n    this.clearGradeTermSection();\n    if (response.statusCode === HttpStatus.OK || response.statusCode === HttpStatus.BAD_REQUEST || response.statusCode === HttpStatus.CONFLICT) {\n      if (response.statusCode === HttpStatus.BAD_REQUEST || response.statusCode === HttpStatus.CONFLICT) {\n        this.closeAddPanel = false;\n      } else {\n        this.closeAddPanel = true;\n        if (document.getElementById('formCancel')) {\n          document.getElementById('formCancel').click();\n        }\n        this.loagGradingTermdata();\n        if (this.stepper) {\n          this.stepper.reset();\n        }\n        this.isUpdateData = false;\n        this.buttonDisable = false;\n      }\n    } else {\n      this.closeAddPanel = false;\n    }\n    this.openSnackBar(response.messages.ResultMessage);\n  }\n  // End\n\n  response(data: any): void {\n    if (localStorage.getItem(this.currentComponentName)) {\n      this.modelname = JSON.parse(localStorage.getItem(this.currentComponentName));\n    }\n\n    if (data.gradingTermListViewModel) {\n      this.rows = data.gradingTermListViewModel.list;\n      this.totalItems = data.gradingTermListViewModel.totalItems;\n    } else {\n      this.rows = [];\n    }\n\n    const actionList = [\n      {\n        name: AppSettings.EDIT_OPERATION,\n        icon: AppSettings.EDIT\n      },\n      {\n        name: AppSettings.DELETE_OPERATION,\n        icon: AppSettings.DELETE,\n      },\n      {\n        name: AppSettings.DETAILS_DISPLAY,\n        icon: AppSettings.DETAILS_ICON,\n      },\n      {\n        name: AppSettings.CLONE_OPERATION,\n        icon: AppSettings.CLONE_ICON\n      }\n    ];\n\n    this.filterRowData = this.rows;\n    const x = [];\n    this.filterRowData.forEach(elnt => {\n      if (x.length === 0) {\n        x.push(elnt);\n      }\n      else {\n        this.filterRowData.forEach((element: any) => {\n          const foundIndex = x.findIndex((value: any) => {\n            return value.termName === element.termName;\n          });\n          if (foundIndex === -1) {\n            x.push(element);\n          }\n        });\n      }\n    });\n\n    this.filterRowData = x;\n    if (this.filterRowData.length > 0) {\n      // apply edit and delete\n      this.filterRowData.forEach(element => {\n        element.operations = actionList;\n      });\n    }\n\n    this.rows.forEach((e: any) => {\n      e.termStartDate = (e.termStartDate == null) ? null : this.commonService.customDateFormat(e.termStartDate, this.getSchoolDateFormat()).date;\n      e.termEndDate = (e.termEndDate == null) ? null : this.commonService.customDateFormat(e.termEndDate, this.getSchoolDateFormat()).date;\n    });\n\n    this.tabSettings = {\n      columns: this.cols,\n      model: this.gradingTermSearchViewModel,\n      rows: this.rows,\n      tablename: 'Grading Terms',\n      componentName: this.currentComponentName,\n      isSelectRowRequired: false,\n      visibleSelectAll: true,\n      isPaginationRequired: true,\n      totalRowsCount: this.totalItems,\n      custRowsPerPageOptions: this.custRowsPerPageOptions,\n      pageCnt: this.pageCnt,\n      filtersList: data.filters,\n      rowGroupingColumns: ['termName', 'termCode', 'overallGradeDisplayName', 'genarateReportCard', 'evaluationType',\n        'generateOverallGrade', 'termStartDate', 'termEndDate'],\n      headerOperations: {\n        infoButton: {\n          required: true,\n          text: 'Grading Terms'\n        },\n        addingForm: {\n          required: true,\n          btnName: 'New Grading Term'\n        }\n      }\n    };\n  }\n\n  gradingTermTableData(_event: GradingTermSearchViewModel): void {\n    this.gradingTermSearchViewModel = _event;\n    this.loagGradingTermdata();\n  }\n  // End\n\n  openForm(): void {\n    this.isContribution = false;\n    this.interactedStepperIndex = 0;\n    this.disableNext = true;\n    this.ClassSectionFormGroup.reset();\n    this.gradingTermForm.reset();\n    this.TestsFormGroup.reset();\n    this.SubmitForm.reset();\n    this.initializeClassSectionForm();\n    this.closeAddPanel = false;\n    this.show = false;\n    this.disableSelect = false;\n    this.isUpdateData = false;\n    this.cloneEnable = false;\n    this.classSectionDisable = true;\n    this.gridData = [];\n    this.gradingTermTestGridData = [];\n    this.gradingTermTestDetails = [];\n    this.termId = null;\n    this.prepareGrid(null, this.displaygradeClassSectionCols, Messages.CLASSSECTION_TITLE, []);\n    if (this.classSectionForm !== undefined) {\n      this.classSectionForm.resetForm();\n    }\n    if (this.gradeTermDetailsForm !== undefined) {\n      this.gradeTermDetailsForm.resetForm();\n    }\n    if (this.testsForm !== undefined) {\n      this.testsForm.resetForm();\n    }\n    if (this.submitForm !== undefined) {\n      this.submitForm.resetForm();\n    }\n    this.radioOptions = 0;\n    this.gradingTermTestGrid();\n    this.initializeCloneGradingTermForm();\n    this.testFormValidation();\n    this.loadSchoolBoards();\n  }\n\n  testFormValidation(): void {\n    if (this.isContribution) {\n      this.TestsFormGroup.get('consideration').clearValidators();\n      this.TestsFormGroup.controls['consideration'].updateValueAndValidity();\n    } else {\n      this.TestsFormGroup.get('contribution').clearValidators();\n      this.TestsFormGroup.controls['contribution'].updateValueAndValidity();\n    }\n  }\n\n  // table row on select\n  onTableRowSelect(eventData: any): void {\n\n    this.gradeTermIds.push(eventData.id);\n    if (this.gradeTermIds.length > 0) {\n      this.isDeleteAllRequired = true;\n    }\n    else {\n      this.isDeleteAllRequired = false;\n    }\n  }\n\n  // table row unselect\n  onTableRowUnSelect(data: any): void {\n\n    const index = this.gradeTermIds.findIndex((value: any) => {\n      return value === value.id;\n    });\n    this.gradeTermIds.splice(index, 1);\n\n    if (this.gradeTermIds.length > 0) {\n      this.isDeleteAllRequired = true;\n    }\n    else {\n      this.isDeleteAllRequired = false;\n    }\n  }\n  // End\n\n  // select all records from table(delete)\n  selectAllData(data: any): void {\n    if (data.length > 0) {\n      this.isDeleteAllRequired = true;\n      data.forEach(element => {\n        this.gradeTermIds.push(data.id);\n      });\n    }\n    else {\n      this.gradeTermIds = [];\n      this.isDeleteAllRequired = false;\n    }\n  }\n  // End\n\n  // row-wise actions of the table(edit/delete)\n  rowActions(response: any): void {\n    if (response.operation === AppSettings.EDIT) {\n      const classSectionColumnList: string[] = ['boardId', 'classId', 'sectionsId'];\n      this.customClearValidation(this.ClassSectionFormGroup, classSectionColumnList);\n      this.customClearValidation(this.TestsFormGroup, this.contributionColumnList);\n      this.removedClassSectionIds = [];\n      this.removedTestTypeIds = [];\n      this.gradingTermTestDetails = [];\n      this.show = false;\n      this.isUpdateData = true;\n      this.closeAddPanel = false;\n      this.buttonDisable = true;\n      this.classSectionDisable = false;\n      this.idsToDisplay = response.clickedRow.id;\n      this._gradingTermConfigurationService.gradingTermConfigurationGradeTermGet(this.idsToDisplay).subscribe(res => {\n        this.gradeTermConfigurationById(res);\n      });\n    }\n\n    if (response.operation === AppSettings.DETAILS) {\n      this.closeAddPanel = false;\n      this.buttonDisable = true;\n      this.idsToDisplay = response.clickedRow.id;\n      this.router.navigate(\n        [URLConstants.GRADE_TERM_DETAILS + response.clickedRow.id]);\n    }\n\n    if (response.operation === AppSettings.DELETE) {\n      this.gridName = 'classSectionGrid';\n      this.deleteAll(response);\n    }\n    if (response.operation === AppSettings.CLONE) {\n      this.closeAddPanel = false;\n      this.gridName = 'classSectionGrid';\n      this.cloneGrade(response);\n    }\n  }\n  // to set GradingTerm data to form after edit click\n  gradeTermConfigurationById(termData: any): void {\n    this.initializeClassSectionForm(false);\n    this.disableNext = false;\n    this.isUpdateData = true;\n    const classSectionColumnList: string[] = ['boardId', 'classId', 'sectionsId'];\n    this.customClearValidation(this.ClassSectionFormGroup, classSectionColumnList);\n    const actionList = [{\n      name: AppSettings.DELETE_OPERATION,\n      icon: AppSettings.DELETE,\n      operationName: AppSettings.DELETE\n    },\n    {\n      name: AppSettings.CLONE_OPERATION,\n      icon: AppSettings.CLONE,\n      operationName: AppSettings.CLONE\n    }\n    ];\n    this.classSectionDisable = false;\n    this.termConfigurationData = termData.gradingTermConfigurationDataViewModel[0];\n    this.termClassSectionsData = termData.gradingTermConfigurationDataViewModel[0].gradingTermClassSectionViewModel;\n    this.termClassSectionsData.forEach(x => {\n      x.actions = actionList;\n    });\n    const sections = [];\n    for (const section of this.termClassSectionsData) {\n      sections.push(section.sectionsId);\n    }\n    const data = {\n      boardId: this.termClassSectionsData[0].boardId,\n      classId: this.termClassSectionsData[0].classId,\n      sectionId: sections\n    };\n    this.getPriorGradingTerms(data);\n    this.prepareGrid(this.termClassSectionsData, this.displaygradeClassSectionCols, Messages.CLASSSECTION_TITLE, this.classSectionGroupCriteria = ['schoolBoardName', 'className']);\n    this.gradingTermTestGridData = termData.gradingTermConfigurationDataViewModel[0].gradingTermTestViewModel;\n    this.TestsFormGroup.controls.testsStartDate.setValue(this.termConfigurationData.testsStartDate);\n\n    this.TestsFormGroup.controls.testsEndDate.setValue(this.termConfigurationData.testsEndDate);\n\n    this.gradingTermTestGridData.forEach(e => {\n      e.testTypeApiId = e.testTypeId;\n      e.otherGradingApiTermId = e.otherGradingTermId ? e.otherGradingTermId : null;\n      e.actions = actionList,\n        // tslint:disable-next-line: max-line-length\n        e.otherGradingTermId = this.commonService.defaultEmpty(this.commonService.selectedDropDownData(this.priorGradingTerms, e.otherGradingTermId)).label ? this.commonService.defaultEmpty(this.commonService.selectedDropDownData(this.priorGradingTerms, e.otherGradingTermId)).label : e.otherGradingTermName,\n\n        e.displayOption = this.commonService.defaultEmpty(this.commonService.selectedDropDownData(this.evaluationTypes, e.displayTypeId)).label,\n        e.testTypeId = e.testTypeName,\n        e.isexist = true,\n        e.isDisplayOnreportCard = this.commonService.defaultEmpty(this.commonService.selectedDropDownData(this.filterYesNo, e.isDisplayOnreportCard)).label,\n        e.marksGroupCriteriaId = this.commonService.defaultEmpty(this.commonService.selectedDropDownData(this.marksGroupCriteria, e.marksGroupCriteriaId)).label;\n\n    });\n\n    this.gradingTermTestGridData = this.gradingTermTestGridData.slice();\n\n    this.additionalColumnData = [];\n    if (this.termConfigurationData != null) {\n      this.gradingTermForm.patchValue(this.termConfigurationData);\n\n      this.isContribution = this.termConfigurationData.isContribution;\n      if (!this.isContribution) {\n        this.radioOptions = 0;\n        this.disableSelect = false;\n      }\n      else {\n        this.radioOptions = 1;\n        this.disableSelect = true;\n      }\n      this.reportsForm.patchValue(this.termConfigurationData);\n      for (const value of this.termConfigurationData.usedGradingTermAdditionalView) {\n        this.additionalColumnData.push(this.setAdditionalColumnData(value));\n      }\n      for (const value of this.termConfigurationData.forGradingTermAdditionalView) {\n        this.additionalColumnData.push(this.setAdditionalColumnData(value, true));\n      }\n\n      this.reportsForm.patchValue({\n        additionalColumns: this.additionalColumnData.length ? 1 : 0\n      });\n      if (this.reportsForm.value.additionalColumns) {\n        this.reportsForm.controls.usingGradingTermId.setValidators(Validators.required);\n        this.reportsForm.controls.title.setValidators([Validators.required, Validators.maxLength(45)]);\n        this.reportsForm.controls.contribution.setValidators([Validators.required, Validators.pattern(Pattern.DECIMAL_WITH_TWO_PRECISIONS)]);\n        this.reportsForm.updateValueAndValidity();\n      }\n      if (this.reportsForm.value.generateOverAllGrade === 1) {\n        this.reportsForm.controls.overALLGradeDisplayName.enable();\n      } else {\n        this.reportsForm.controls.overALLGradeDisplayName.disable();\n      }\n      this.termId = this.termConfigurationData.termId;\n    } else {\n      this.openSnackBar(termData.messages.ResultMessage);\n    }\n    this.gradingTermTestGrid();\n    this.stepper._steps._results.forEach((x) => {\n      x.interacted = true;\n    });\n    this.interactedStepperIndex = this.stepper._steps._results.length;\n  }\n  // End\n\n\n  deleteAll(response: any): void {\n    const dialogRef = this.dialog.open(CustomDialogComponent, {\n      disableClose: true,\n      data: { text: this.commonService.getTranslation(AppSettings.GRADE_DELETE_CONFIRM, ''), action: true, btn1Text: AppSettings.CANCEL, btn2Text: AppSettings.CONFIRM },\n    });\n\n    dialogRef.afterClosed().subscribe(action => {\n\n      if (action === AppSettings.CONFIRM) {\n        if (this.gridName === 'classSectionGrid') {\n          const idList: Array<string> = [];\n          idList.push(response.clickedRow.id);\n          this._gradingTermConfigurationService.removeGradingTerm(idList).subscribe((res: any) => this.deleteResponse(res), error => {\n            this.errorResponse(error);\n          });\n\n        } else if (this.gridName === 'contributionGrid') {\n          this.deleteMember(response);\n        }\n      }\n    });\n  }\n  // response after delete operation\n  deleteResponse(deleteResponse: any): void {\n    this.loagGradingTermdata();\n    this.openSnackBar(deleteResponse.messages.ResultMessage);\n  }\n\n  getPriorGradingTerms(data: any): void {\n    this.priorGradingTerms = [];\n    this._gradingTermConfigurationService.fetchGradingTermsByBoardId(data.boardId, data.classId, data.sectionId).subscribe(response => {\n      this.priorGradingTerms = [];\n      if (response.listViews != null) {\n        if (response.listViews.length) {\n          response.listViews.forEach(element => {\n            if (this.priorGradingTerms.findIndex(ele => ele.value === element.id) === -1) {\n              this.priorGradingTerms.push({\n                label: element.name,\n                value: element.id\n              });\n            }\n          });\n        }\n      }\n    });\n\n  }\n\n  getMarksGroupCriteria(): void {\n    this.marksGroupCriteria = [];\n    this._gradingTermConfigurationService.fetchMarksGroupCriteria().subscribe(response => {\n      if (response.listViews != null) {\n        if (response.listViews.length) {\n          response.listViews.forEach(element => {\n            this.marksGroupCriteria.push({\n              label: element.name,\n              value: element.id\n            });\n          });\n        }\n      }\n    });\n\n  }\n\n  getTestTypes(): void {\n    this.testTypes = [];\n    this._gradingTermConfigurationService.fetchTestTypes().subscribe(response => {\n      if (response.listViews != null) {\n        if (response.listViews.length) {\n          response.listViews.forEach(element => {\n            this.testTypes.push({\n              label: element.name,\n              value: element.id\n            });\n          });\n        }\n      }\n    });\n\n  }\n\n  yesNoList(): void {\n    this.filterYesNo = [];\n    this.filterYesNo.push({\n      label: 'Yes',\n      value: 1\n    });\n    this.filterYesNo.push({\n      label: 'No',\n      value: 0\n    });\n  }\n\n  getEvaluationTypeList(): void {\n    this.evaluationTypes = [];\n    this._gradingTermConfigurationService.evaluationTypes().subscribe(response => {\n      if (response.listViews != null) {\n        if (response.listViews.length) {\n          response.listViews.forEach(element => {\n            this.evaluationTypes.push({\n              label: element.name,\n              value: element.id\n            });\n          });\n        }\n      }\n    });\n  }\n\n  // Get Classes to filter table data\n  getClassesList(data: any): void {\n    this.classDisabled = false;\n    this.classNames = [];\n    this.ClassSectionFormGroup.controls['classId'].patchValue(null);\n    this._classSectionService.schoolAcademicClasses(data.value).subscribe(response => {\n      if (response.listViews && response.listViews.length) {\n        response.listViews.forEach(element => {\n          this.classNames.push({\n            label: element.name,\n            value: element.id\n          });\n        });\n      }\n    }, error => {\n      this.errorResponse(error);\n    });\n  }\n\n  // on selection of class\n  onSelectClass(data: any): void {\n    this.clearGradeTermSection();\n    this.sectionDisabled = true;\n    this.gradeClassSectionViewModel.classId = data.value;\n    this.ClassSectionFormGroup.controls['sectionsId'].patchValue(null);\n    this._classSectionService.schoolAcademicClassSections(this.ClassSectionFormGroup.value.boardId, data.value).subscribe(response => {\n      if (response.listViews.length) {\n        this.sectionDisabled = false;\n        response.listViews.forEach(element => {\n          this.sectionNamesList.push({\n            label: element.name,\n            value: element.id\n          });\n        });\n\n        this.sectionNames = { multiSelect: true, placeholder: 'Section', data: this.sectionNamesList, noEntryFoundLabel: AppSettings.NODATA_FOUND, isRequired: true };\n      }\n    });\n  }\n  // End\n\n\n  onCancel(): void {\n\n    this.stepper.reset();\n    this.ClassSectionFormGroup.reset();\n    this.gradingTermForm.reset();\n    this.SubmitForm.reset();\n    this.classSectionForm.resetForm();\n    this.gradeTermDetailsForm.resetForm();\n    this.closeAddPanel = true;\n    this.gridData = [];\n    this.clearGradeTermSection();\n    this.isUpdateData = false;\n    this.prepareGrid(null, this.displaygradeClassSectionCols, Messages.CLASSSECTION_TITLE, []);\n    this.gradingTermTestGrid();\n    this.classNames = [];\n    this.sectionNamesList = [];\n    this.classDisabled = true;\n    this.cloneEnable = false;\n    if (this.gradingTermForm.value.generateReportCard === 1) {\n      this.TestsFormGroup.reset();\n      this.reportsForm.reset();\n      this.testsForm.resetForm();\n    }\n  }\n\n  // on selection of class\n  onSelectSection(data: any): void {\n    this.gradeClassSectionViewModel.sectionId = [];\n    data.forEach(element => {\n      this.gradeClassSectionViewModel.sectionId.push(element.value);\n    });\n    this.getGradingTermByclassSection(this.gradeClassSectionViewModel);\n    this.getPriorGradingTerms(this.gradeClassSectionViewModel);\n  }\n  getGradingTermByclassSection(data): void {\n    this._gradingTermConfigurationService.gradingTermConfigurationGradingTermsByClassSectionGet(data.boardId, data.classId,\n      data.sectionId, data.pageNumber,\n      data.pageSize).subscribe(res => this.loagGradingTermdataBySection(res));\n  }\n  loagGradingTermdataBySection(data: any): void {\n    this.gradeClassSectionData = [];\n    if (data.gradeTermList != null) {\n      data.gradeTermList.list.forEach(e => {\n        e.termStartDate = (e.termStartDate == null) ? null : this.commonService.customDateFormat(e.termStartDate, this.getSchoolDateFormat()).date;\n        e.termEndDate = (e.termEndDate == null) ? null : this.commonService.customDateFormat(e.termEndDate, this.getSchoolDateFormat()).date;\n      });\n      this.gradeClassSectionData = data.gradeTermList.list;\n    }\n    this.prepareGrid(this.gradeClassSectionData, this.gradeClassSectionCols, Messages.GRADE_TERM_CLASSSECTION_TITLE.toUpperCase(),\n      this.classSectionGroupCriteria = ['name', 'boardName', 'className']);\n  }\n\n  onSelectTestData(form: GradingTermTestViewModel): void {\n    if (!this.isContribution) {\n      this.testFormValidation();\n      let considerFormData = false;\n      this.show = false;\n      this.TestsFormGroup.controls.stepperController.setValue(true);\n      const index = this.gradingTermTestGridData.findIndex(e => e.testTypeApiId === form.testTypeId && e.otherGradingApiTermId === form.otherGradingTermId);\n      if (this.isValidFormFields() && index === -1) {\n        considerFormData = true;\n        if (!this.isContribution && form.consideration != null && form.consideration.toString() !== '') {\n          this.disableNext = false;\n          const recordId = this.gradingTermTestGridData.length + 1;\n          this.gradingTermTestDetails.push({\n            id: recordId,\n            testTypeId: form.testTypeId,\n            contribution: form.contribution,\n            marksGroupCriteriaId: form.marksGroupCriteriaId,\n            isDisplayOnreportCard: form.isDisplayOnreportCard,\n            otherGradingTermId: form.otherGradingTermId,\n            marksGroupCriteriaCount: form.marksGroupCriteriaCount,\n            displayOption: form.displayOption,\n            schoolBoardId: form.schoolBoardId,\n            consideration: form.consideration\n          });\n\n\n          this.gradingTermTestGridData.push({\n            testTypeApiId: form.testTypeId,\n            otherGradingApiTermId: form.otherGradingTermId ? form.otherGradingTermId : null,\n            id: recordId,\n            contribution: form.contribution,\n            marksGroupCriteriaCount: form.marksGroupCriteriaCount,\n            testTypeId: (this.commonService.selectedDropDownData(this.testTypes, form.testTypeId)).label,\n            marksGroupCriteriaId: (this.commonService.selectedDropDownData(this.marksGroupCriteria, form.marksGroupCriteriaId)).label,\n            isDisplayOnreportCard: (this.commonService.selectedDropDownData(this.filterYesNo, form.isDisplayOnreportCard)).label,\n            otherGradingTermId: this.commonService.defaultEmpty(this.commonService.selectedDropDownData(this.priorGradingTerms, form.otherGradingTermId)).label,\n            displayOption: (this.commonService.selectedDropDownData(this.evaluationTypes, form.displayOption)).label,\n            consideration: form.consideration,\n          });\n          this.gradingTermTestGridData = this.gradingTermTestGridData.slice();\n          this.customResetForm(this.TestsFormGroup, this.contributionColumnList);\n          this.TestsFormGroup.controls.otherGradingTermId.reset();\n          this.testsForm.submitted = false;\n          this.stepper._steps._results[this.stepper.selectedIndex].interacted = false;\n        }\n      } else if (index > -1) {\n        if (form.otherGradingTermId) {\n          this.openSnackBar('Prior Term and Test Type Already exist', true);\n        } else {\n          this.openSnackBar('Test Type Already exist', true);\n        }\n      }\n      this.gradingTermTestGrid();\n    }\n  }\n\n  getTestOptional(): boolean {\n    if (!this.isContribution) {\n      const considerationPercentage = parseInt(this.gradingTermTestGridData.reduce((acc, data) => parseInt(acc, 10) + parseInt(data.consideration, 10), 0), 10);\n      if (considerationPercentage > 0 && this.checkIfDateIsValid()) {\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      const contributionnPercentage = parseInt(this.gradingTermTestGridData.reduce((acc, data) => parseInt(acc, 10) + parseInt(data.contribution, 10), 0), 10);\n      if (contributionnPercentage && contributionnPercentage === 100 && this.checkIfDateIsValid()) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n  }\n  checkIfDateIsValid(): boolean {\n    return true;\n  }\n  isNestedObjectEmpty(obj, checkKey: any = false): boolean {\n    let isEmpty = true;\n    for (const key in obj) {\n      if (checkKey && key === checkKey) {\n        continue;\n      }\n      if (obj[key] !== null && obj[key] !== '') {\n        if (typeof (obj[key]) === 'object') {\n          isEmpty = this.isNestedObjectEmpty(obj[key]);\n        } else {\n          return false;\n        }\n      }\n    }\n    return isEmpty;\n  }\n  onSelect(form: GradingTermTestViewModel): void {\n    const index = this.gradingTermTestGridData.findIndex(e => e.testTypeApiId === form.testTypeId && e.otherGradingApiTermId === form.otherGradingTermId);\n\n    this.customSetValidation(this.TestsFormGroup, this.contributionColumnList);\n\n    if (+this.TestsFormGroup.value.marksGroupCriteriaId === 1) {\n      this.TestsFormGroup.controls['marksGroupCriteriaCount'].setValidators([Validators.pattern(Pattern.NUMBER_PATTERN), Validators.required,\n      Validators.min(1), Validators.max(100)]);\n    } else {\n      this.TestsFormGroup.controls['marksGroupCriteriaCount'].clearValidators();\n    }\n    this.TestsFormGroup.controls['marksGroupCriteriaCount'].updateValueAndValidity();\n    this.TestsFormGroup.controls['contribution'].setValidators([Validators.pattern(Pattern.DECIMAL_WITH_TWO_PRECISIONS), Validators.required]);\n\n    this.testFormValidation();\n\n    if (!this.isContribution) {\n      this.onSelectTestData(form);\n      const considerationPercentage = parseInt(this.gradingTermTestGridData.reduce((acc, data) => parseInt(acc, 10) + parseInt(data.consideration, 10), 0), 10);\n      if (considerationPercentage > 0) {\n        this.stepper._steps._results[this.stepper.selectedIndex].interacted = false;\n        this.TestsFormGroup.get('stepperController').setValue(true);\n      }\n    } else {\n      this.customSetValidation(this.TestsFormGroup, this.contributionColumnList);\n\n      if (+this.TestsFormGroup.value.marksGroupCriteriaId === 1) {\n        this.TestsFormGroup.controls['marksGroupCriteriaCount'].setValidators([Validators.pattern(Pattern.NUMBER_PATTERN), Validators.required,\n        Validators.min(1), Validators.max(100)]);\n      } else {\n        this.TestsFormGroup.controls['marksGroupCriteriaCount'].clearValidators();\n      }\n      this.TestsFormGroup.controls['marksGroupCriteriaCount'].updateValueAndValidity();\n      this.TestsFormGroup.controls['contribution'].setValidators([Validators.pattern(Pattern.DECIMAL_WITH_TWO_PRECISIONS), Validators.required]);\n\n      this.testFormValidation();\n      const contributionnPercentage = parseInt(this.gradingTermTestGridData.reduce((acc, data) => parseInt(acc, 10) + parseInt(data.contribution, 10), 0), 10);\n      let totalContributionnPercentage = contributionnPercentage;\n      let considerFormData = false;\n      this.show = false;\n      this.TestsFormGroup.controls.stepperController.setValue(true);\n      if (this.isValidFormFields() && index === -1) {\n        if (form.contribution != null && form.contribution.toString() !== '') {\n          totalContributionnPercentage = totalContributionnPercentage + parseInt(form.contribution.toString(), 10);\n          considerFormData = true;\n        }\n        if (totalContributionnPercentage !== 100) {\n          this.show = true;\n        } else {\n          this.show = false;\n        }\n\n        if (totalContributionnPercentage <= 100 && considerFormData) {\n          const recordId = this.gradingTermTestGridData.length + 1;\n\n          this.gradingTermTestDetails.push({\n            id: recordId,\n            testTypeId: form.testTypeId,\n            contribution: form.contribution,\n            marksGroupCriteriaId: form.marksGroupCriteriaId,\n            isDisplayOnreportCard: form.isDisplayOnreportCard,\n            otherGradingTermId: form.otherGradingTermId,\n            marksGroupCriteriaCount: form.marksGroupCriteriaCount,\n            displayOption: form.displayOption,\n            schoolBoardId: form.schoolBoardId,\n            consideration: form.consideration\n          });\n\n          this.gradingTermTestGridData.push({\n            testTypeApiId: form.testTypeId,\n            otherGradingApiTermId: form.otherGradingTermId ? form.otherGradingTermId : null,\n            id: recordId,\n            contribution: form.contribution,\n            marksGroupCriteriaCount: form.marksGroupCriteriaCount,\n            testTypeId: (this.commonService.selectedDropDownData(this.testTypes, form.testTypeId)).label,\n            marksGroupCriteriaId: (this.commonService.selectedDropDownData(this.marksGroupCriteria, form.marksGroupCriteriaId)).label,\n            isDisplayOnreportCard: (this.commonService.selectedDropDownData(this.filterYesNo, form.isDisplayOnreportCard)).label,\n            otherGradingTermId: this.commonService.defaultEmpty(this.commonService.selectedDropDownData(this.priorGradingTerms, form.otherGradingTermId)).label,\n            displayOption: (this.commonService.selectedDropDownData(this.evaluationTypes, form.displayOption)).label,\n            consideration: form.consideration,\n          });\n\n          this.gradingTermTestGridData = this.gradingTermTestGridData.slice();\n          this.customResetForm(this.TestsFormGroup, this.contributionColumnList);\n          this.TestsFormGroup.controls.otherGradingTermId.reset();\n          this.testsForm.submitted = false;\n          this.stepper._steps._results[this.stepper.selectedIndex].interacted = false;\n          this.customClearValidation(this.TestsFormGroup, this.contributionColumnList);\n        } else if (totalContributionnPercentage > 100) {\n          this.show = true;\n        } else {\n          if (!this.gradingTermTestGridData.length && !this.gradingTermTestDetails.length) {\n            this.TestsFormGroup = new FormGroup({\n              otherGradingTermId: new FormControl(null),\n              testTypeId: new FormControl('', [Validators.required]),\n              contribution: new FormControl(null, [Validators.pattern(Pattern.DECIMAL_WITH_TWO_PRECISIONS)]),\n              displayOption: new FormControl('', [Validators.required]),\n              marksGroupCriteriaId: new FormControl('', [Validators.required]),\n              marksGroupCriteriaCount: new FormControl('', [Validators.required, Validators.pattern(Pattern.NUMBER_PATTERN), Validators.min(1), Validators.max(100)]),\n              isDisplayOnreportCard: new FormControl('', [Validators.required]),\n              consideration: new FormControl(null, [, Validators.required, Validators.pattern(Pattern.DECIMAL_WITH_TWO_PRECISIONS)]),\n              stepperController: new FormControl(null, [Validators.required]),\n            });\n          }\n        }\n\n        if (totalContributionnPercentage === 100) {\n          this.disableNext = false;\n          this.disableSelect = true;\n          this.TestsFormGroup.setErrors(null);\n          this.customClearValidation(this.TestsFormGroup, this.contributionColumnList);\n          this.stepper._steps._results[this.stepper.selectedIndex].interacted = false;\n          this.TestsFormGroup.get('stepperController').setValue(true);\n        }\n        else if (totalContributionnPercentage > 100) {\n          this.TestsFormGroup.setErrors({ required: true });\n          this.show = true;\n        } else {\n          this.TestsFormGroup.setErrors({ required: true });\n        }\n\n      } else {\n        if (index > -1) {\n          this.openSnackBar('A Test Type can be selected only once in a Grading Term.', true);\n        }\n        this.TestsFormGroup.controls.stepperController.setValue(null);\n      }\n      this.gradingTermTestGrid();\n    }\n  }\n\n  customClearValidation(form: FormGroup, columnList: string[]): void {\n    columnList.map(element => {\n      form.get(element).clearValidators();\n      form.controls[element].updateValueAndValidity();\n    });\n  }\n\n  customSetValidation(form: FormGroup, columnList: string[]): void {\n    columnList.map(element => {\n      if (element === 'consideration' || element === 'contribution') {\n        form.get(element).setValidators([Validators.required, Validators.min(1), Validators.pattern(Pattern.DECIMAL_WITH_TWO_PRECISIONS), Validators.max(999.99)]);\n        form.controls[element].updateValueAndValidity();\n      } else {\n        form.get(element).setValidators([Validators.required]);\n        form.controls[element].updateValueAndValidity();\n      }\n    });\n    this.testFormValidation();\n  }\n\n  deleteMember(operation: any): void {\n    const id = operation.clickedRow.id;\n    if (this.gradingTermTestGridData.find(g => g.id === id && g.isexist === true)) {\n      this.removedTestTypeIds.push(id);\n    }\n    this.gradingTermTestGridData = this.gradingTermTestGridData.filter(x => x.id !== id).slice();\n    this.gradingTermTestDetails = this.gradingTermTestDetails.filter(x => x.id !== id).slice();\n    const contributionnPercentage = parseInt(this.gradingTermTestGridData.reduce((acc, data) => parseInt(acc, 10) + parseInt(data.contribution, 10), 0), 10);\n    if (this.isContribution && contributionnPercentage !== 100) {\n      this.disableNext = true;\n      this.disableSelect = false;\n      this.TestsFormGroup.controls.stepperController.setValue(null);\n      this.show = true;\n    }\n    else {\n      if (this.gradingTermTestGridData.length > 0) {\n        this.TestsFormGroup.controls.stepperController.setValue(true);\n        this.show = false;\n        this.disableNext = false;\n      } else {\n        this.disableNext = true;\n        this.TestsFormGroup.controls.stepperController.setValue(null);\n      }\n    }\n    this.gradingTermTestGrid();\n  }\n\n\n  deleteClassMember(data: any): void {\n    const id = data.clickedRow.id;\n    if (this.termClassSectionsData.length === 1) {\n      this.openSnackBar(Messages.ATLEAST_ONE_CLASS_SECTION_REQUIRED, true);\n    }\n    else if (this.termClassSectionsData.find(g => g.id === id)) {\n      this.removedClassSectionIds.push(id);\n      this.termClassSectionsData = this.termClassSectionsData.filter(x => x.id !== id).slice();\n      this.prepareGrid(this.termClassSectionsData, this.displaygradeClassSectionCols, Messages.CLASSSECTION_TITLE.toUpperCase(), this.classSectionGroupCriteria =\n        ['boardCode', 'className']);\n    }\n  }\n\n  prepareGrid(data: Array<any>, columsArray: any[], title: string, groupCriteria: any): void {\n    this.gridTitle = title;\n    this.gridData = data;\n    this.gridColumsArray = columsArray;\n    this.gridColums = this.gridColumsArray.map(x => x.field);\n\n    this.appliedClassSection = {\n      tablename: this.gridTitle,\n      rows: this.gridData,\n      columns: this.gridColumsArray,\n      hideHeader: true,\n      rowGroupingColumns: groupCriteria\n    };\n  }\n  gradingTermTestGrid(): void {\n    this.gradingTermTestGridSettings = {\n      rows: this.gradingTermTestGridData,\n      columns: this.contributionGridHeaderData.filter(e => (this.isContribution ? e.field !== 'consideration' : e.field !== 'contribution')),\n      hideHeader: true,\n      tabTable: true,\n      padding: true\n    };\n  }\n\n  cloneGradingContributionGrid(): void {\n    this.cloneGradingTermContributionSettings = {\n      rows: this.gradingTermTestGridData,\n      columns: this.cloneContributionGridHeaderData,\n      hideHeader: true,\n      padding: true\n    };\n  }\n\n\n  cloneGrade(data: any): void {\n\n    this.cloneEnable = true;\n    this._gradingTermConfigurationService.gradingTermConfigurationGradeTermGet(data.clickedRow.id).subscribe(res => {\n      this.cloneGradeTermConfigurationById(res);\n    });\n  }\n\n  onSchoolBoardSelect(data: any): void {\n    this.clearGradeTermSection();\n    this.classNames = [];\n    this.sectionDisabled = true;\n    this.classDisabled = true;\n    this.getClassesList(data);\n    this.priorGradingTerms = [];\n    this.gradeClassSectionViewModel.boardId = data.value;\n  }\n\n  onCloneGradingTermSelect(id: any): void {\n    this.cloneDisable = true;\n    this.initializeCloneGradingTermForm();\n    this.cloneClasses = [];\n    this.clearCloneSection();\n    this._gradingTermConfigurationService.gradingTermConfigurationFetchClassesByGradingtermidGet(id).subscribe(res => {\n      if (res.listViews != null) {\n        this.cloneDisable = false;\n        res.listViews.map(x => {\n          this.cloneClasses.push({ value: x.id, label: x.name });\n        });\n      } else {\n        this.gradingTermsExceeded = res.messages.ResultMessage;\n      }\n    }, error => {\n      this.gradingTermsExceeded = error.messages.ResultMessage;\n    });\n  }\n\n  onClassSelect(data: any): void {\n    this.disableCloneSection = true;\n    this.clearCloneSection();\n    this.cloneFormGroup.controls['cloneSectionId'].patchValue(null);\n    this._gradingTermConfigurationService.gradingTermConfigurationFetchSectionsByClassidAndGradingtermidGet(data.value, this.cloneGradingTermId).subscribe(res => {\n      if (res.listViews != null) {\n\n        this.disableCloneSection = false;\n        res.listViews.map(x => {\n          this.cloneSectionNamesList.push({ value: x.id, label: x.name });\n        });\n      }\n      this.cloneSections = { multiSelect: true, placeholder: 'Section', data: this.cloneSectionNamesList, noEntryFoundLabel: AppSettings.NODATA_FOUND, isRequired: true };\n    });\n  }\n\n  cloneGradeTermConfigurationById(termData: any): void {\n\n    this.cloneSectionNamesList = [];\n    this.cloneClasses = [];\n    this.disableCloneSection = true;\n    this.gradingTermsExceeded = '';\n    this.cloneGradingTermId = termData.gradingTermConfigurationDataViewModel[0].id;\n    this.onCloneGradingTermSelect(termData.gradingTermConfigurationDataViewModel[0].id);\n    this.termConfigurationData = termData.gradingTermConfigurationDataViewModel[0];\n    if (this.termConfigurationData != null) {\n      this.termConfigurationData.termStartDate = (this.termConfigurationData.termStartDate == null) ?\n        null : this.commonService.customDateFormat(this.termConfigurationData.termStartDate, this.getSchoolDateFormat()).date;\n      this.termConfigurationData.termEndDate = (this.termConfigurationData.termEndDate == null) ?\n        null : this.commonService.customDateFormat(this.termConfigurationData.termEndDate, this.getSchoolDateFormat()).date;\n      this.termConfigurationData.testsStartDate = (this.termConfigurationData.testsStartDate == null) ?\n        null : this.commonService.customDateFormat(this.termConfigurationData.testsStartDate, this.getSchoolDateFormat()).date;\n      this.termConfigurationData.testsEndDate = (this.termConfigurationData.testsEndDate == null) ?\n        null : this.commonService.customDateFormat(this.termConfigurationData.testsEndDate, this.getSchoolDateFormat()).date;\n      this.termConfigurationData.generateOverAllGrade = this.commonService.defaultEmpty(this.commonService.selectedDropDownData\n        (this.filterYesNo, this.termConfigurationData.generateOverAllGrade)).label;\n      this.termConfigurationData.generateReportCard = this.commonService.defaultEmpty(this.commonService.selectedDropDownData\n        (this.filterYesNo, this.termConfigurationData.generateReportCard)).label;\n      this.termConfigurationData.evaluationTypeId = this.commonService.defaultEmpty(this.commonService.selectedDropDownData\n        (this.evaluationTypes, this.termConfigurationData.evaluationTypeId)).label;\n    }\n\n    this.termClassSectionsData = termData.gradingTermConfigurationDataViewModel[0].gradingTermClassSectionViewModel;\n    this.gradingTermTestGridData = JSON.parse(JSON.stringify(termData.gradingTermConfigurationDataViewModel[0].gradingTermTestViewModel));\n\n    this.gradingTermTestGridData.forEach(e => {\n      e.testTypeApiId = e.testTypeId,\n      e.otherGradingApiTermId = e.otherGradingTermId ? e.otherGradingTermId : null,\n      e.otherGradingTermId = e.otherGradingTermName,\n        e.testTypeId = this.commonService.defaultEmpty(this.commonService.selectedDropDownData(this.testTypes, e.testTypeId)).label,\n        e.isDisplayOnreportCard = this.commonService.defaultEmpty(this.commonService.selectedDropDownData(this.filterYesNo, e.isDisplayOnreportCard)).label,\n        e.marksGroupCriteriaId = this.commonService.defaultEmpty(this.commonService.selectedDropDownData(this.marksGroupCriteria, e.marksGroupCriteriaId)).label,\n        e.isexist = true;\n    });\n    this.gradingTermTestGridData = this.gradingTermTestGridData.slice();\n    this.cloneGradingContributionGrid();\n    this.scrollIntoViewById('clone-form');\n  }\n  // End\n\n  clonePost(data: any): void {\n\n    this.cloneGradingTermDetails = {};\n    if (this.cloneFormGroup.status === AppSettings.VALID) {\n      this.isUpdateData = false;\n      this.classSectionDetails = [];\n      this.cloneGradingTermDetails.classId = data.cloneClassId;\n      this.cloneGradingTermDetails.sectionsId = data.cloneSectionId.map(element => {\n        return element.value;\n      });\n      this.cloneGradingTermDetails.gradingTermId = this.cloneGradingTermId;\n\n      this._gradingTermConfigurationService.gradingTermConfigurationCloneGradingTermPost(this.cloneGradingTermDetails)\n        .subscribe(res => this.addorUpdateResponse(res), error => {\n          this.errorResponse(error);\n        });\n\n    } else {\n      this.isCloneFormValid = true;\n      this.cloneEnable = true;\n    }\n  }\n\n  onCloneCancel(): void {\n\n    this.closeAddPanel = true;\n    this.cloneEnable = false;\n    this.clearCloneSection();\n    this.cloneClasses = [];\n    this.disableCloneSection = true;\n    if (this.cloneGradingTermForm !== undefined) {\n      this.cloneGradingTermForm.reset();\n      this.cloneGradingTermForm.resetForm();\n    }\n    const cloneGradeColumnList: string[] = ['cloneClassId', 'cloneSectionId'];\n    this.customClearValidation(this.cloneFormGroup, cloneGradeColumnList);\n    this.scrollIntoViewById('app-table-grading-terms');\n  }\n\n  loadSchoolBoards(): void {\n    this.schoolBoards = [];\n    this.gradeSetupService.schoolAcademicBoards().subscribe(res => {\n      if (res.listViews !== undefined && res.listViews.length) {\n        this.isSchoolBoards = true;\n        this.classDisabled = true;\n        res.listViews.forEach(element => {\n          this.schoolBoards.push({\n            label: element.name,\n            value: element.id\n          });\n        });\n        this.setDefaultBoard();\n      } else {\n        this.isSchoolBoards = false;\n        this.classDisabled = false;\n        this.classNames = [];\n        this._classSectionService.schoolAcademicClasses().subscribe(response => {\n          if (response.listViews != null) {\n            if (response.listViews.length) {\n              this.classDisabled = false;\n              response.listViews.forEach(element => {\n                this.classNames.push({\n                  label: element.name,\n                  value: element.id\n                });\n              });\n            }\n          }\n        }, error => {\n          this.errorResponse(error);\n        });\n      }\n    }, error => {\n      this.errorResponse(error);\n    });\n  }\n  clearCloneSection(): void {\n    this.cloneSections = null;\n    this.cloneSectionNamesList = [];\n  }\n\n  clearGradeTermSection(): void {\n    this.sectionNames = null;\n    this.sectionNamesList = [];\n  }\n  OnSelectionChange(event): void {\n    if (event.selectedIndex > this.interactedStepperIndex) {\n      this.interactedStepperIndex = event.selectedIndex;\n    } else {\n      this.stepper._steps._results.forEach((x, i) => {\n        x.interacted = i < this.interactedStepperIndex ? true : false;\n      });\n    }\n    if (event.selectedIndex === 2) {\n      if (this.testsForm) {\n        this.testsForm.submitted = false;\n      }\n      this.stepper._steps._results[event.selectedIndex].interacted = false;\n    } else if (event.selectedIndex === 3) {\n      this.stepper._steps._results[event.selectedIndex].interacted = false;\n      this.reportsForm.controls.contribution.markAsUntouched();\n      this.reportsForm.controls.usingGradingTermId.markAsUntouched();\n      this.reportsForm.controls.title.markAsUntouched();\n      this.reportsForm.controls.usingGradingTermId.updateValueAndValidity();\n      this.reportsForm.updateValueAndValidity();\n    }\n  }\n\n  onChangeContribution(event): void {\n    // this.onchangeEventOfGrading(event);\n    if (this.gradingTermTestGridData.length) {\n      const dialogRef = this.dialog.open(CustomDialogComponent, {\n        disableClose: true,\n        data: { text: this.commonService.getTranslation(AppSettings.GRADE_CHANGETOCONTRIBUTION, ''), action: true, btn1Text: AppSettings.NO, btn2Text: AppSettings.YES },\n      });\n\n      dialogRef.afterClosed().subscribe(action => {\n        if (action === AppSettings.YES) {\n          this.onchangeEventOfGrading(event);\n        } else {\n          this.radioOptions = this.radioOptions ? 0 : 1;\n          this.changeDetecor.detectChanges();\n        }\n      });\n    } else {\n      this.onchangeEventOfGrading(event);\n    }\n  }\n  onchangeEventOfGrading(event): void {\n    this.customResetForm(this.TestsFormGroup, this.contributionColumnList);\n    this.TestsFormGroup.controls.otherGradingTermId.reset();\n    this.testsForm.submitted = false;\n    this.stepper._steps._results[this.stepper.selectedIndex].interacted = false;\n    if (this.isUpdateData) {\n      this.gradingTermTestGridData.forEach((element: any) => {\n        if (element.isexist === true) {\n          this.removedTestTypeIds.push(element.id);\n        }\n      });\n    }\n    this.gradingTermTestGridData = [];\n    this.gradingTermTestDetails = [];\n    this.isContribution = event === AppSettings.Default_Contribution ? true : false;\n    this.gradingTermTestGrid();\n    this.disableNext = true;\n    this.disableSelect = false;\n    this.show = false;\n  }\n  manageTestFormValidation(condition = false): void {\n    if (!condition) {\n\n      this.TestsFormGroup.get('stepperController').clearValidators();\n      this.TestsFormGroup.controls['stepperController'].updateValueAndValidity();\n    } else {\n      this.TestsFormGroup.controls['stepperController'].setValidators([Validators.required]);\n    }\n\n  }\n  onSelectMarksGroupCriteria(event): void {\n    this.TestsFormGroup.controls.marksGroupCriteriaCount.setValue(null);\n    if (event.value === 1) {\n      // tslint:disable-next-line: max-line-length\n      this.markGroupRequired = true;\n      this.TestsFormGroup.controls.marksGroupCriteriaCount.setValidators([\n        Validators.required, Validators.pattern(Pattern.NUMBER_PATTERN), Validators.min(1), Validators.max(100)]);\n    } else {\n      this.TestsFormGroup.controls.marksGroupCriteriaCount.clearValidators();\n      this.markGroupRequired = false;\n    }\n    this.TestsFormGroup.controls.marksGroupCriteriaCount.updateValueAndValidity();\n  }\n\n  setDefaultBoard(): void {\n    this.setFormControl('ClassSectionFormGroup', 'boardId', this.schoolBoards[0].value);\n    this.onSchoolBoardSelect(this.schoolBoards[0]);\n  }\n  onAdditionalColumnSelect(event): void {\n    this.additionalColumnData = [];\n    if (event.value) {\n      this.reportsForm.controls.usingGradingTermId.setValidators(Validators.required);\n      this.reportsForm.controls.title.setValidators([Validators.required, Validators.maxLength(45)]);\n      // tslint:disable-next-line: max-line-length\n      this.reportsForm.controls.contribution.setValidators([Validators.required, Validators.pattern(Pattern.DECIMAL_WITH_TWO_PRECISIONS), Validators.min(1), Validators.max(100)]);\n      this.reportsForm.updateValueAndValidity();\n      this.stepper.selected.interacted = false;\n    } else {\n      this.reportsForm.controls.usingGradingTermId.clearValidators();\n      this.reportsForm.controls.title.clearValidators();\n      this.reportsForm.controls.contribution.clearValidators();\n      this.reportsForm.updateValueAndValidity();\n    }\n    this.onClear(true);\n  }\n  onChangeThisTerm(event): void {\n    if (event.checked) {\n      this.reportsForm.controls.usingGradingTermId.clearValidators();\n    } else {\n      this.reportsForm.controls.usingGradingTermId.setValidators(Validators.required);\n    }\n    this.reportsForm.controls.usingGradingTermId.setValue(null);\n    this.reportsForm.updateValueAndValidity();\n  }\n  validateAdditionalForm(): boolean {\n    if ((this.reportsForm.controls.usingGradingTermId.valid || this.reportsForm.controls.isPresentGradingTerm.value) && this.reportsForm.controls.contribution.valid &&\n      this.reportsForm.controls.title.valid) {\n      let contributuon = 0;\n      this.additionalColumnData.forEach(e => contributuon += +e.contribution);\n      contributuon += +this.reportsForm.value.contribution;\n      if (contributuon > 100) {\n        this.openSnackBar('Overall Contribution Should not exceeds 100%', true);\n      } else {\n        return true;\n      }\n    } else {\n      return false;\n    }\n  }\n  onSelectAdditionColumns(): void {\n    if (this.validateAdditionalForm()) {\n      this.additionalColumnData.push(this.setAdditionalColumnData(this.reportsForm.value));\n      this.reportsForm.controls.usingGradingTermId.setValidators(Validators.required);\n      this.onClear();\n    } else {\n      this.reportsForm.controls.contribution.markAsTouched();\n      this.reportsForm.controls.usingGradingTermId.markAsTouched();\n      this.reportsForm.controls.title.markAsTouched();\n      this.reportsForm.updateValueAndValidity();\n    }\n    this.updateStepperController();\n  }\n  setAdditionalColumnData(value, isPresentGradingTerm = false): any {\n    return {\n      id: value.id,\n      title: value.title,\n      usingGradingTermId: value.usingGradingTermId,\n      isPresentGradingTerm: isPresentGradingTerm ? isPresentGradingTerm : value.isPresentGradingTerm,\n      isVisible: value.isVisible,\n      contribution: value.contribution,\n      forGradingTermId: value.forGradingTermId ? value.forGradingTermId : null,\n      isGrandTotalColumn: 0\n    };\n  }\n  onClear(fromAdditionalChange = false): void {\n    this.reportsForm.patchValue({\n      title: null,\n      contribution: null,\n      usingGradingTermId: null,\n      isPresentGradingTerm: false,\n      isVisible: true\n    });\n    this.reportsForm.controls.contribution.markAsUntouched();\n    this.reportsForm.controls.usingGradingTermId.markAsUntouched();\n    this.reportsForm.controls.title.markAsUntouched();\n    this.reportsForm.controls.usingGradingTermId.updateValueAndValidity();\n    this.reportsForm.updateValueAndValidity();\n    if (!fromAdditionalChange) {\n      this.stepper.selected.interacted = false;\n    }\n    this.changeDetecor.detectChanges();\n  }\n  onDeleteAdditionalColumn(i): void {\n    this.additionalColumnData.splice(i, 1);\n    this.updateStepperController();\n  }\n  updateStepperController(): void {\n    this.totalContribution = 0;\n    this.additionalColumnData.map(e => this.totalContribution += +e.contribution);\n    if (this.reportsForm.value.additionalColumns === 1 ? this.totalContribution === 100 : true) {\n      this.reportsForm.controls.stepperController.patchValue(true, { emitEvent: false, onlySelf: true });\n    } else {\n      this.reportsForm.controls.stepperController.patchValue(null, { emitEvent: false, onlySelf: true });\n    }\n  }\n  getLabelOfGradingTerms(value): any {\n    return value && this.priorGradingTerms.length && this.priorGradingTerms.find(e => e.value === value) && this.priorGradingTerms.find(e => e.value === value).label;\n  }\n  onChangeOverallGrade(event): void {\n    this.reportsForm.controls.overALLGradeDisplayName.setValue(null);\n    if (event.value) {\n      this.reportsForm.controls.overALLGradeDisplayName.enable();\n    } else {\n      this.reportsForm.controls.overALLGradeDisplayName.disable();\n    }\n    this.reportsForm.controls.overALLGradeDisplayName.updateValueAndValidity();\n  }\n  isValidFormFields(): any {\n    let isValid = true;\n    Object.keys(this.TestsFormGroup.controls).forEach(key => {\n      if (key !== 'testsStartDate' && key !== 'testsEndDate') {\n        isValid = isValid && this.TestsFormGroup.get(key).valid;\n      }\n    });\n    return isValid;\n  }\n  customResetForm(form: FormGroup, columnList: string[]): void {\n    columnList.map(element => {\n      form.get(element).reset();\n      form.controls[element].updateValueAndValidity();\n    });\n  }\n  getReportsIsOptional(): boolean {\n    if (this.reportsForm.value.additionalColumns === 1 && !this.additionalColumnData.length) {\n      return false;\n    } else {\n      let additionalColumnFormValid = true;\n      if (this.additionalColumnData.length) {\n        this.totalContribution = 0;\n        this.additionalColumnData.map(e => this.totalContribution += +e.contribution);\n        additionalColumnFormValid = (this.totalContribution === 100) ? true : false;\n      }\n\n      return additionalColumnFormValid && this.reportsForm.controls.evaluationTypeId.valid\n        && this.reportsForm.controls.reportTemplateId.valid &&\n        this.reportsForm.controls.generateOverAllGrade.valid && this.reportsForm.controls.additionalColumns.valid\n        && this.reportsForm.controls.stepperController.valid;\n    }\n  }\n  onClickNext(): void {\n    this.totalContribution = 0;\n    this.additionalColumnData.map(e => this.totalContribution += +e.contribution);\n    if (this.reportsForm.value.additionalColumns === 1) {\n      if (!this.additionalColumnData.length) {\n        this.openSnackBar('Please select contribution to continue', true);\n      } else if (this.totalContribution !== 100) {\n        this.openSnackBar('Total Contribution should be 100%', true);\n      }\n    }\n  }\n  getTemplates(): void {\n    this._gradingTermConfigurationService.gradingTermConfigurationPrintTemplateGet()\n      .subscribe(res => this.setTemplates(res), error => {\n        this.errorResponse(error);\n      });\n  }\n  setTemplates(res): void {\n    this.templates = res.listViews ? res.listViews : [];\n  }\n  onOpenTests(): void {\n    this.scrollIntoViewById('customExpansion');\n  }\n}\n","module.exports = \"<router-outlet></router-outlet>\\n\\n\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL21vZHVsZXMvY29uZmlndXJhdGlvbi9ncmFkaW5nL2dyYWRpbmcuY29tcG9uZW50LnNjc3MifQ== */\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-grading',\n  templateUrl: './grading.component.html',\n  styleUrls: ['./grading.component.scss']\n})\nexport class GradingComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","import { NgModule, CUSTOM_ELEMENTS_SCHEMA, NO_ERRORS_SCHEMA } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { GradingRoutingModule } from './grading-routing.module';\nimport { TestTypeComponent } from './test-type/test-type.component';\nimport { TestTypeService } from 'app/service/grading-service/api/test-type.service';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { TokenInterceptor } from 'app/interceptors/token-interceptor';\nimport { SharedManagementModule } from 'app/shared/shared.module';\nimport { RouterModule } from '@angular/router';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatcomponentsModule } from 'app/main/matcomponents.module';\nimport { FuseSharedModule } from '@fuse/shared.module';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { GradeSetupService } from 'app/service/grading-service/api/grade-setup.service';\nimport { GradingComponent } from './grading.component';\nimport { AcademicGradesComponent } from './academic-grades/academic-grades.component';\nimport { GradingTermsComponent } from './grading-terms/grading-terms.component';\nimport { AssessmentGradesComponent } from './assessment-grades/assessment-grades.component';\nimport { GardeTermConfigurationService } from 'app/service/grading-service/api/garde-term-configuration.service';\nimport { GradingTermDetailsComponent } from './grading-term-details/grading-term-details.component';\n\n\n@NgModule({\n    declarations: [GradingComponent, TestTypeComponent, AcademicGradesComponent, GradingTermsComponent, AssessmentGradesComponent, GradingTermDetailsComponent],\n    imports: [\n        CommonModule,\n        GradingRoutingModule,\n        SharedManagementModule,\n        RouterModule,\n        FormsModule,\n        ReactiveFormsModule,\n        MatcomponentsModule,\n        FuseSharedModule,\n        TranslateModule,\n        FormsModule,\n        ReactiveFormsModule,\n        FuseSharedModule,\n        TranslateModule,\n    ],\n    providers: [\n        {\n            provide: HTTP_INTERCEPTORS,\n            useClass: TokenInterceptor,\n            multi: true\n        },\n        GradeSetupService, TestTypeService, GardeTermConfigurationService],\n    schemas: [NO_ERRORS_SCHEMA, CUSTOM_ELEMENTS_SCHEMA],\n})\nexport class GradingModule { }\n","module.exports = \"<app-table  [settings]=\\\"tabSettings\\\" (getTableData)='getTableData($event)'\\n    (rowBasedAction)='onTableSelect($event)' [templateRef]='addTestTypeTemplate' (deleteAllRows)=\\\"deleteAll()\\\"\\n     [closeRowForm]='closeAddPanel'\\n    (openAddForm)='addRow()' (selectedRows)='selectedRows($event)'></app-table>\\n\\n<ng-template #addTestTypeTemplate>\\n    <form [formGroup]=\\\"testTypeForm\\\" (ngSubmit)=\\\"onSubmitTestType(testTypeForm)\\\" #userTestTypeForm=\\\"ngForm\\\">\\n        <div fxFlexFill fxLayout=\\\"column\\\" fxLayout.gt-xs=\\\"row\\\" class=\\\"pt-24\\\">\\n            <mat-form-field appearance=\\\"outline\\\" fxLayout=\\\"column\\\" fxFlex=\\\"100\\\">\\n                <mat-label #testTypeName translate>Test Type Name</mat-label>\\n                <input (keyup)=\\\"preventSpace($event,'testTypeForm','name')\\\" matInput formControlName=\\\"name\\\" autocomplete=\\\"off\\\" required  (blur)=\\\"trimTextBoxSpaces('testTypeForm','name')\\\">\\n                <mat-error>\\n                    <app-validation [labelName]=\\\"testTypeName.innerText\\\"\\n                        [validationControl]=\\\"testTypeForm.controls.name\\\" [doValidate]=\\\"isValidate\\\">\\n                    </app-validation>\\n                </mat-error>\\n            </mat-form-field>\\n            <mat-form-field appearance=\\\"outline\\\" class=\\\"pl-sm-20\\\" fxLayout=\\\"column\\\" fxFlex=\\\"100\\\">\\n                <mat-label #testTypeCode translate>Test Type Code</mat-label>\\n                <input (keyup)=\\\"preventSpace($event,'testTypeForm','code')\\\" matInput formControlName=\\\"code\\\" autocomplete=\\\"off\\\"  (blur)=\\\"trimTextBoxSpaces('testTypeForm','code')\\\">\\n                <mat-error>\\n                    <app-validation [labelName]=\\\"testTypeCode.innerText\\\"\\n                        [validationControl]=\\\"testTypeForm.controls.code\\\" [doValidate]=\\\"isValidate\\\">\\n                    </app-validation>\\n                </mat-error>\\n            </mat-form-field>\\n        </div>\\n        <div fxFlexFill fxLayout=\\\"column\\\" fxLayout.gt-xs=\\\"row\\\">\\n            <mat-form-field appearance=\\\"outline\\\" fxLayout=\\\"column\\\" fxFlex=\\\"100\\\">\\n                <mat-label #questionCount translate>Question Count</mat-label>\\n                <input (keyup)=\\\"preventSpace($event,'testTypeForm','questionCount')\\\" matInput formControlName=\\\"questionCount\\\" autocomplete=\\\"off\\\"  (blur)=\\\"trimTextBoxSpaces('testTypeForm','questionCount')\\\">\\n                <mat-error>\\n                    <app-validation [labelName]=\\\"questionCount.innerText\\\"\\n                        [validationControl]=\\\"testTypeForm.controls.questionCount\\\" [doValidate]=\\\"isValidate\\\">\\n                    </app-validation>\\n                </mat-error>\\n            </mat-form-field>\\n            <mat-form-field appearance=\\\"outline\\\" class=\\\"pl-sm-20\\\" fxLayout=\\\"column\\\" fxFlex=\\\"100\\\">\\n                <mat-label #marksCount translate>Marks Count</mat-label>\\n                <input (keyup)=\\\"preventSpace($event,'testTypeForm','marksCount')\\\" matInput formControlName=\\\"marksCount\\\" autocomplete=\\\"off\\\"  (blur)=\\\"trimTextBoxSpaces('testTypeForm','marksCount')\\\">\\n                <mat-error>\\n                    <app-validation [labelName]=\\\"marksCount.innerText\\\"\\n                        [validationControl]=\\\"testTypeForm.controls.marksCount\\\" [doValidate]=\\\"isValidate\\\">\\n                    </app-validation>\\n                </mat-error>\\n            </mat-form-field>\\n        </div>\\n        <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"end center\\\" class=\\\"pt-16 pb-8\\\">\\n            <button class=\\\"mr-12 text-uppercase\\\" mat-raised-button type=\\\"button\\\" (click)=\\\"closePanel()\\\" translate>\\n                {{'Cancel' | translate}}\\n            </button>\\n            <button [disabled]=\\\"disbleSubmitBtn\\\" mat-raised-button type=\\\"submit\\\" class=\\\"text-uppercase\\\" color=\\\"accent\\\">{{(isUpdate ? 'Update':'Create') | translate}}</button>\\n        </div>\\n    </form>\\n</ng-template>\\n\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL21vZHVsZXMvY29uZmlndXJhdGlvbi9ncmFkaW5nL3Rlc3QtdHlwZS90ZXN0LXR5cGUuY29tcG9uZW50LnNjc3MifQ== */\"","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { CommonService } from 'app/service/common.service';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { MatDialog, MatSnackBar } from '@angular/material';\nimport { CustomDialogComponent } from 'app/shared/custom-dialog/custom-dialog.component';\nimport { AppSettings, Pattern } from 'app/app.constants';\nimport * as HttpStatus from 'http-status-codes';\nimport { AllTestTypeDetailsViewModel } from 'app/models/grading/all-test-type-details-viewmodel';\nimport { TestTypeView } from 'app/models/grading/test-type-view';\nimport { TestTypeViewModel } from 'app/models/grading/test-type-viewmodel';\nimport { TestTypeService } from 'app/service/grading-service/api/test-type.service';\nimport { CommonComponent } from 'app/shared/common/common.component';\n\n@Component({\n    selector: 'app-test-type',\n    templateUrl: './test-type.component.html',\n    styleUrls: ['./test-type.component.scss'],\n})\nexport class TestTypeComponent extends CommonComponent implements OnInit{\n\n    @ViewChild('addTestTypeTemplate') addTestTypeTemplate;\n    @ViewChild('userTestTypeForm') userTestTypeForm;\n    testTypeIds: Array<string> = [];\n    testTypeForm: FormGroup;\n    testTypeViewModel: TestTypeViewModel;\n    testTypeView: TestTypeView;\n    custRowsPerPageOptions: Array<number> = [];\n    rows: Array<any>;\n    totalItems: number;\n    pageCnt: number;\n    allTestTypeDetailsViewModel: AllTestTypeDetailsViewModel;\n    cols: any[];\n    tabSettings: {};\n    tempData: any;\n    closeAddPanel: boolean;\n    isUpdate = false;\n    isValidate: boolean;\n    schoolAcademicSession: any;\n    isSchoolSchoolAcademicSession: boolean;\n    schoolAcademicSessionRequired: string;\n    failedRecords: string[];\n    currentComponent = 'TestTypeComponent';\n    errorMessages: any;\n    errorsList: Array<any> = [];\n    disbleSubmitBtn = false;\n    constructor(private testTypeService: TestTypeService, public commonService: CommonService, public dialog: MatDialog, public snackBar: MatSnackBar) {\n        super();\n        this.allTestTypeDetailsViewModel = {\n            sortBy: '',\n            sortOrder: AppSettings.DEFAULT_SORTORDER,\n            pageNumber: AppSettings.PAGENUMBER,\n            pageSize: AppSettings.PAGESIZE,\n        };\n        this.commonService.getTableLSObj(this.allTestTypeDetailsViewModel);\n    }\n    ngOnInit(): void  {\n        /**\n        * table columns\n        */\n        this.cols = [\n            { field: 'name', header: 'Test Type Name', sort: true },\n            { field: 'code', header: 'Test Type Code', sort: true },\n            { field: 'questionCount', header: 'Question Count', sort: true },\n            { field: 'marksCount', header: 'Marks Count', sort: true },\n            { field: 'actions', header: 'Actions', sort: false },\n        ];\n        /**\n        * intializes formGroup for TestType\n        */\n        this.testTypeForm = new FormGroup({\n            id: new FormControl(''),\n            name: new FormControl('', [Validators.required, Validators.maxLength(45)]),\n            code: new FormControl('', [Validators.maxLength(6)]),\n            questionCount: new FormControl('', [Validators.max(32767), Validators.min(1), Validators.pattern(Pattern.NUMBER_PATTERN)]),\n            marksCount: new FormControl('', [Validators.max(9999.99), Validators.min(1), \n            Validators.pattern(Pattern.DECIMAL_WITH_TWO_PRECISIONS)]),\n        });\n\n        const modelTableComponent = this.getModelComponent(this.currentComponent);\n        if (modelTableComponent) {\n            this.allTestTypeDetailsViewModel = modelTableComponent;\n        }\n        if (this.getTokenParam('_as')) {\n            this.fetchTableData();\n        }\n        else {\n            setTimeout(() => {\n                this.openSnackBar(AppSettings.SCHOOLACADEMIC_SESSION_REQUIRED, true);\n            });\n            this.tabSettings = {\n                columns: this.cols,\n                model: this.allTestTypeDetailsViewModel,\n                rows: this.rows,\n                tablename: 'Test Types',\n                componentName: this.currentComponent,\n                isNewStudentCourseSelectionRequired: true,\n                isSelectRowRequired: true,\n                visibleSelectAll: true,\n                isPaginationRequired: true,\n                totalRowsCount: this.totalItems,\n                custRowsPerPageOptions: this.custRowsPerPageOptions,\n                pageCnt: this.pageCnt,\n                headerOperations: {\n                    infoButton: {\n                        required: true,\n                        text: 'Test Types'\n                    }\n                },\n            };\n        }\n    }\n    /**\n    * api call to get all test types\n    */\n\n    getTableData(allTestTypeDetailsViewModel: AllTestTypeDetailsViewModel): void {\n\n        this.allTestTypeDetailsViewModel = allTestTypeDetailsViewModel;\n        this.fetchTableData();\n    }\n\n    fetchTableData(): void {\n        this.testTypeService.getAllDetails(this.allTestTypeDetailsViewModel.sortBy, this.allTestTypeDetailsViewModel.sortOrder, \n        this.allTestTypeDetailsViewModel.names, this.allTestTypeDetailsViewModel.codes, this.allTestTypeDetailsViewModel.questionCounts, \n        this.allTestTypeDetailsViewModel.marksCounts, this.failedRecords, this.allTestTypeDetailsViewModel.pageNumber, \n        this.allTestTypeDetailsViewModel.pageSize).subscribe((res: any) => { this.getAllTestTypes(res); }, error => {\n            this.errorResponse(error);\n        });\n    }\n\n    /**\n    * manipulate response data and sets to app-table\n    * @param testTypeList \n    */\n\n    getAllTestTypes(testTypeList: any): void {\n        this.custRowsPerPageOptions = [];\n        if (!testTypeList.testTypeListViewModel) {\n            this.rows = [];\n        } else {\n            this.rows = testTypeList.testTypeListViewModel.list;\n            this.totalItems = testTypeList.testTypeListViewModel.totalItems;\n        }\n        const testoperations = [\n            {\n                name: AppSettings.EDIT_OPERATION,\n                icon: AppSettings.EDIT_ICON\n\n            },\n            {\n                name: AppSettings.DELETE_OPERATION,\n                icon: AppSettings.DELETE_ICON\n            },\n        ];\n        this.rows.forEach(e => {\n            e.operations = testoperations;\n        });\n        if (testTypeList.testTypeListViewModel) {\n            this.allTestTypeDetailsViewModel.pageNumber = testTypeList.testTypeListViewModel.pageNumber;\n        }\n        this.tabSettings = {\n            columns: this.cols,\n            model: this.allTestTypeDetailsViewModel,\n            rows: this.rows,\n            tablename: 'Test Types',\n            componentName: this.currentComponent,\n            isNewStudentCourseSelectionRequired: true,\n            isSelectRowRequired: true,\n            visibleSelectAll: true,\n            isPaginationRequired: true,\n            totalRowsCount: this.totalItems,\n            custRowsPerPageOptions: this.custRowsPerPageOptions,\n            pageCnt: this.pageCnt,\n            headerOperations: {\n                addingForm: {\n                    required: true,\n                    name: this.addTestTypeTemplate,\n                    btnName: 'New Test Type'\n                },\n                infoButton: {\n                    required: true,\n                    text: 'Test Types'\n                  }\n            },\n            filtersList: testTypeList.filters\n        };\n    }\n\n    /**\n    * Deleteting the testtypes\n    * @param testTypeIds \n    * @param isMultiSelect \n    */\n    deleteTestTypes(testTypeIds: any, isMultiSelect: any): void {\n        if (testTypeIds.length > 0) {\n            this.testTypeService.deleteAll(testTypeIds).subscribe(res => {\n                if (res.statusCode = HttpStatus.OK) {\n                    this.testTypeIds = [];\n                    this.openSnackBar(res.messages.ResultMessage);\n                }\n                else {\n                    this.openSnackBar(res.messages.ResultMessage);\n                }\n                if (isMultiSelect) {\n                    this.failedRecords = res.failedRecords;\n                }\n                this.fetchTableData();\n            }, error => {\n                if (error.error.failedRecords !== undefined && error.error.failedRecords.length > 0) {\n                    this.failedRecords = (error.error.failedRecords);\n                }\n                this.errorResponse(error);\n            });\n        }\n    }\n\n    onTableSelect(data: any): void {\n        if (data.operation === AppSettings.DELETE) {\n            const dialogRef = this.dialogBox(AppSettings.WARNING_ON_SINGLE_DELETE, true, AppSettings.NO, AppSettings.YES);\n            dialogRef.afterClosed().subscribe(action => {\n                if (action === AppSettings.YES) {\n                    const testTypeIds: Array<string> = [data.clickedRow.id];\n                    this.deleteTestTypes(testTypeIds, false);\n                }\n            });\n        }\n        if (data.operation === AppSettings.EDIT) {\n            this.isUpdate = true;\n            this.closeAddPanel = false;\n            this.testTypeService.getTestTypeById(data.clickedRow.id).subscribe(res => {\n                this.testTypeForm.patchValue(res.testTypeViewModel);\n                this.testTypeForm.controls['id'].setValue(data.clickedRow.id);\n            }, error => {\n                this.errorResponse(error);\n            });\n        }\n    }\n    /**\n    * Api call for Add or updating the testtype based on condition\n    * @param testTypeView \n    */\n    onSubmitTestType(testTypeView: any): void {\n        this.isValidate = true;\n        if (testTypeView.status === AppSettings.VALID) {\n            this.disbleSubmitBtn = true;\n            if (testTypeView.value.id == null) {\n                this.testTypeViewModel = testTypeView.value;\n                this.testTypeService.createTestType(this.testTypeViewModel).subscribe(res => this.addUpdateResponce(res), error => {\n                    this.disbleSubmitBtn = false;\n                    this.errorResponse(error);\n                });\n            }\n            else {\n                this.testTypeView = testTypeView.value;\n                this.testTypeService.updateTestType(this.testTypeView).subscribe(res => this.addUpdateResponce(res), error => {\n                    this.disbleSubmitBtn = false;\n                    this.errorResponse(error);\n                });\n            }\n        }\n    }\n    /**\n    * Responce for Add or update\n    * @param testTypeView \n    */\n    addUpdateResponce(testTypeView: any): void {\n        this.disbleSubmitBtn = false;\n        if (testTypeView.statusCode !== HttpStatus.CONFLICT) {\n            this.closeAddPanel = true;\n            this.fetchTableData();\n        }\n        this.openSnackBar(testTypeView.messages.ResultMessage);\n    }\n\n    /**\n    * close the panel and initialize form on close\n    */\n\n    closePanel(): void {\n        this.closeAddPanel = true;\n        this.isValidate = false;\n        this.testTypeForm.reset();\n        this.userTestTypeForm.resetForm();\n        this.disbleSubmitBtn = false;\n    }\n    /**\n    * warns on delete then call deletetestTypes method on yes\n    */\n\n    deleteAll(): void {\n        const dialogRef = this.dialogBox(AppSettings.WARNING_ON_MULTI_DELETE, true, AppSettings.NO, AppSettings.YES);\n        dialogRef.afterClosed().subscribe(action => {\n            if (action === AppSettings.YES) {\n                this.deleteTestTypes(this.testTypeIds, true);\n            }\n        });\n    }\n    addRow(): void {\n        this.isValidate = false;\n        this.testTypeForm.reset();\n        this.userTestTypeForm.resetForm();\n        this.closeAddPanel = false;\n        this.isUpdate = false;\n    }\n    /**\n    * opens dialog to show on warnings/success messages\n    * @param dialogData \n    * @param disableClose \n    * @param button1Text \n    * @param button2Text \n    */\n\n    dialogBox(dialogData: any, disableClose: boolean, button1Text: string, button2Text?: string): any {\n        return this.dialog.open(CustomDialogComponent, {\n            disableClose: disableClose,\n            data: { text: this.commonService.getTranslation(dialogData), action: true, btn1Text: button1Text, btn2Text: button2Text },\n        });\n    }\n    selectedRows(data: any): void {\n        this.testTypeIds = [];\n          for (let index = 0; index < data.length; index++) {\n            this.testTypeIds.push(data[index].id);\n          }\n      }\n}\n"],"sourceRoot":""}