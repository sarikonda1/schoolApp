{"version":3,"sources":["webpack:///./src/app/service/academic-service/api/application-category.service.ts","webpack:///./src/app/service/academic-service/api/status.service.ts"],"names":[],"mappings":"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","file":"app-modules-configuration-configuration-module.js","sourcesContent":["/**\n * BaseWebAPI\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: v1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional } from '@angular/core';\nimport {\n    HttpClient, HttpHeaders, HttpParams,\n    HttpResponse, HttpEvent\n} from '@angular/common/http';\n\n\nimport { Observable } from 'rxjs/Observable';\n\n\nimport { CustomHttpUrlEncodingCodec } from 'app/service/base/encoder';\nimport { ApplicationCategoryViewModel } from 'app/models/academics/application-category-view';\nimport { Configuration, BASE_PATH } from '.';\nimport { StudentApplicationCategoryView } from 'app/models/academics/student-application-category-view';\nimport { BaseUrlConfig, ModuleConfig, BaseModuleConfig } from 'app/url.config';\nimport { CommonComponent } from 'app/shared/common/common.component';\n\n\n\n\n@Injectable()\nexport class ApplicationCategoryService {\n\n    protected basePath = BaseUrlConfig.BasePath + ModuleConfig.Base;\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(private commonComponent: CommonComponent,\n        protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n         * Creating Application Categories for school based on schoolId\n         * \n         * @param authorization access token\n         * @param applicationCategoryView \n         * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n         * @param reportProgress flag to report request and response progress.\n         */\n    public createApplicationCategory(applicationCategoryView?: ApplicationCategoryViewModel, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public createApplicationCategory(applicationCategoryView?: ApplicationCategoryViewModel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public createApplicationCategory(applicationCategoryView?: ApplicationCategoryViewModel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public createApplicationCategory(applicationCategoryView?: ApplicationCategoryViewModel, observe: any = 'body', reportProgress: boolean = false): Observable<any> {\n\n        let headers = this.defaultHeaders;\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json-patch+json',\n            'application/json',\n            'text/json',\n            'application/_*+json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<any>(`${this.basePath}` + BaseModuleConfig._ApplicationCategory_CreateCategory,\n            applicationCategoryView,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Delete Application Category by ApplicationCategoryId\n     * \n     * @param ids \n     * @param authorization access token\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteApplicationCategory(ids: Array<string>, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public deleteApplicationCategory(ids: Array<string>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public deleteApplicationCategory(ids: Array<string>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public deleteApplicationCategory(ids: Array<string>, observe: any = 'body', reportProgress: boolean = false): Observable<any> {\n\n        if (ids === null || ids === undefined) {\n            throw new Error('Required parameter ids was null or undefined when calling deleteApplicationCategory.');\n        }\n\n\n        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });\n        if (ids) {\n            ids.forEach((element) => {\n                queryParameters = queryParameters.append('Ids', <any>element);\n            });\n        }\n        let headers = this.defaultHeaders;\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.delete<any>(`${this.basePath}` + BaseModuleConfig._ApplicationCategory_ApplicationCategory,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get all Application categories based on SchoolId\n     * \n     * @param authorization access token\n     * @param names Gets or sets\n     * @param sortBy Gets or Sets SortBy\n     * @param sortOrder Gets or Sets SortOrder\n     * @param failedRecords Gets or Sets SortBy\n     * @param pageNumber \n     * @param pageSize \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getAllApplicationCategory(names?: Array<string>, sortBy?: string, sortOrder?: 0 | 1 | -1, failedRecords?: Array<string>, pageNumber?: number,\n        pageSize?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getAllApplicationCategory(names?: Array<string>, sortBy?: string, sortOrder?: 0 | 1 | -1, failedRecords?: Array<string>,\n        pageNumber?: number, pageSize?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getAllApplicationCategory(names?: Array<string>, sortBy?: string, sortOrder?: 0 | 1 | -1, failedRecords?: Array<string>,\n        pageNumber?: number, pageSize?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getAllApplicationCategory(names?: Array<string>, sortBy?: string, sortOrder?: 0 | 1 | -1, failedRecords?: Array<string>,\n        pageNumber?: number, pageSize?: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {\n\n        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });\n        queryParameters = this.commonComponent.setQueryParams(names, 'Names', queryParameters);\n        queryParameters = this.commonComponent.setQueryParams(sortBy, 'SortBy', queryParameters);\n        queryParameters = this.commonComponent.setQueryParams(sortOrder, 'SortOrder', queryParameters);\n        queryParameters = this.commonComponent.setQueryParams(failedRecords, 'FailedRecords', queryParameters);\n        queryParameters = this.commonComponent.setQueryParams(pageNumber, 'PageNumber', queryParameters);\n        queryParameters = this.commonComponent.setQueryParams(pageSize, 'PageSize', queryParameters);\n\n        let headers = this.defaultHeaders;\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}` + BaseModuleConfig._ApplicationCategory_ApplicationDetails,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get Application categories by ApplicationCategoryId and SchoolId\n     * \n     * @param id \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getCategoryDetailsById(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getCategoryDetailsById(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getCategoryDetailsById(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getCategoryDetailsById(id: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling getCategoryDetailsById.');\n        }\n\n        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });\n        if (id !== undefined && id !== null) {\n            queryParameters = queryParameters.set('Id', <any>id);\n        }\n\n        let headers = this.defaultHeaders;\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}` + BaseModuleConfig._ApplicationCategory_AplicationById,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Update Application categories by ApplicationCategoryId\n     * \n     * @param authorization access token\n     * @param updateView \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateApplicationCategory(updateView?: StudentApplicationCategoryView, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public updateApplicationCategory(updateView?: StudentApplicationCategoryView, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public updateApplicationCategory(updateView?: StudentApplicationCategoryView, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public updateApplicationCategory(updateView?: StudentApplicationCategoryView, observe: any = 'body', reportProgress: boolean = false): Observable<any> {\n\n        let headers = this.defaultHeaders;\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json-patch+json',\n            'application/json',\n            'text/json',\n            'application/_*+json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n        return this.httpClient.put<any>(`${this.basePath}` + BaseModuleConfig._ApplicationCategory_ApplicationCategories,\n            updateView,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * BaseWebAPI\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: v1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional } from '@angular/core';\nimport {\n    HttpClient, HttpHeaders, HttpParams,\n    HttpResponse, HttpEvent\n} from '@angular/common/http';\nimport { Observable } from 'rxjs/Observable';\nimport { Configuration } from 'app/service/base/configuration';\nimport { BASE_PATH } from 'app/service/base/variables';\nimport { CustomHttpUrlEncodingCodec } from 'app/service/base/encoder';\nimport { BaseUrlConfig, ModuleConfig } from 'app/url.config';\n\n@Injectable()\nexport class StatusService {\n\n    protected basePath = BaseUrlConfig.BasePath + ModuleConfig.Base;\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * GetAllStatuses\n     * @param code Gets or sets code\n     * @param schoolId SchoolId in Encrypted Form\n     * @param instituteId InstituteId in Encrypted Form\n     * @param userId UserId in Encrypted Form\n     * @param academicSessionId AcademicSessionId in Encrypted Form \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getAllStatuses(code: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getAllStatuses(code: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getAllStatuses(code: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getAllStatuses(code: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {\n\n        if (code === null || code === undefined) {\n            throw new Error('Required parameter code was null or undefined when calling getAllStatuses.');\n        }\n\n        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });\n        if (code !== undefined && code !== null) {\n            queryParameters = queryParameters.set('Code', <any>code);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/Status/GetStatuses`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n\n    /**\n     * Payment Statuses\n     * \n     * @param code Gets or sets code\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n   \n    public paymentStatuses(code: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (code === null || code === undefined) {\n            throw new Error('Required parameter code was null or undefined when calling paymentStatuses.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (code !== undefined && code !== null) {\n            queryParameters = queryParameters.set('Code', <any>code);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/Payment/statuses`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n"],"sourceRoot":""}