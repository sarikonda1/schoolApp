{"version":3,"sources":["webpack:///./src/app/service/class-schedules/class-time-table.service.ts"],"names":[],"mappings":"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","file":"default~app-modules-academics-attendance-attendance-module~app-modules-academics-events-events-modul~68e36f6b.js","sourcesContent":["/**\n * Course\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: v1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional } from '@angular/core';\nimport {\n    HttpClient, HttpHeaders, HttpParams,\n    HttpResponse, HttpEvent\n} from '@angular/common/http';\n\n\nimport { Observable } from 'rxjs/Observable';\nimport { ModuleConfig, BaseUrlConfig, CourseModuleConfig } from 'app/url.config';\nimport { CustomHttpUrlEncodingCodec } from '../base/encoder';\nimport { Configuration } from '../base/configuration';\nimport { BASE_PATH } from '../base/variables';\nimport { ClassPeriodsDataView } from 'app/modules/configuration/class-schedules/model/class-periods-data-view';\nimport { ClassTimetableUpdateView } from 'app/modules/configuration/class-schedules/model/class-timetable-update-view';\nimport { CommonComponent } from 'app/shared/common/common.component';\n\n\n@Injectable()\nexport class ClassTimetableService {\n\n    protected basePath = BaseUrlConfig.BasePath + ModuleConfig.Course;\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string, \n    @Optional() configuration: Configuration, private commonComponent: CommonComponent) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n    * Get All Courses    \n    * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n    * @param reportProgress flag to report request and response progress.\n    */\n    public classTimetableClassPeriodTypesGet(observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public classTimetableClassPeriodTypesGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public classTimetableClassPeriodTypesGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public classTimetableClassPeriodTypesGet(observe: any = 'body', reportProgress: boolean = false): Observable<any> {\n\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}` + CourseModuleConfig._Class_Timetable_Class_Period_Type,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n    * Get Class Timetable\n    *     \n    * @param classId Gets or Sets ClassId\n    * @param sectionId Gets or Sets SectionId\n    * @param boardId Gets or Sets BoardId\n    * @param classTimetableTemplateId Gets or Sets BoardId    \n    * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n    * @param reportProgress flag to report request and response progress.\n    */\n    public classTimetableClassTimetableGet(classId?: number, sectionId?: number, \n        boardId?: number, classTimetableTemplateId?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public classTimetableClassTimetableGet(classId?: number, sectionId?: number, \n        boardId?: number, classTimetableTemplateId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public classTimetableClassTimetableGet(classId?: number, sectionId?: number, \n        boardId?: number, classTimetableTemplateId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public classTimetableClassTimetableGet(classId?: number, sectionId?: number, \n        boardId?: number, classTimetableTemplateId?: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {\n\n        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });\n       \n       \n        queryParameters = this.commonComponent.setQueryParams(classId, 'ClassId', queryParameters);\n        queryParameters = this.commonComponent.setQueryParams(sectionId, 'SectionId', queryParameters);\n        queryParameters = this.commonComponent.setQueryParams(boardId, 'BoardId', queryParameters);\n        queryParameters = this.commonComponent.setQueryParams(classTimetableTemplateId, 'classTimetableTemplateId', queryParameters);        \n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}` + CourseModuleConfig._Class_Timetable_Class_Timetable,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get Template Details\n     *     \n     * @param templateId Gets or Sets      \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public classTimetableTemplateDetailsGet(templateId?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public classTimetableTemplateDetailsGet(templateId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public classTimetableTemplateDetailsGet(templateId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public classTimetableTemplateDetailsGet(templateId?: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {\n\n        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });\n        if (templateId !== undefined && templateId !== null) {\n            queryParameters = queryParameters.set('TemplateId', <any>templateId);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}` + CourseModuleConfig._Class_Timetable_Template_Details,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n * Get Class Timetable details by ClassId,SectionId,TemplateId,StartDate(Nullable) and EndDate(Nullable)\n *  \n * @param classId Gets or Sets ClassId\n * @param sectionId Gets or Sets SectionId\n * @param classTimeTableId Gets or Sets ClassTimeTableId\n * @param startDate Gets or Sets StartDate,DateFormat MM-dd-YYYY\n * @param endDate Gets or Sets EndDate,DateFormat MM-dd-YYYY \n * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n * @param reportProgress flag to report request and response progress.\n */\n    public classTimetableClassTimetableByIdGet(classId?: number, sectionId?: number, classTimeTableId?: string, \n        startDate?: Date, endDate?: Date, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public classTimetableClassTimetableByIdGet(classId?: number, sectionId?: number, classTimeTableId?: string, \n        startDate?: Date, endDate?: Date, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public classTimetableClassTimetableByIdGet(classId?: number, sectionId?: number, classTimeTableId?: string, \n        startDate?: Date, endDate?: Date, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public classTimetableClassTimetableByIdGet(classId?: number, sectionId?: number, classTimeTableId?: string, \n        startDate?: Date, endDate?: Date, observe: any = 'body', reportProgress: boolean = false): Observable<any> {\n\n       \n        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });\n        \n        queryParameters = this.commonComponent.setQueryParams(classId, 'ClassId', queryParameters);\n        queryParameters = this.commonComponent.setQueryParams(sectionId, 'SectionId', queryParameters);\n        queryParameters = this.commonComponent.setQueryParams(classTimeTableId, 'ClassTimeTableId', queryParameters);\n        queryParameters = this.commonComponent.setQueryParams(startDate, 'StartDate', queryParameters);\n        queryParameters = this.commonComponent.setQueryParams(endDate, 'EndDate', queryParameters);\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}` + CourseModuleConfig._Class_Timetable_By_Id,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n    * Add Class Timetable      \n    * @param classPeriodAddView    \n    * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n    * @param reportProgress flag to report request and response progress.\n    */\n    public classTimetableClassTimetableStaffCoursePost(classPeriodAddView?: ClassPeriodsDataView, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public classTimetableClassTimetableStaffCoursePost(classPeriodAddView?: ClassPeriodsDataView, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public classTimetableClassTimetableStaffCoursePost(classPeriodAddView?: ClassPeriodsDataView, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public classTimetableClassTimetableStaffCoursePost(classPeriodAddView?: ClassPeriodsDataView, observe: any = 'body', reportProgress: boolean = false): Observable<any> {\n\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json-patch+json',\n            'application/json',\n            'text/json',\n            'application/_*+json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<any>(`${this.basePath}` + CourseModuleConfig._Class_Timetable_Staff_Course,\n            classPeriodAddView,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n      * Get ClassTimetable Templates          \n      * @param sectionId Gets or sets Id\n      * @param classId Gets or sets Id\n      * @param boardId Gets or sets Id     \n      * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n      * @param reportProgress flag to report request and response progress.\n      */\n    public classTimetableClassTimetableTemplatesGet(sectionId?: number, classId?: number, boardId?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public classTimetableClassTimetableTemplatesGet(sectionId?: number, classId?: number, \n        boardId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public classTimetableClassTimetableTemplatesGet(sectionId?: number, classId?: number, \n        boardId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public classTimetableClassTimetableTemplatesGet(sectionId?: number, classId?: number, \n        boardId?: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {\n\n        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });\n\n        queryParameters = this.commonComponent.setQueryParams(sectionId, 'SectionId', queryParameters);  \n        queryParameters = this.commonComponent.setQueryParams(classId, 'ClassId', queryParameters);\n        queryParameters = this.commonComponent.setQueryParams(boardId, 'BoardId', queryParameters);               \n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}` + CourseModuleConfig._Class_Timetable_Templates,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n    * Update Class Timetable    \n    * @param classTimetableUpdateView    \n    * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n    * @param reportProgress flag to report request and response progress.\n    */\n    public classTimetableClassTimetableUpdatePut(classTimetableUpdateView?: ClassTimetableUpdateView, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public classTimetableClassTimetableUpdatePut(classTimetableUpdateView?: ClassTimetableUpdateView, \n        observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public classTimetableClassTimetableUpdatePut(classTimetableUpdateView?: ClassTimetableUpdateView, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public classTimetableClassTimetableUpdatePut(classTimetableUpdateView?: ClassTimetableUpdateView, observe: any = 'body', reportProgress: boolean = false): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json-patch+json',\n            'application/json',\n            'text/json',\n            'application/_*+json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.put<any>(`${this.basePath}` + CourseModuleConfig._Class_Timetable_Update,\n            classTimetableUpdateView,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n    * Get All Courses   \n    * @param boardId Gets or sets BoardId\n    * @param classId Gets or sets ClassId   \n    * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n    * @param reportProgress flag to report request and response progress.\n    */\n    public classTimetableCoursesGet(boardId?: number, classId?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public classTimetableCoursesGet(boardId?: number, classId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public classTimetableCoursesGet(boardId?: number, classId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public classTimetableCoursesGet(boardId?: number, classId?: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {\n\n        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });\n      \n        queryParameters = this.commonComponent.setQueryParams(boardId, 'BoardId', queryParameters);\n        queryParameters = this.commonComponent.setQueryParams(classId, 'ClassId', queryParameters);      \n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}` + CourseModuleConfig._Class_Timetable_Courses,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n    * Get All Sections         \n    * @param classId Gets or sets ClassId   \n    * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n    * @param reportProgress flag to report request and response progress.\n    */\n    public classTimetableSectionsGet(classId?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public classTimetableSectionsGet(classId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public classTimetableSectionsGet(classId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public classTimetableSectionsGet(classId?: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {\n\n\n        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });\n\n        if (classId !== undefined && classId !== null) {\n            queryParameters = queryParameters.set('ClassId', <any>classId);\n        }\n\n        let headers = this.defaultHeaders;\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}` + CourseModuleConfig._Class_Timetable_Sections,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n    * Get All Staff    \n    * @param id    \n    * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n    * @param reportProgress flag to report request and response progress.\n    */\n    public classTimetableStaffGet(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public classTimetableStaffGet(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public classTimetableStaffGet(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public classTimetableStaffGet(id: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling classTimetableStaffGet.');\n        }\n\n\n        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });\n        if (id !== undefined && id !== null) {\n            queryParameters = queryParameters.set('Id', <any>id);\n        }\n\n        let headers = this.defaultHeaders;\n\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}` + CourseModuleConfig._Class_Timetable_Staff,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n    * Get All Templates       \n    * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n    * @param reportProgress flag to report request and response progress.\n    */\n    public classTimetableTemplatesGet(observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public classTimetableTemplatesGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public classTimetableTemplatesGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public classTimetableTemplatesGet(observe: any = 'body', reportProgress: boolean = false): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}` + CourseModuleConfig._Class_Timetable_Template,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n* Delete ClassTimetable By classtimetableId\n* \n* @param classId Gets or Sets ClassId\n* @param sectionId Gets or Sets SectionId\n* @param classTimetableTemplateId Gets or Sets BoardId*\n* @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n* @param reportProgress flag to report request and response progress.\n*/\n    public classTimetableClassPeriodsDelete(classId?: number, sectionId?: number, classTimetableTemplateId?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public classTimetableClassPeriodsDelete(classId?: number, sectionId?: number, classTimetableTemplateId?: string,\n         observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public classTimetableClassPeriodsDelete(classId?: number, sectionId?: number, classTimetableTemplateId?: string,\n         observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public classTimetableClassPeriodsDelete(classId?: number, sectionId?: number, classTimetableTemplateId?: string,\n         observe: any = 'body', reportProgress: boolean = false): Observable<any> {\n\n\n        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });\n        if (classId !== undefined && classId !== null) {\n            queryParameters = queryParameters.set('ClassId', <any>classId);\n        }\n        if (sectionId !== undefined && sectionId !== null) {\n            queryParameters = queryParameters.set('SectionId', <any>sectionId);\n        }\n        if (classTimetableTemplateId !== undefined && classTimetableTemplateId !== null) {\n            queryParameters = queryParameters.set('ClassTimetableTemplateId', <any>classTimetableTemplateId);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.delete<any>(`${this.basePath}` + CourseModuleConfig._Class_Timetable_Class_Periods,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n\n    \n\n}\n"],"sourceRoot":""}