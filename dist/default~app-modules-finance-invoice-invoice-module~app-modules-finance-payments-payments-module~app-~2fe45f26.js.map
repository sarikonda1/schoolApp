{"version":3,"sources":["webpack:///./src/app/modules/finance/payments/payment-details/payment-details.component.html","webpack:///./src/app/modules/finance/payments/payment-details/payment-details.component.scss","webpack:///./src/app/modules/finance/payments/payment-details/payment-details.component.ts","webpack:///./src/app/service/payments/payment-correction.service.ts"],"names":[],"mappings":"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","file":"default~app-modules-finance-invoice-invoice-module~app-modules-finance-payments-payments-module~app-~2fe45f26.js","sourcesContent":["module.exports = \"<app-af-details [keyValues]=\\\"studentBasicDataView\\\" [title]=\\\"'Student Information'\\\" [isBackButtonRequired]=true\\n  [header]=\\\"'Payment Details'\\\" id=\\\"payment-details\\\" [infoKey]=\\\"'Payment Details'\\\">\\n</app-af-details>\\n<span *ngIf=\\\"isCorrection\\\">\\n  <app-add-edit-payment-correction [isAddCorrection]=\\\"isAddCorrection\\\" [paymentId]=\\\"paymentId\\\"\\n    [paymentCorrectionId]=\\\"paymentCorrectionId\\\">\\n  </app-add-edit-payment-correction>\\n</span>\\n<app-af-details [keyValues]=\\\"paymentDetails\\\" [title]=\\\"'Payment Information'\\\" [actions]=\\\"actions\\\"\\n  (action)=operations($event)></app-af-details>\\n<ng-container>\\n\\n  <ng-container *ngIf=\\\"paymentCorrectionDetails.length\\\">\\n    <app-af-details [keyValues]=\\\"paymentCorrectionDetails\\\" [title]=\\\"'Pending Payment Correction'\\\"\\n      [actions]=\\\"paymentCorrectionActions\\\" (action)=operations($event)></app-af-details>\\n  </ng-container>\\n\\n  <app-table [settings]=\\\"settingTableData\\\" (rowBasedAction)='onRowActions($event)'>\\n  </app-table>\\n\\n\\n  <ng-template #approveRejectTemplate>\\n    <div *ngIf=\\\"!isPaymentLink\\\" fxLayout=\\\"column\\\">\\n      <form [formGroup]=\\\"paymentUpdateForm\\\" fxLayout=\\\"column\\\">\\n      <mat-label *ngIf=\\\"paymentCorrectionStatusModel.isApprove && !isCancelled\\\" translate>Please Confirm to Approve\\n        Payment Correction</mat-label>\\n      <mat-label *ngIf=\\\"!paymentCorrectionStatusModel.isApprove && !isCancelled\\\" translate>Please Confirm to Reject\\n        Payment Correction</mat-label>\\n      <mat-label *ngIf=\\\"isCancelled\\\" translate>Please Confirm to Cancel Payment Correction</mat-label>\\n      <mat-form-field appearance=\\\"outline\\\" fxFlexFill fxLayout=\\\"column\\\" fxFlex=\\\"100\\\" class=\\\"pt-4\\\">\\n        <mat-label #reasons translate>Reason</mat-label>\\n        <textarea matInput [(ngModel)]=\\\"reason\\\" formControlName=\\\"reason\\\" (keyup)=\\\"preventSpace($event,'paymentUpdateForm','reason')\\\"\\n        (blur)=\\\"trimTextBoxSpaces('paymentUpdateForm','reason')\\\" [ngModelOptions]=\\\"{standalone: true}\\\"></textarea>\\n        <mat-error>\\n          <app-validation [labelName]=\\\"reasons.innerText\\\" [validationControl]=\\\"paymentUpdateForm.controls.reason\\\"\\n            [doValidate]=\\\"isFormValidated\\\">\\n          </app-validation>\\n        </mat-error>\\n      </mat-form-field>\\n      <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"start center\\\">\\n        <div fxFlex=\\\"100\\\" fxLayout=\\\"column\\\" fxLayoutAlign=\\\"end\\\">\\n          <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"end center\\\">\\n            <button type=\\\"button\\\" mat-raised-button class=\\\"mr-16 text-uppercase\\\"\\n              (click)=\\\"closePaymentConfirmationForm()\\\">{{'Cancel' | translate}}</button>\\n            \\n            <button type=\\\"submit\\\" mat-raised-button color=\\\"accent\\\" class=\\\"text-uppercase\\\" (click)=\\\"approveRejectPaymentCorrection()\\\"\\n              translate>{{(paymentCorrectionStatusModel.isApprove ? 'Approve': isCancelled ? 'Submit' :'Reject') | translate}}</button>\\n          </div>\\n        </div>\\n      </div>\\n      </form>\\n    </div>\\n    <div *ngIf=\\\"isPaymentLink\\\" fxLayout=\\\"column\\\">\\n      <div translate>Operation Successful - Payment Correction has been Approved. Please  \\n        <a (click)=\\\"newPage()\\\" class=\\\"cursor-pointer\\\">Click Here</a> to go to the Corrected Payment Details page</div>\\n      <div fxLayoutAlign=\\\"end center\\\" class=\\\"mt-12\\\">\\n        <button type=\\\"button\\\" mat-raised-button class=\\\"mr-16 text-uppercase\\\"\\n        (click)=\\\"closeDialog();\\\">{{'Close' | translate}}</button>\\n      </div>\\n   \\n    </div>\\n  </ng-template>\\n  <ng-template #paymentTemplate>\\n    <form [formGroup]=\\\"paymentUpdateForm\\\" (ngSubmit)=\\\"updatePayment(paymentUpdateForm)\\\" fxLayout=\\\"column\\\">\\n      <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"space-between center\\\">\\n        <div class=\\\"font-size-18 pb-4\\\">{{isPaymentConfirmed ? 'Confirm Pending Payment': 'Fail Pending Payment' | translate}} </div>\\n      </div>\\n      <ng-container *ngIf=\\\"isPaymentConfirmed\\\">\\n        <mat-form-field fxFlexFill appearance=\\\"outline\\\" fxLayout=\\\"column\\\" fxFlex.gt-xs=\\\"34\\\" fxFlex=\\\"100\\\" class=\\\"icon-center\\\">\\n          <mat-label #date translate>realizedDate</mat-label>\\n          <input matInput (keyup)=\\\"forceValidation('realizedDate',paymentUpdateForm)\\\" [matDatepicker]=\\\"start_date\\\"\\n            required formControlName=\\\"realizedDate\\\">\\n          <mat-datepicker-toggle matSuffix [for]=\\\"start_date\\\"></mat-datepicker-toggle>\\n          <mat-datepicker #start_date></mat-datepicker>\\n          <mat-error>\\n            <app-validation [labelName]=\\\"date.innerText\\\" [validationControl]=\\\"paymentUpdateForm.controls.realizedDate\\\"\\n              [doValidate]=\\\"true\\\">\\n            </app-validation>\\n          </mat-error>\\n        </mat-form-field>\\n\\n        <mat-form-field appearance=\\\"outline\\\" fxFlexFill fxLayout=\\\"column\\\" fxFlex=\\\"100\\\" fxFlex.gt-sm=\\\"50\\\">\\n          <mat-label #referenceNumber translate>Reference Number</mat-label>\\n          <input (keyup)=\\\"preventSpace($event,'paymentUpdateForm','referenceNumber')\\\" (blur)=\\\"trimTextBoxSpaces('paymentUpdateForm','referenceNumber')\\\" formControlName=\\\"referenceNumber\\\" matInput required autocomplete=\\\"off\\\">\\n          <mat-error>\\n            <app-validation [labelName]='referenceNumber.innerText'\\n              [validationControl]=\\\"paymentUpdateForm.controls.referenceNumber\\\" [doValidate]=\\\"true\\\">\\n            </app-validation>\\n          </mat-error>\\n        </mat-form-field>\\n      </ng-container>\\n\\n\\n      <mat-form-field appearance=\\\"outline\\\" *ngIf=\\\"!isPaymentConfirmed\\\">\\n        <mat-label #additionalInformation translate>Additional Information</mat-label>\\n        <textarea matInput placeholder=\\\"Additional Information\\\" formControlName=\\\"additionalInformation\\\"\\n          (keyup)=\\\"preventSpace($event,'paymentUpdateForm','additionalInformation')\\\" (blur)=\\\"trimTextBoxSpaces('paymentUpdateForm','additionalInformation')\\\"></textarea>\\n        <mat-error>\\n          <app-validation [labelName]='additionalInformation.innerText'\\n            [validationControl]=\\\"paymentUpdateForm.controls.additionalInformation\\\" [doValidate]=\\\"true\\\">\\n          </app-validation>\\n        </mat-error>\\n      </mat-form-field>\\n\\n      <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"start center\\\" class=\\\"pt-20\\\">\\n        <div fxFlex=\\\"100\\\" fxLayout=\\\"column\\\" fxLayoutAlign=\\\"end\\\">\\n          <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"end center\\\">\\n            <button type=\\\"button\\\" mat-raised-button class=\\\"mr-16\\\"\\n              (click)=\\\"closePaymentConfirmationForm()\\\">{{'Cancel' | translate}}</button>\\n            <button type=\\\"submit\\\" mat-raised-button color=\\\"accent\\\" translate>{{'Submit' | translate}}</button>\\n          </div>\\n        </div>\\n      </div>\\n    </form>\\n  </ng-template>\\n\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL21vZHVsZXMvZmluYW5jZS9wYXltZW50cy9wYXltZW50LWRldGFpbHMvcGF5bWVudC1kZXRhaWxzLmNvbXBvbmVudC5zY3NzIn0= */\"","import { Component, OnInit, TemplateRef, ViewChild, ElementRef } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { PaymentService } from 'app/service/payments/payment.service';\nimport { CommonComponent } from 'app/shared/common/common.component';\nimport { PaymentDataResultView, InvoiceView, PaymentStatusViewModel } from '../models/payment-details-view';\nimport { Subscription } from 'rxjs';\nimport { CommonService } from 'app/service/common.service';\nimport { PaymentCorrectionService } from 'app/service/payments/payment-correction.service';\nimport { PaymentCorrectionStatusModel } from '../models/payment-correction-status-model';\nimport { CustomDialogComponent } from 'app/shared/custom-dialog/custom-dialog.component';\nimport { CancelPaymentCorrectionModel } from '../models/cancel-payment-correction-model';\nimport { FormGroup, FormBuilder, FormControl, Validators } from '@angular/forms';\nimport { MatDialog, MatSnackBar } from '@angular/material';\nimport { ValidationMessageView } from 'app/modules/manage-role-right/model/module-grid-view';\nimport { FeeModuleConfig } from 'app/url.config';\nimport { AppSettings } from 'app/app.constants';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { StoreService } from 'app/service/file-management/store.service';\n\n@Component({\n  selector: 'app-payment-details',\n  templateUrl: './payment-details.component.html',\n  styleUrls: ['./payment-details.component.scss']\n})\nexport class PaymentDetailsComponent extends CommonComponent implements OnInit {\n  @ViewChild('correction') correctionssss: ElementRef;\n\n  paymentDetails: Array<{ Label: string, Value: string }> = [];\n  paymentCorrectionDetails: Array<{ Label: string, Value: string }> = [];\n  paymentDetailsResponse: PaymentDataResultView;\n  myInterfaceProperties: string[];\n  studentBasicDataView: Array<{ Label: string, Value: string }> = [];\n  actions: Array<any> = [];\n  paymentCorrectionActions: Array<any> = [];\n  rows: any[];\n  settingTableData: {};\n  columns: any;\n  currentComponent: 'PaymentDetailsComponent';\n  isCorrection = false;\n  paymentId: string;\n  paymentCorrectionId: string;\n  clearSubscription: Subscription;\n  isAddCorrection: boolean;\n  responseSubscription: Subscription;\n  isPaymentConfirmed: boolean;\n  paymentUpdateForm: FormGroup;\n  isFormValidated: boolean;\n  chequeDate: string;\n  dialogBox: any;\n  paymentStatusModel: PaymentStatusViewModel;\n  controls = {\n    referenceNumber: null,\n    realizedDate: null\n  };\n  returnFileName: any;\n  attachmentName: any;\n  subscription: Subscription;\n  paymentCorrectionStatusModel: PaymentCorrectionStatusModel;\n  cancelPaymentCorrectionModel: CancelPaymentCorrectionModel;\n  coustomDialog: any;\n  reason: any;\n  isCancelled: boolean;\n  isPaymentLink: boolean;\n  processedPaymentId: any;\n  resultMessage: any;\n  @ViewChild('paymentTemplate') updatePaymentTemplate: TemplateRef<any>;\n  @ViewChild('approveRejectTemplate') customTemplate: TemplateRef<any>;\n  fromParent = false;\n  constructor(private route: ActivatedRoute, private paymentService: PaymentService,\n    public commonService: CommonService, public paymentCorrectionService: PaymentCorrectionService,\n    private _fb: FormBuilder, public dialog: MatDialog, private router: Router, public snackBar: MatSnackBar,\n    private sanitizer: DomSanitizer, private storeService: StoreService) {\n    super();\n    this.responseSubscription = this.paymentCorrectionService.getCorrectionResponse().subscribe(res => {\n      if (res.response) {\n        this.isCorrection = false;\n        this.commonService.setOverlay(AppSettings.HIDE);\n        if (this.paymentId) {\n          this.getPaymentDetails(this.paymentId);\n        }\n      }\n    });\n    this.clearSubscription = this.commonService.isCorrectionClear().subscribe(res => {\n      if (!res.isClear) {\n        this.isCorrection = res.isClear;\n      }\n    });\n  }\n\n  ngOnInit(): void {\n    this.paymentUpdateForm = this._fb.group({\n      isConfirm: new FormControl(null),\n      additionalInformation: new FormControl(null, [Validators.maxLength(135)]),\n      referenceNumber: new FormControl(null, [Validators.required, Validators.maxLength(45)]),\n      realizedDate: new FormControl(null, [Validators.required]),\n      reason: new FormControl(null, [Validators.maxLength(135)]),\n      id: new FormControl(null)\n    });\n\n    this.columns = [\n      { field: 'feeTerm', header: 'Fee Term', sort: false },\n      { field: 'class', header: 'Class', sort: false },\n      { field: 'section', header: 'Section', sort: false },\n      { field: 'invoiceNumber', header: 'Invoice Number', sort: false },\n      { field: 'invoiceDate', header: 'Invoice Date', sort: false },\n      { field: 'issueDate', header: 'Issue Date', sort: false },\n      { field: 'dueDate', header: 'Due Date', sort: false },\n      { field: 'invoiceAmount', header: 'Invoice Amount', sort: false },\n      { field: 'adjustments', header: 'Adjustments', sort: false },\n      { field: 'paymentAmount', header: 'Payment Amount', sort: false },\n      { field: 'dueAmount', header: 'Due Amount', sort: false },\n      { field: 'status', header: 'Status', sort: false },\n      { field: 'view', header: 'Actions ', sort: false }\n    ];\n\n    this.route.params.subscribe((params) => {\n      if (params.id) {\n        this.getPaymentDetails(params.id);\n      }\n    });\n    this.paymentCorrectionStatusModel = {\n      id: '',\n      reason: '',\n      isApprove: false\n    };\n    this.cancelPaymentCorrectionModel = {\n      id: '',\n      reason: '',\n    };\n  }\n\n  getPaymentDetails(paymenyId: string): void {\n    this.paymentId = paymenyId;\n    this.paymentService.paymentDetailsById(paymenyId).subscribe((response: PaymentDataResultView) => {\n\n      this.bindResponseData(response);\n    }, error => {\n      this.errorResponse(error);\n    });\n  }\n\n  bindResponseData(response: PaymentDataResultView): void {\n    this.paymentDetailsResponse = response;\n    response.studentDetails.dateOfBirth = this.getFormattedDateBySchoolDateFormat(response.studentDetails.dateOfBirth);\n    this.studentBasicDataView = this.getKeyValuesOfObject(response.studentDetails);\n    this.returnFileName = response.paymentDetails.attachmentName != null ? 'Receipt_' + response.paymentDetails.receiptNumber \n      + '_' + response.studentDetails.name + '_' + new Date().toLocaleDateString() + '.pdf' : null;\n    this.attachmentName =  response.paymentDetails.attachmentName != null ? response.paymentDetails.attachmentName : null;  \n    response.paymentDetails.paymentDate = this.getFormattedDateBySchoolDateFormat(response.paymentDetails.paymentDate);\n    response.paymentDetails.lastUpdatedDate = response.paymentDetails.lastUpdatedDate ? this.getFormattedDateBySchoolDateFormat(response.paymentDetails.lastUpdatedDate) : null;\n    response.paymentDetails.realizedDate = response.paymentDetails.realizedDate ? this.getFormattedDateBySchoolDateFormat(response.paymentDetails.realizedDate) : null;\n\n    response.paymentDetails.chequeDate = response.paymentDetails.chequeDate ? this.getFormattedDateBySchoolDateFormat(response.paymentDetails.chequeDate) : null;\n\n    this.chequeDate = response.paymentDetails.chequeDate;\n\n    response.paymentDetails.amountTowardsInvoices = this.getFormattedCurrency(response.paymentDetails.amountTowardsInvoices);\n\n    response.paymentDetails.paymentAmount = this.getFormattedCurrency(response.paymentDetails.paymentAmount);\n\n    response.paymentDetails.excessAmount = this.getFormattedCurrency(response.paymentDetails.excessAmount);\n\n    this.paymentDetails = this.getKeyValuesOfObject(response.paymentDetails).filter(x => x.Label !== 'id' && x.Label !== 'attachmentName');\n\n\n\n    this.paymentCorrectionDetails = [];\n    if (response.correctionPaymentDetails) {\n      response.correctionPaymentDetails.paymentDate = response.correctionPaymentDetails.paymentDate\n        ? this.getFormattedDateBySchoolDateFormat(response.correctionPaymentDetails.paymentDate)\n        : null;\n      response.correctionPaymentDetails.lastUpdatedDate = response.correctionPaymentDetails.lastUpdatedDate ?\n        this.getFormattedDateBySchoolDateFormat(response.correctionPaymentDetails.lastUpdatedDate) : null;\n      response.correctionPaymentDetails.chequeDate =\n        response.correctionPaymentDetails.chequeDate ? this.getFormattedDateBySchoolDateFormat(response.correctionPaymentDetails.chequeDate) : null;\n      response.correctionPaymentDetails.paymentAmount = this.getFormattedCurrency(response.correctionPaymentDetails.paymentAmount);\n      response.correctionPaymentDetails.amountTowardsInvoices = this.getFormattedCurrency(response.correctionPaymentDetails.amountTowardsInvoices);\n      response.correctionPaymentDetails.excessAmount = this.getFormattedCurrency(response.correctionPaymentDetails.excessAmount);\n\n      this.paymentCorrectionDetails = this.getKeyValuesOfObject(response.correctionPaymentDetails)\n        .filter(x => x.Label !== 'id');\n\n      this.paymentCorrectionDetails.forEach(x => x.Label = (x.Label === 'paymentStatus' ? 'Correction Status' : x.Label));\n    }\n\n\n    this.bindInvoiceTableData(response.invoices);\n    this.actions = response.paymentActions;\n    this.paymentCorrectionActions = response.paymentCorrectionActions;\n    this.paymentCorrectionId = response.correctionPaymentDetails ? response.correctionPaymentDetails.id : null;\n  }\n\n  /**\n  * manipulate response data and sets to app-table\n  * @param  \n  */\n  bindInvoiceTableData(invoices: Array<InvoiceView>): void {\n    if (!invoices) {\n      this.rows = [];\n    } else {\n      this.rows = invoices;\n      this.rows.forEach((element: any) => {\n        element.paymentAmount = this.getFormattedCurrency(element.paymentAmount);\n\n        element.adjustments = (element.adjustments === 0 || element.adjustments === null) ? element.adjustments : this.getFormattedCurrency(element.adjustments);\n\n        element.invoiceAmount = element.invoiceAmount === 0 ? element.invoiceAmount : this.getFormattedCurrency(element.invoiceAmount);\n\n        element.dueAmount = element.dueAmount === 0 ? element.dueAmount : this.getFormattedCurrency(element.dueAmount);\n\n        element.dueDate = this.getFormattedDateBySchoolDateFormat(element.dueDate);\n        element.invoiceDate = this.getFormattedDateBySchoolDateFormat(element.invoiceDate);\n        element.issueDate = this.getFormattedDateBySchoolDateFormat(element.issueDate);\n      });\n    }\n    /**\n    * sets data to app-table component\n    */\n    this.settingTableData = {\n      rows: this.rows,\n      columns: this.columns,\n      tablename: 'Invoices Associated With The Payment',\n      componentName: this.currentComponent,\n      hideHeader: true,\n    };\n  }\n  openPopup(): void {\n    this.dialog.open(CustomDialogComponent, {\n      disableClose: true,\n      width: '500px',\n      data: { template: this.customTemplate },\n    });\n  }\n  operations(action: any): void {\n    this.paymentUpdateForm.reset();\n    this.reason = '';\n    this.paymentCorrectionStatusModel.id = this.paymentCorrectionId;\n    this.isPaymentLink = false;\n    switch (action) {\n      case 'Correction':\n        this.isAddCorrection = true;\n        this.isCorrection = true;\n        this.commonService.setOverlay(AppSettings.SHOW);\n        break;\n      case 'Edit Correction':\n        this.isCorrection = true;\n        this.isAddCorrection = false;\n        this.commonService.setOverlay(AppSettings.SHOW);\n        break;\n      case 'Approve Correction':\n        this.openPopup();\n        this.paymentCorrectionStatusModel.isApprove = true;\n        this.isCancelled = false;\n        break;\n      case 'Reject Correction':\n        this.openPopup();\n        this.paymentCorrectionStatusModel.isApprove = false;\n        this.isCancelled = false;\n        break;\n      case 'Cancel Correction':\n        this.openPopup();\n        this.paymentCorrectionStatusModel.isApprove = false;\n        this.isCancelled = true;\n        this.isAddCorrection = false;\n        break;\n      case 'Fail Payment':\n        this.isPaymentConfirmed = false;\n        this.buildFormGroup();\n        break;\n      case 'Confirm Payment':\n        this.isPaymentConfirmed = true;\n        this.buildFormGroup();\n        break;\n      case 'Download Receipt':\n        this.downloadReceipt(this.attachmentName);\n        break;\n    }\n  }\n\n  async downloadReceipt(data): Promise<void> {\n    if (data !== null) {\n      this.sanitizer.bypassSecurityTrustResourceUrl(this.storeService.getFilePath(data));\n      const a = document.createElement('a');\n      const response = await fetch(this.storeService.getFilePath(data));\n      const responseData = await response.blob();\n      const file = new Blob([responseData], { type: 'application/octet-stream' });\n      a.href = URL.createObjectURL(file);\n      a.download = this.returnFileName.replace(' ', '_');\n      a.click();\n    }\n  }\n\n  onRowActions(action: any): void {\n    // TODO:: method to perform an action based on click\n    if (this.fromParent) {\n      this.router.navigate([FeeModuleConfig._Student_Invoice_Details + action.clickedRow.invoiceId]);\n    } else {\n      this.router.navigate([FeeModuleConfig._Invoice_Details + action.clickedRow.invoiceId]);\n    }\n  }\n  approveRejectPaymentCorrection(): any {\n    if (this.paymentUpdateForm.controls.reason.valid) {\n      if (this.isCancelled) {\n        this.cancelPaymentCorrectionModel.id = this.paymentCorrectionId;\n        this.cancelPaymentCorrectionModel.reason = this.reason;\n        this.paymentCorrectionService.cancelPaymentCorrection(this.cancelPaymentCorrectionModel).subscribe(res => {\n          this.closePaymentConfirmationForm();\n          this.openSnackBar(res.messages.ResultMessage);\n        }, error => {\n          this.errorResponse(error);\n        });\n        this.getPaymentDetails(this.paymentId);\n      }\n      else {\n        this.paymentCorrectionStatusModel.reason = this.reason;\n        this.paymentCorrectionService.approveOrRejectCorrection(this.paymentCorrectionStatusModel).subscribe(res => {\n          this.closePaymentConfirmationForm();\n          if (res.messages.ProcessedPaymentId) {\n            this.processedPaymentId = res.messages.ProcessedPaymentId;\n            this.isPaymentLink = true;\n            this.openPopup();\n          }\n          else {\n            this.openSnackBar(res.messages.ResultMessage);\n            this.getPaymentDetails(this.paymentId);\n          }\n        }, error => {\n          this.errorResponse(error);\n        });\n      }\n    }\n    else {\n      this.isFormValidated = true;\n    }\n    this.scrollIntoViewById('payment-details');\n  }\n  newPage(): void {\n    this.getPaymentDetails(this.processedPaymentId);\n    this.closePaymentConfirmationForm();\n  }\n\n  buildFormGroup(): void {\n    if (!this.isPaymentConfirmed) {\n      Object.keys(this.controls).forEach(control => {\n        this.paymentUpdateForm.get(control).clearValidators();\n        this.paymentUpdateForm.get(control).updateValueAndValidity();\n      });\n    }\n    else {\n      Object.keys(this.controls).forEach(control => {\n        this.paymentUpdateForm.get(control).setValidators(Validators.required);\n        this.paymentUpdateForm.get(control).updateValueAndValidity();\n        if (control === 'referenceNumber') {\n          this.paymentUpdateForm.get(control).setValidators([Validators.required, Validators.maxLength(45)]);\n        }\n      });\n    }\n    this.dialogBox = this.dialog.open(\n      this.updatePaymentTemplate, {\n      disableClose: true,\n      width: '500px',\n    }\n    );\n  }\n\n  /**\n   * update payment which is of type Check/DD\n   */\n  updatePayment(form: any): void {\n    this.isFormValidated = true;\n    if (this.paymentUpdateForm.valid) {\n      this.paymentStatusModel = form.value;\n      this.paymentStatusModel.id = this.paymentId;\n      this.paymentStatusModel.isConfirm = this.isPaymentConfirmed;\n      this.paymentService.updatePaymentStatus(this.paymentStatusModel).subscribe((response: ValidationMessageView) => {\n        this.closePaymentConfirmationForm();\n        this.getPaymentDetails(this.paymentId);\n        this.openSnackBar(response.messages.ResultMessage);\n      }, error => {\n        this.errorResponse(error);\n      });\n    }\n  }\n\n  closePaymentConfirmationForm(): void {\n    this.dialog.closeAll();\n  }\n  closeDialog(): void {\n    this.closePaymentConfirmationForm();\n    this.getPaymentDetails(this.paymentId);\n    this.scrollIntoViewById('payment-details');\n  }\n\n}\n","/**\n * Fee\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: v1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional } from '@angular/core';\nimport {\n    HttpClient, HttpHeaders, HttpParams,\n    HttpResponse, HttpEvent\n} from '@angular/common/http';\n\nimport { Observable } from 'rxjs/Observable';\nimport { Configuration } from '../base/configuration';\nimport { BASE_PATH } from '../base/variables';\nimport { PaymentCorrectionView } from 'app/modules/finance/payments/models/payment-correction-view';\nimport { PaymentCorrectionEditView } from 'app/modules/finance/payments/models/payment-correction-edit-view';\nimport { CustomHttpUrlEncodingCodec } from '../base/encoder';\nimport { FeeModuleConfig, BaseUrlConfig, ModuleConfig } from 'app/url.config';\nimport { BaseViewModel } from 'app/modules/academics/student-admissions/model/base-view-model';\nimport { PaymentCorrectionStatusModel } from 'app/modules/finance/payments/models/payment-correction-status-model';\nimport { CancelPaymentCorrectionModel } from 'app/modules/finance/payments/models/cancel-payment-correction-model';\nimport { ReplaySubject } from 'rxjs';\n\n\n\n@Injectable()\nexport class PaymentCorrectionService {\n   // protected basePath = 'http://localhost:8011';\n    protected basePath = BaseUrlConfig.BasePath + ModuleConfig.Fee;\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    private response = new ReplaySubject<any>();\n\n    constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * adds an payeement creation, returns validation message\n     * \n     * @param paymentCorrectionView \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public craetePaymentCorrection(paymentCorrectionView?: PaymentCorrectionView, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public craetePaymentCorrection(paymentCorrectionView?: PaymentCorrectionView, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public craetePaymentCorrection(paymentCorrectionView?: PaymentCorrectionView, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public craetePaymentCorrection(paymentCorrectionView?: PaymentCorrectionView, observe: any = 'body', reportProgress: boolean = false): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json-patch+json',\n            'application/json',\n            'text/json',\n            'application/_*+json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<any>(`${this.basePath}` + FeeModuleConfig._Payment_Cooreection,\n            paymentCorrectionView,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Edit details of payment correction, returns validation message\n     * \n     * @param paymentCorrectionEditView \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public editPaymentCorrection(paymentCorrectionEditView?: PaymentCorrectionEditView, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public editPaymentCorrection(paymentCorrectionEditView?: PaymentCorrectionEditView, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public editPaymentCorrection(paymentCorrectionEditView?: PaymentCorrectionEditView, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public editPaymentCorrection(paymentCorrectionEditView?: PaymentCorrectionEditView, observe: any = 'body', reportProgress: boolean = false): Observable<any> {\n\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json-patch+json',\n            'application/json',\n            'text/json',\n            'application/_*+json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.put<any>(`${this.basePath}` + FeeModuleConfig._Payment_Cooreection,\n            paymentCorrectionEditView,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Fetch details of payment correction, returns Details on success else validation messsage\n     * \n     * @param id \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public paymentCorrectionDetails(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public paymentCorrectionDetails(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public paymentCorrectionDetails(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public paymentCorrectionDetails(id: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {\n\n        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });\n        if (id !== undefined && id !== null) {\n            queryParameters = queryParameters.set('Id', <any>id);\n        }\n\n        let headers = this.defaultHeaders;\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}` + FeeModuleConfig._Payment_Cooreection,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n    setCorrectionResponse(response: any): void {\n        this.response.next({ response: response });\n    }\n\n    getCorrectionResponse(): Observable<any> {\n        return this.response.asObservable();\n    }\n\n     /**\n     * Approve Or Reject PaymentCorrection\n     * \n     * @param paymentCorrectionStatusModel \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public approveOrRejectCorrection(paymentCorrectionStatusModel?: PaymentCorrectionStatusModel, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public approveOrRejectCorrection(paymentCorrectionStatusModel?: PaymentCorrectionStatusModel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public approveOrRejectCorrection(paymentCorrectionStatusModel?: PaymentCorrectionStatusModel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public approveOrRejectCorrection(paymentCorrectionStatusModel?: PaymentCorrectionStatusModel, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json-patch+json',\n            'application/json',\n            'text/json',\n            'application/_*+json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.put<any>(`${this.basePath}` + FeeModuleConfig._Payment_ApproveOrReject,\n            paymentCorrectionStatusModel,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n  /**\n     * Cancel PaymentCorrection\n     * \n     * @param cancelPaymentCorrectionModel \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public cancelPaymentCorrection(cancelPaymentCorrectionModel?: CancelPaymentCorrectionModel, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public cancelPaymentCorrection(cancelPaymentCorrectionModel?: CancelPaymentCorrectionModel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public cancelPaymentCorrection(cancelPaymentCorrectionModel?: CancelPaymentCorrectionModel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public cancelPaymentCorrection(cancelPaymentCorrectionModel?: CancelPaymentCorrectionModel, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json-patch+json',\n            'application/json',\n            'text/json',\n            'application/_*+json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.put<any>(`${this.basePath}` + FeeModuleConfig._Payment_Cancel,\n            cancelPaymentCorrectionModel,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n\n}\n"],"sourceRoot":""}