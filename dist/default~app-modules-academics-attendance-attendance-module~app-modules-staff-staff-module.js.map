{"version":3,"sources":["webpack:///./src/app/modules/academics/attendance/student-attendance/student-attendance.component.html","webpack:///./src/app/modules/academics/attendance/student-attendance/student-attendance.component.scss","webpack:///./src/app/modules/academics/attendance/student-attendance/student-attendance.component.ts","webpack:///./src/app/service/student-attendance/student-attendance.service.ts"],"names":[],"mappings":"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","file":"default~app-modules-academics-attendance-attendance-module~app-modules-staff-staff-module.js","sourcesContent":["module.exports = \"<div class=\\\"px-sm-40 pt-sm-24\\\" #search>\\n  <div class=\\\"p-12 font-size-18 text-uppercase\\\" translate>Student Attendance</div>\\n  <div class=\\\"w-100-p mat-elevation-z8 simple-table-container radius-t-20 px-sm-28 pt-sm-28 pb-sm-16\\\">\\n    <form [formGroup]=\\\"studentAttendanceForm\\\">\\n      <div fxLayout=\\\"column\\\" fxLayout.gt-sm=\\\"row\\\" fxLayoutAlign=\\\"start center\\\">\\n        <mat-form-field fxFlexFill appearance=\\\"outline\\\" fxLayout=\\\"column\\\" fxFlex=\\\"100\\\" fxFlex.gt-sm=\\\"30\\\"\\n          class=\\\"icon-center\\\">\\n          <mat-label translate #attendanceDate>Attendance Date</mat-label>\\n          <input matInput (keyup)=\\\"forceValidation('attendanceDate',studentAttendanceForm)\\\"\\n            formControlName=\\\"attendanceDate\\\" [matDatepicker]=\\\"picker\\\" [min]=\\\"academicSession?.startDate\\\"\\n            [max]=\\\"academicSession?.endDate\\\" required placeholder=\\\"Choose a start date\\\">\\n          <mat-datepicker-toggle matSuffix [for]=\\\"picker\\\"></mat-datepicker-toggle>\\n          <mat-datepicker #picker></mat-datepicker>\\n          <mat-error>\\n            <app-validation [labelName]='attendanceDate.innerText'\\n              [validationControl]=\\\"studentAttendanceForm.controls.attendanceDate\\\" [doValidate]=\\\"validate\\\">\\n            </app-validation>\\n          </mat-error>\\n        </mat-form-field>\\n\\n        <mat-form-field fxFlexFill appearance=\\\"outline\\\" fxLayout=\\\"column\\\" fxFlex=\\\"100\\\" fxFlex.gt-sm=\\\"30\\\"\\n          class=\\\"px-sm-20\\\">\\n          <mat-label translate #class>Class</mat-label>\\n          <mat-select required formControlName=\\\"classId\\\" (selectionChange)=\\\"onSelectClass($event)\\\">\\n            <mat-option *ngFor=\\\"let class of classes\\\" [value]=\\\"class.value\\\">\\n              {{ class.label }}</mat-option>\\n          </mat-select>\\n          <mat-error>\\n            <app-validation [labelName]='class.innerText' [validationControl]=\\\"studentAttendanceForm.controls.classId\\\"\\n              [doValidate]=\\\"validate\\\">\\n            </app-validation>\\n          </mat-error>\\n        </mat-form-field>\\n\\n        <mat-form-field fxFlexFill appearance=\\\"outline\\\" fxLayout=\\\"column\\\" fxFlex=\\\"100\\\" fxFlex.gt-sm=\\\"30\\\"\\n          >\\n          <mat-label translate #section>Section</mat-label>\\n          <mat-select required formControlName=\\\"sectionId\\\">\\n            <mat-option *ngFor=\\\"let section of sections\\\" [value]=\\\"section.value\\\">\\n              {{ section.label }}</mat-option>\\n          </mat-select>\\n          <mat-error>\\n            <app-validation [labelName]='section.innerText'\\n              [validationControl]=\\\"studentAttendanceForm.controls.sectionId\\\" [doValidate]=\\\"validate\\\">\\n            </app-validation>\\n          </mat-error>\\n        </mat-form-field>\\n        <div fxLayoutAlign=\\\"end center\\\"> \\n          <button mat-raised-button translate color=\\\"accent\\\" class=\\\"text-uppercase ml-12 mb-20\\\"\\n          (click)=\\\"onSearchHeaderForm()\\\">\\n          {{'Search' | translate}}\\n        </button>\\n        <button mat-button type='button' (click)=\\\"getHelpText('Student Attendance')\\\" class=\\\"mb-20\\\">\\n          <mat-icon class=\\\"grey-600-fg\\\">info</mat-icon>\\n        </button>\\n        </div>\\n       \\n      </div>\\n    </form>\\n  </div>\\n</div>\\n\\n\\n<app-table *ngIf=\\\"submitted\\\" [settings]=\\\"tableSettings\\\" (getTableData)='tableData($event)'\\n  (selectedRows)='selectedRows($event)' (additionalButtonClick)=\\\"markAttendanceComplete($event)\\\"\\n  (anchorDialogClick)=\\\"showLeaveInfo($event)\\\" (radioSection)='onPresentAbsent($event)'\\n  [massActionTemplateRef]=\\\"massActions\\\" (resetFilter)=\\\"resetFilter()\\\">\\n</app-table>\\n<app-custom-card *ngIf=\\\"!submitted\\\" [title]=\\\"'Student Attendance Details'\\\"\\n  [inputMessage]=\\\"'Please Select Class And Section'\\\">\\n</app-custom-card>\\n<ng-template #massActions>\\n  <div>\\n    <form [formGroup]=\\\"massActionForm\\\" (ngSubmit)=\\\"massActionForm.valid && massActionsApply()\\\">\\n      <mat-form-field>\\n        <mat-select formControlName=\\\"massOption\\\">\\n          <mat-select-trigger>\\n            <div *ngIf=\\\"massActionForm.value.massOption === 'absent'\\\">\\n              {{'Absent' | translate}}\\n            </div>\\n            <div *ngIf=\\\"massActionForm.value.massOption === 'present'\\\">\\n              {{'Present' | translate}}\\n            </div>\\n            <div *ngIf=\\\"massActionForm.value.massOption === 'clear'\\\">\\n              {{'Clear Attendance' | translate}}\\n            </div>\\n          </mat-select-trigger>\\n          <mat-option value=\\\"absent\\\">\\n            <mat-icon class=\\\"red-600-fg\\\">clear</mat-icon>{{'Absent' | translate}}\\n          </mat-option>\\n          <mat-option value=\\\"present\\\">\\n            <mat-icon class=\\\"green-600-fg\\\">check</mat-icon>{{'Present' | translate}}\\n          </mat-option>\\n          <mat-option value=\\\"clear\\\" *ngIf=\\\"!classAttendanceMarked\\\">\\n            <mat-icon class=\\\"blue-600-fg\\\">delete</mat-icon>{{'Clear Attendance' | translate}}\\n          </mat-option>\\n        </mat-select>\\n        <mat-error>\\n          <app-validation labelName='field' [validationControl]=\\\"massActionForm.controls.massOption\\\"\\n            [doValidate]=\\\"validate\\\">\\n          </app-validation>\\n        </mat-error>\\n      </mat-form-field>\\n      <button type=\\\"submit\\\" mat-raised-button translate color=\\\"accent\\\" class=\\\"mx-12\\\">\\n        {{'Apply' | translate}}\\n      </button>\\n\\n    </form>\\n  </div>\\n</ng-template>\\n<ng-template #attendanceSummary>\\n  <mat-list fxLayout=\\\"row wrap\\\" class=\\\"pt-0 confirm-table border\\\">\\n    <mat-list-item fxFlex=\\\"50\\\" fxLayout=\\\"column\\\">\\n      {{'Date' | translate}}\\n    </mat-list-item>\\n    <mat-list-item fxFlex=\\\"50\\\" fxLayout=\\\"column\\\">\\n      {{getFormattedDateBySchoolDateFormat(markAttendanceDate)}}\\n    </mat-list-item>\\n    <mat-list-item fxFlex=\\\"50\\\" fxLayout=\\\"column\\\">\\n      {{'No. of Students Present' | translate}}\\n    </mat-list-item>\\n    <mat-list-item fxFlex=\\\"50\\\" fxLayout=\\\"column\\\">\\n      {{presentCount}}\\n    </mat-list-item>\\n    <mat-list-item fxFlex=\\\"50\\\" fxLayout=\\\"column\\\">\\n      {{'No. of Students Absent' | translate}}\\n    </mat-list-item>\\n    <mat-list-item fxFlex=\\\"50\\\" fxLayout=\\\"column\\\">\\n      {{absentCount}}\\n    </mat-list-item>\\n    <mat-list-item fxFlex=\\\"50\\\" fxLayout=\\\"column\\\">\\n      {{'No. of Leave Requests' | translate}}\\n    </mat-list-item>\\n    <mat-list-item fxFlex=\\\"50\\\" fxLayout=\\\"column\\\">\\n      {{leaveCount}}\\n    </mat-list-item>\\n  </mat-list>\\n  <p fxLayoutAlign=\\\"center center\\\">{{'Please Confirm to Mark Attendance Completion' | translate}}</p>\\n  <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"end center\\\">\\n    <button mat-raised-button color=\\\"primary\\\" class=\\\"mr-16\\\" matDialogClose (click)=\\\"close()\\\"\\n      >{{'Cancel' | translate}}</button>\\n    <button mat-raised-button color=\\\"accent\\\" (click)=\\\"submitAttendance()\\\">{{'Confirm' | translate}}</button>\\n  </div>\\n</ng-template>\\n<ng-template #leaveInfoDialog>\\n  <div fxLayout=\\\"column\\\">\\n  <h2 mat-dialog-title>Leave Request</h2>\\n  <!-- <div mat-dialog-content>\\n    <p>{{'Date: ' + leaveInfo.from + ' - ' + leaveInfo.to }}</p>\\n    <p>{{'Reason:'}}</p>\\n    <div> {{leaveInfo.reason}}</div>\\n  </div> -->\\n  <div fxLayout=\\\"column\\\" fxFlex=\\\"100\\\">\\n    <div fxLayout=\\\"row\\\" class=\\\"pb-8\\\">\\n      <div class=\\\"w-68\\\">Date</div>\\n      <div><span class=\\\"px-4\\\">:</span>{{ leaveInfo.from + ' - ' + leaveInfo.to }}</div>\\n    </div>\\n    <div fxLayout=\\\"row\\\" class=\\\"pb-8\\\">\\n      <div class=\\\"w-68\\\">Reason</div>\\n      <div><span class=\\\"px-4\\\">:</span><span class=\\\"break-word\\\">{{leaveInfo.reason}}</span></div>\\n    </div>\\n    <div fxLayout=\\\"row\\\" class=\\\"pb-8\\\">\\n      <div class=\\\"w-68\\\">Status</div>\\n      <div><span class=\\\"px-4\\\">:</span><span class=\\\"break-word\\\">{{leaveInfo.status}}</span></div>\\n    </div>\\n    <div fxLayout=\\\"row\\\">\\n      <button *ngIf=\\\"leaveInfo.attachment\\\" mat-button color=\\\"accent\\\" type=\\\"button\\\" (click)=\\\"openAttachment()\\\">\\n        <mat-icon class=\\\"mr-4\\\">attachment</mat-icon> View Request Letter\\n      </button>\\n    </div>\\n  </div>\\n</div>\\n  <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"end center\\\" mat-dialog-actions class=\\\"pb-12\\\">\\n   \\n    <button mat-raised-button mat-dialog-close color=\\\"primary\\\">{{'Close' | translate}}</button>\\n  </div>\\n</ng-template>\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL21vZHVsZXMvYWNhZGVtaWNzL2F0dGVuZGFuY2Uvc3R1ZGVudC1hdHRlbmRhbmNlL3N0dWRlbnQtYXR0ZW5kYW5jZS5jb21wb25lbnQuc2NzcyJ9 */\"","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { CommonComponent } from 'app/shared/common/common.component';\nimport { CommonService } from 'app/service/common.service';\nimport { StudentDBService } from 'app/service/student-information-system/student-db.service';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { AppSettings, Pattern } from 'app/app.constants';\nimport { StudentAttendanceFilterView } from '../model/student-attendance-filter-view';\nimport { StudentAttendanceService } from 'app/service/student-attendance/student-attendance.service';\nimport { StudentAttendanceStatusView } from '../model/student-attendance-status-view';\nimport { StudentAttendanceAddView } from '../model/student-attendance-add-view';\nimport { SchoolAcademicSessionService } from 'app/service/academic-service/api/school-academic-session.service';\nimport { GradeSetupService } from 'app/service/grading-service/api/grade-setup.service';\nimport { ClassAttendanceView } from '../model/class-attendance-view';\nimport { CustomDialogComponent } from '../../../../shared/custom-dialog/custom-dialog.component';\nimport { MatDialog, MatSnackBar } from '@angular/material';\nimport { StoreService } from 'app/service/file-management/store.service';\nimport { ClassesConfigService } from 'app/service/general/api/classes-config.service';\nimport { ClassTimetableService } from 'app/service/class-schedules/class-time-table.service';\nimport { FocusMonitor } from '@angular/cdk/a11y';\n\n@Component({\n  selector: 'app-student-attendance',\n  templateUrl: './student-attendance.component.html',\n  styleUrls: ['./student-attendance.component.scss'],\n  providers: [StudentDBService, StudentAttendanceService, SchoolAcademicSessionService, GradeSetupService, ClassesConfigService, ClassTimetableService]\n})\nexport class StudentAttendanceComponent extends CommonComponent implements OnInit {\n  currentComponent = 'StudentAttendanceComponent';\n  @ViewChild('attendanceSummary') attendanceSummary;\n  @ViewChild('leaveInfoDialog') leaveInfoDialog;\n  filterViewModel: StudentAttendanceFilterView;\n  studentAttendanceForm: FormGroup;\n  massActionForm: FormGroup;\n  columns = [\n    { field: 'select', header: '', sortRequired: false, searchRequired: false },\n    { field: 'studentName', header: 'Name', sort: true },\n    { field: 'rollNumber', header: 'Roll Number', sort: true },\n    { field: 'admissionNumber', header: 'Admission No', sort: true },\n    { field: 'onLeave', header: 'Leave Request', sort: true, anchorDialog: true },\n    { field: 'present', header: 'Present', radioAction: true, icon: 'check', activeClass: 'green-fg' },\n    { field: 'absent', header: 'Absent', radioAction: true, icon: 'clear', activeClass: 'red-fg' }\n  ];\n  tableSettings: {};\n  totalRowsCount: number;\n  pageCnt: number;\n  rows: Array<any>;\n  classes: Array<{ label: string, value: string }> = [];\n  filterdStudents: any;\n  validate = true;\n  selectedIdsList = [];\n  markAttendanceDate = '';\n  dateFormat: any;\n  studentAttendance: StudentAttendanceAddView;\n  classAttendanceView: ClassAttendanceView;\n  attendanceStatus: StudentAttendanceStatusView;\n  sections: any[];\n  additionalButton: any = {};\n  private leaveCount: number;\n  private presentCount: number;\n  private absentCount: number;\n  private leaveInfo: any;\n  leaveRequestAttachment: any;\n  classAttendanceMarked: false;\n  academicSession: any;\n  isStaffLogin = false;\n  staffInfo: any[] = [];\n  hideButtons = false;\n  submitted = false;\n  isSingleClick: Boolean = true;\n  constructor(public commonService: CommonService, private studentDbService: StudentDBService,\n    public studentAttendanceService: StudentAttendanceService,\n    public gradeSetupService: GradeSetupService, private storeService: StoreService,\n    private dialogRef: MatDialog, public classTimetableService: ClassTimetableService, public snackBar: MatSnackBar, private _focusMonitor: FocusMonitor) {\n    super();\n    this.initializeFilterView();\n    this.initializeTableSettings();\n    this.dateFormat = this.getSchoolDateFormat();\n  }\n\n  ngOnInit(): void {\n    this.academicSession = JSON.parse(localStorage.getItem('_as'));\n    this.initializeForm();\n    const modelTableComponent = this.getModelComponent(this.currentComponent);\n    if (modelTableComponent) {\n      this.filterViewModel = modelTableComponent;\n      if (this.filterViewModel.classIds && this.filterViewModel.classIds[0]) {\n        this.studentAttendanceForm.patchValue({\n          classId: this.filterViewModel.classIds[0]\n        });\n      }\n      if (this.filterViewModel.sectionIds && this.filterViewModel.sectionIds[0]) {\n        this.studentAttendanceForm.patchValue({\n          sectionId: this.filterViewModel.sectionIds[0]\n        });\n      }\n      if (this.studentAttendanceForm.valid) {\n        this.getClasses(true);\n        this.getAllFilteredStudents();\n      } else {\n        this.getClasses();\n      }\n    } else {\n      this.getClasses();\n    }\n  }\n  initializeForm(): void {\n    this.studentAttendanceForm = new FormGroup({\n      attendanceDate: new FormControl(this.getDefaultDate(), [Validators.required]),\n      classId: new FormControl('', [Validators.required]),\n      sectionId: new FormControl(null, [Validators.required]),\n    });\n    this.massActionForm = new FormGroup({\n      massOption: new FormControl('absent', [Validators.required]),\n    });\n  }\n  getClasses(isManualChange = false): void {\n    this.classes = [];\n    this.gradeSetupService.schoolAcademicClasses().subscribe(response => {\n      if (response.listViews && response.listViews.length) {\n        response.listViews.forEach(element => {\n          this.classes.push({\n            label: element.name,\n            value: element.id\n          });\n        });\n        if (isManualChange) {\n          this.onSelectClass({ value: this.studentAttendanceForm.value.classId }, isManualChange);\n        }\n      }\n    }, error => {\n      this.errorResponse(error);\n    });\n  }\n  // on selection of class\n  onSelectClass(data: any, isManualChange = false): void {\n    this.sections = [];\n    if (!isManualChange) {\n      this.studentAttendanceForm.controls.sectionId.setValue(null);\n    }\n    this.classTimetableService.classTimetableSectionsGet(data.value).subscribe(response => {\n      if (response.classTimetableSectionsView != null) {\n        if (response.classTimetableSectionsView.length) {\n          response.classTimetableSectionsView.map(x => {\n            this.sections.push({ value: x.sectionId, label: x.sectionName + ' (' + x.boardName + ')' });\n          });\n        }\n      }\n    }, error => {\n      this.errorResponse(error);\n    });\n  }\n  initializeFilterView(): void {\n    this.filterViewModel = {\n      sortBy: '',\n      sortOrder: 0,\n      attendanceDate: new Date(),\n      classIds: [],\n      sectionIds: [],\n      admissionNumber: [],\n      studentNames: [],\n      rollNumber: [],\n      absentOrPresents: []\n    };\n  }\n\n  setColumnHeaders(): void {\n    this.columns = [\n      { field: 'studentName', header: 'Name', sort: true },\n      { field: 'rollNumber', header: 'Roll Number', sort: true },\n      { field: 'admissionNumber', header: 'Admission No', sort: true },\n      { field: 'onLeave', header: 'Leave Request', sort: true, anchorDialog: true },\n      { field: 'present', header: 'Present', radioAction: true, icon: 'check', activeClass: 'green-fg' },\n      { field: 'absent', header: 'Absent', radioAction: true, icon: 'clear', activeClass: 'red-fg' }\n    ];\n  }\n  onPresentAbsent(data): void {\n    if (data[data.columnName] || this.hideButtons) {\n      return;\n    }\n    this.attendanceStatus = {};\n    this.attendanceStatus.id = data.studentAttendanceId;\n    this.attendanceStatus.schoolAcademicSessionStudentId = data.schoolAcademicSessionStudentId;\n    this.attendanceStatus.calendarDate = new Date(this.markAttendanceDate);\n    this.attendanceStatus.leaveRequestId = data.leaveRequestId === '' ? null : data.leaveRequestId;\n    this.setAttendanceStatus(data.columnName);\n    this.studentAttendance = {};\n    this.studentAttendance.studentAttendanceStatusViews = [this.attendanceStatus];\n    this.studentAttendanceService.markStudentAbsentPresent(this.studentAttendance)\n      .subscribe(res => {\n        this.setStudentData(res, this.attendanceStatus);\n      }, error => {\n        this.errorResponse(error);\n      });\n\n  }\n  setStudentData(res, data): void {\n    // this.massActionForm.reset();\n    this.getAllFilteredStudents();\n  }\n  initializeTableSettings(): void {\n    this.tableSettings = {\n      rows: [],\n      columns: this.columns,\n      tablename: 'Student Attendance Details',\n      componentName: this.currentComponent,\n      model: this.filterViewModel,\n      visibleSelectAll: true,\n      isSelectRowRequired: true,\n      showSelectAll: true,\n    };\n  }\n  onSearchHeaderForm(): void {\n    if (this.studentAttendanceForm.valid) {\n      this.filterViewModel.classIds = [this.studentAttendanceForm.value.classId];\n      this.filterViewModel.sectionIds = [this.studentAttendanceForm.value.sectionId];\n      this.getAllFilteredStudents();\n    } else {\n      this.submitted = false;\n    }\n  }\n  tableData(_event: any): void {\n    Object.assign(_event, {\n      classIds: this.filterViewModel.classIds,\n      sectionIds: this.filterViewModel.sectionIds\n    });\n    this.filterViewModel = _event;\n    this.getAllFilteredStudents();\n  }\n\n  getAllFilteredStudents(): void {\n    this.markAttendanceDate = this.commonService.customDateFormat(this.studentAttendanceForm.value.attendanceDate, Pattern.DATE_FORMATE_YEAR).date;\n    this.setModelDataTableComponent(this.currentComponent, this.filterViewModel);\n    this.studentAttendanceService.studentAttendances(\n      this.filterViewModel.studentNames,\n      this.markAttendanceDate,\n      this.filterViewModel.admissionNumber,\n      this.filterViewModel.rollNumber,\n      this.filterViewModel.classIds,\n      this.filterViewModel.sectionIds,\n      this.filterViewModel.absentOrPresents,\n      this.filterViewModel.sortOrder,\n      this.filterViewModel.sortBy,\n    )\n      .subscribe(res => {\n        this.submitted = true;\n        this.bindStudentResult(res);\n      }, error => {\n        this.errorResponse(error);\n      });\n  }\n\n  bindStudentResult(data: any): void {\n    if (data.classAndSections && this.isStaffLogin) {\n      this.staffInfo = data.classAndSections;\n      this.checkStaff();\n    }\n    if (!data.pagedStudentAttendance) {\n      this.rows = [];\n      this.totalRowsCount = 0;\n      this.pageCnt = 0;\n    } else {\n      this.rows = data.pagedStudentAttendance;\n      this.rows.forEach(row => {\n        row.onLeave = (row.onLeave) ? 'YES' : '';\n      });\n      this.totalRowsCount = data.pagedStudentAttendance.length;\n      this.massActionForm.controls['massOption'].patchValue('absent');\n    }\n    this.absentCount = data.studentAbsentCount;\n    this.leaveCount = data.studentLeaveCount;\n    this.presentCount = data.studentPresentCount;\n\n    this.classAttendanceMarked = data.classAttMarked;\n    this.additionalButton = {};\n    if (this.rows.length > 0 && !this.hideButtons) {\n      if (!this.classAttendanceMarked) {\n        this.additionalButton = {\n          name: 'Mark Attendance Complete',\n          class: 'accent',\n          textColor: 'text-uppercase',\n          clickAction: 'markAttendanceComplete'\n        };\n      }\n      else {\n        this.additionalButton = {\n          name: 'Attendance Completed',\n          // class: 'disabled',\n          textColor: 'button-disabled-label text-uppercase',\n          disable: 'disabled',\n          clickAction: ''\n        };\n      }\n    }\n\n    this.tableSettings = {\n      model: this.filterViewModel,\n      rows: this.rows,\n      columns: this.columns,\n      totalRowsCount: this.totalRowsCount,\n      pageCnt: this.pageCnt,\n      tablename: 'Student Attendance Details',\n      componentName: this.currentComponent,\n      isPaginationRequired: false,\n      filtersList: data.filters,\n      isSelectRowRequired: !this.hideButtons,\n      isMultiDeleteRequired: false,\n      visibleSelectAll: !this.hideButtons,\n      showSelectAll: !this.hideButtons,\n      headerOperations: {\n        addingForm: {\n          required: false\n        },\n        additionalButtons: [\n          this.additionalButton\n        ]\n      }\n    };\n  }\n\n  onSelectOption(value: string): void {\n    if (value.length >= 3) {\n      this.filterdStudents = [];\n      this.studentDbService.studentNames(value).subscribe((res) => {\n        if (res.students.length > 0) {\n          res.students.forEach((student: any) => this.filterdStudents.push({\n            label: student.studentName,\n            value: student.id,\n            class: student.currentClassName,\n            section: student.currentSectionName\n          })\n          );\n        }\n      });\n    }\n    else {\n      this.filterdStudents = [];\n    }\n  }\n\n\n  markAttendanceComplete(event): void {\n    if (event === 'markAttendanceComplete') {\n      const absentStudentsList = this.rows.filter(function (element): boolean {\n        return element.absent;\n      });\n\n      this.dialogRef.open(CustomDialogComponent, {\n        disableClose: true,\n        data: { template: this.attendanceSummary, title: 'Attendance Summary' },\n      });\n    }\n  }\n\n  submitAttendance(): void {\n    this.classAttendanceView = {};\n    if (this.filterViewModel.classIds && this.filterViewModel.classIds[0]) {\n      this.classAttendanceView.classId = this.filterViewModel.classIds[0];\n    }\n    if (this.filterViewModel.sectionIds && this.filterViewModel.sectionIds[0]) {\n      this.classAttendanceView.sectionId = this.filterViewModel.sectionIds[0];\n    }\n    this.classAttendanceView.calendarDate = new Date(this.markAttendanceDate);\n    this.studentAttendanceService.markAttendance(this.classAttendanceView)\n      .subscribe(res => this.setStudentData(res, this.classAttendanceView),\n        err => this.errorResponse(err));\n    this.dialogRef.closeAll();\n  }\n\n  selectedRows(event): void {\n    this.selectedIdsList = event.length ? event : [];\n  }\n  massActionsApply(): void {\n    if (this.isSingleClick) {\n      this.isSingleClick = false;\n      this.studentAttendance = {};\n      this.selectedIdsList.forEach((studentAttendanceRecord: any) => {\n        this.attendanceStatus = {};\n        this.attendanceStatus.id = studentAttendanceRecord.studentAttendanceId;\n        this.attendanceStatus.schoolAcademicSessionStudentId = studentAttendanceRecord.schoolAcademicSessionStudentId;\n        this.attendanceStatus.calendarDate = new Date(this.markAttendanceDate);\n        this.attendanceStatus.leaveRequestId = studentAttendanceRecord.leaveRequestId === '' ? null : studentAttendanceRecord.leaveRequestId;\n        this.setAttendanceStatus(this.massActionForm.value.massOption);\n        if (this.studentAttendance.studentAttendanceStatusViews === undefined) {\n          this.studentAttendance.studentAttendanceStatusViews = [];\n        }\n        this.studentAttendance.studentAttendanceStatusViews.push(this.attendanceStatus);\n      });\n      this.studentAttendanceService.markStudentAbsentPresent(this.studentAttendance)\n        .subscribe(res => {\n          this.setStudentData(res, this.attendanceStatus);\n        }, error => {\n          this.errorResponse(error);\n        });\n      setTimeout(() => {\n        this.isSingleClick = true;\n      }, 1000);\n    }\n  }\n  setAttendanceStatus(action): void {\n    if (action === 'present') {\n      this.attendanceStatus.isPresent = '1';\n      this.attendanceStatus.isAbscent = '0';\n    } else if (action === 'absent') {\n      this.attendanceStatus.isPresent = '0';\n      this.attendanceStatus.isAbscent = '1';\n    }\n    else {\n      this.attendanceStatus.isPresent = '0';\n      this.attendanceStatus.isAbscent = '0';\n    }\n  }\n  showLeaveInfo(row): void {\n    const rowData = row.leaveRequestInfo;\n    this.leaveInfo = {};\n    this.leaveInfo.from = this.commonService.customDateFormat(rowData.fromDate, this.dateFormat).date;\n    this.leaveInfo.to = this.commonService.customDateFormat(rowData.toDate, this.dateFormat).date;\n    this.leaveInfo.reason = rowData.reason;\n    this.leaveInfo.attachment = rowData.fileValue;\n    this.leaveInfo.status = rowData.leaveRequestStatus;\n    this.dialogRef.open(CustomDialogComponent, {\n      disableClose: true,\n      panelClass: 'custom-modalbox',\n      width: '400px',\n      data: { template: this.leaveInfoDialog },\n    });\n  }\n\n  openAttachment(): void {\n    if (this.leaveInfo.attachment) {\n      this.leaveRequestAttachment = this.storeService.getFilePath(this.leaveInfo.attachment);\n      window.open(this.leaveRequestAttachment);\n    }\n  }\n\n  resetFilter(): void {\n    // this.studentAttendanceForm.reset();\n  }\n\n  checkStaff(): void {\n    if (this.isStaffLogin) {\n      if (this.staffInfo.find(x => x.classId === this.studentAttendanceForm.controls.classId.value\n        && x.sectionId === this.studentAttendanceForm.controls.sectionId.value && x.isClassTeacher === true) === undefined) {\n        this.hideButtons = true;\n      } else {\n        this.hideButtons = false;\n      }\n    }\n  }\n  close(): void {\n    setTimeout(() => {\n      this._focusMonitor.stopMonitoring(document.getElementById('navButton_1'));\n    });\n  }\n\n}\n","/**\n * BaseWebAPI\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: v1\n *\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent } from '@angular/common/http';\n\nimport { Observable } from 'rxjs/Observable';\nimport { ClassAttendanceView } from 'app/modules/academics/attendance/model/class-attendance-view';\nimport { StudentAttendanceAddView } from 'app/modules/academics/attendance/model/student-attendance-add-view';\nimport { BaseModuleConfig, BaseUrlConfig, ModuleConfig } from 'app/url.config';\nimport { Configuration } from '../base/configuration';\nimport { BASE_PATH } from '../base/variables';\nimport { CommonComponent } from '../../shared/common/common.component';\n\nimport { CustomHttpUrlEncodingCodec } from '../base/encoder';\n\n\n\n@Injectable()\nexport class StudentAttendanceService {\n   protected basePath = BaseUrlConfig.BasePath + ModuleConfig.Base;\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * MarkAttendance\n     *\n     * @param authorization access token\n     * @param classAttendanceView\n     * @param schoolId SchoolId in Encrypted Form\n     * @param instituteId InstituteId in Encrypted Form\n     * @param userId UserId in Encrypted Form\n     * @param academicSessionId AcademicSessionId in Encrypted Form\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public markAttendance(classAttendanceView?: ClassAttendanceView, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public markAttendance(classAttendanceView?: ClassAttendanceView, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public markAttendance(classAttendanceView?: ClassAttendanceView, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public markAttendance(classAttendanceView?: ClassAttendanceView, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json-patch+json',\n            'application/json',\n            'text/json',\n            'application/_*+json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<any>(`${this.basePath}/StudentAttendance/mark-attendance`,\n        // return this.httpClient.post<any>('http://localhost:8013/StudentAttendance/mark-attendance',\n            classAttendanceView,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * MarkStudentAbsentPresent\n     *\n     * @param authorization access token\n     * @param studentAttendanceStatusView\n     * @param schoolId SchoolId in Encrypted Form\n     * @param instituteId InstituteId in Encrypted Form\n     * @param userId UserId in Encrypted Form\n     * @param academicSessionId AcademicSessionId in Encrypted Form\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public markStudentAbsentPresent(studentAttendanceStatusView?: StudentAttendanceAddView, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public markStudentAbsentPresent(studentAttendanceStatusView?: StudentAttendanceAddView, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public markStudentAbsentPresent(studentAttendanceStatusView?: StudentAttendanceAddView, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public markStudentAbsentPresent(studentAttendanceStatusView?: StudentAttendanceAddView, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json-patch+json',\n            'application/json',\n            'text/json',\n            'application/_*+json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n        \n        return this.httpClient.post<any>(`${this.basePath}/StudentAttendance/student-attendance`,\n\n        // return this.httpClient.post<any>('http://localhost:8013/StudentAttendance/student-attendance',\n            studentAttendanceStatusView,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * StudentAttendances Search\n     *\n     * @param authorization access token\n     * @param studentNames Gets or Sets StudentNames\n     * @param attendanceDate Gets or Sets AttendanceDate\n     * @param admissionNumber Gets or Sets AdmissionNumber\n     * @param rollNumber Gets or Sets RollNumbers\n     * @param attendanceStatuses Gets or Sets AttendanceStatuses\n     * @param classIds Gets or Sets ClassIds\n     * @param sectionIds Gets or Sets CurrentSectionName\n     * @param absentOrPresents Gets or Sets CurrentSectionName\n     * @param sortOrder Gets or Sets SortColumn\n     * @param sortBy Gets or Sets SortBy-\\&quot;StudentName ParentName AdmissionNumber Class Status DOB\\&quot;\n     * @param schoolId SchoolId in Encrypted Form\n     * @param instituteId InstituteId in Encrypted Form\n     * @param userId UserId in Encrypted Form\n     * @param academicSessionId AcademicSessionId in Encrypted Form\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public studentAttendances(studentNames?: Array<string>, attendanceDate?: any,\n                              admissionNumber?: Array<string>,\n                              rollNumber?: Array<string>,\n                              classIds?: Array<string>, sectionIds?: Array<string>,\n                              absentOrPresents?: Array<string>, sortOrder?: 0 | 1 | -1,\n                              sortBy?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public studentAttendances(studentNames?: Array<string>, attendanceDate?: any, admissionNumber?: Array<string>,\n                              rollNumber?: Array<string>, classIds?: Array<string>,\n                              sectionIds?: Array<string>, absentOrPresents?: Array<string>, sortOrder?: 0 | 1 | -1,\n                              sortBy?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public studentAttendances(studentNames?: Array<string>, attendanceDate?: any, admissionNumber?: Array<string>,\n                              rollNumber?: Array<string>, classIds?: Array<string>,\n                              sectionIds?: Array<string>, absentOrPresents?: Array<string>, sortOrder?: 0 | 1 | -1,\n                              sortBy?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public studentAttendances(studentNames?: Array<string>, attendanceDate?: any, admissionNumber?: Array<string>,\n                              rollNumber?: Array<string>, classIds?: Array<string>,\n                              sectionIds?: Array<string>, absentOrPresents?: Array<string>, sortOrder?: 0 | 1 | -1,\n                              sortBy?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (studentNames) {\n            studentNames.forEach((element) => {\n                queryParameters = queryParameters.append('StudentNames', <any>element);\n            });\n        }\n        if (attendanceDate !== undefined && attendanceDate !== null) {\n            queryParameters = queryParameters.set('AttendanceDate', attendanceDate);\n        }\n        if (admissionNumber) {\n            admissionNumber.forEach((element) => {\n                queryParameters = queryParameters.append('AdmissionNumber', <any>element);\n            });\n        }\n        if (rollNumber) {\n            rollNumber.forEach((element) => {\n                queryParameters = queryParameters.append('RollNumber', <any>element);\n            });\n        }\n        if (classIds) {\n            classIds.forEach((element) => {\n                queryParameters = queryParameters.append('ClassIds', <any>element);\n            });\n        }\n        if (sectionIds) {\n            sectionIds.forEach((element) => {\n                queryParameters = queryParameters.append('SectionIds', <any>element);\n            });\n        }\n        if (absentOrPresents) {\n            absentOrPresents.forEach((element) => {\n                queryParameters = queryParameters.append('AbsentOrPresents', <any>element);\n            });\n        }\n        if (sortOrder !== undefined && sortOrder !== null) {\n            queryParameters = queryParameters.set('SortOrder', <any>sortOrder);\n        }\n        if (sortBy !== undefined && sortBy !== null) {\n            queryParameters = queryParameters.set('SortBy', <any>sortBy);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/StudentAttendance`,\n        // return this.httpClient.get<any>('http://localhost:8013/StudentAttendance',\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n"],"sourceRoot":""}