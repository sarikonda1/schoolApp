{"version":3,"sources":["webpack:///./src/app/service/class-schedules/holiday-configuration.service.ts"],"names":[],"mappings":"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","file":"default~app-modules-bulk-data-add-bulk-add-module~app-modules-configuration-class-schedules-class-sc~94e0a111.js","sourcesContent":["/**\n * BaseWebAPI\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: v1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional } from '@angular/core';\nimport {\n    HttpClient, HttpHeaders, HttpParams,\n    HttpResponse, HttpEvent\n} from '@angular/common/http';\nimport { Observable } from 'rxjs/Observable';\nimport { BASE_PATH } from '../base/variables';\nimport { Configuration } from '../base/configuration';\nimport { HolidaysView } from 'app/modules/configuration/class-schedules/model/holidays-view';\nimport { CustomHttpUrlEncodingCodec } from '../base/encoder';\nimport { HolidayViewModel } from 'app/modules/configuration/class-schedules/model/holiday-view-model';\nimport { CommonComponent } from 'app/shared/common/common.component';\nimport { ModuleConfig, BaseUrlConfig, CourseModuleConfig } from 'app/url.config';\nimport { HolidayBulkPostView } from 'app/modules/configuration/class-schedules/model/holiday-bulk-post-view';\n\n\n@Injectable()\nexport class HolidayConfigurationService {\n\n    // protected basePath = 'http://localhost:8013';\n    protected basePath = BaseUrlConfig.BasePath + ModuleConfig.Base;\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string,\n        @Optional() configuration: Configuration, protected commonComponent: CommonComponent) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * To create holidays under schoolAcademicSession\n     * \n     * @param holidayViewModel \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public createHolidays(holidayViewModel?: HolidaysView, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public createHolidays(holidayViewModel?: HolidaysView, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public createHolidays(holidayViewModel?: HolidaysView, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public createHolidays(holidayViewModel?: HolidaysView, observe: any = 'body', reportProgress: boolean = false): Observable<any> {\n\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json-patch+json',\n            'application/json',\n            'text/json',\n            'application/_*+json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<any>(`${this.basePath}` + CourseModuleConfig._SchoolHolidays_AddHoliday,\n            holidayViewModel,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Delete Holidays\n     * \n     * @param ids \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteHolidays(ids: Array<string>, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public deleteHolidays(ids: Array<string>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public deleteHolidays(ids: Array<string>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public deleteHolidays(ids: Array<string>, observe: any = 'body', reportProgress: boolean = false): Observable<any> {\n\n        if (ids === null || ids === undefined) {\n            throw new Error('Required parameter ids was null or undefined when calling deleteHolidays.');\n        }\n\n        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });\n        if (ids) {\n            ids.forEach((element) => {\n                queryParameters = queryParameters.append('Ids', <any>element);\n            });\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.delete<any>(`${this.basePath}` + CourseModuleConfig._SchoolHolidays_RemoveHoliday,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * To Fetch Holiday Details By holidayId\n     * \n     * @param id \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public fetchHolidayById(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public fetchHolidayById(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public fetchHolidayById(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public fetchHolidayById(id: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling fetchHolidayById.');\n        }\n\n        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });\n        queryParameters = this.commonComponent.setQueryParams(id, 'Id', queryParameters);\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}` + CourseModuleConfig._SchoolHolidays_FetchHolidayListByID,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n    * Search Holidays\n    * \n    * @param classId Gets or sets ClassId\n    * @param sectionId Gets or sets SectionId\n    * @param fromDateBegin Gets or sets FromDateBegin\n    * @param fromDateEnd Gets or sets FromDateEnd\n    * @param toDateBegin Gets or sets ToDateBegin\n    * @param toDateEnd Gets or sets ToDateEnd\n    * @param holidayReason Gets or sets HolidayReason\n    * @param isStaffHoliday Gets or sets IsStaffHoliday\n    * @param sortOrder Gets or Sets SortOrder\n    * @param sortBy Gets or Sets SortBy\n    * @param pageNumber \n    * @param pageSize \n    \n    * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n    * @param reportProgress flag to report request and response progress.\n    */\n    public searchHolidays(classId?: Array<number>, sectionId?: Array<number>, fromDate?: string, fromDateBegin?: string, fromDateEnd?: string,\n        toDate?: string, toDateBegin?: string, toDateEnd?: string, holidayReason?: Array<string>, isStaffHoliday?: Array<string>, sortOrder?: 0 | 1 | -1, sortBy?: string,\n        failedRecords?: Array<string>, pageNumber?: number, pageSize?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public searchHolidays(classId?: Array<number>, sectionId?: Array<number>, fromDate?: string, fromDateBegin?: string, fromDateEnd?: string,\n        toDate?: string, toDateBegin?: string, toDateEnd?: string, holidayReason?: Array<string>, isStaffHoliday?: Array<string>, sortOrder?: 0 | 1 | -1, sortBy?: string,\n        failedRecords?: Array<string>, pageNumber?: number, pageSize?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public searchHolidays(classId?: Array<number>, sectionId?: Array<number>, fromDate?: string, fromDateBegin?: string, fromDateEnd?: string,\n        toDate?: string, toDateBegin?: string, toDateEnd?: string, holidayReason?: Array<string>, isStaffHoliday?: Array<string>, sortOrder?: 0 | 1 | -1, sortBy?: string,\n        failedRecords?: Array<string>, pageNumber?: number, pageSize?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public searchHolidays(classId?: Array<number>, sectionId?: Array<number>, fromDate?: string, fromDateBegin?: string, fromDateEnd?: string,\n        toDate?: string, toDateBegin?: string, toDateEnd?: string, holidayReason?: Array<string>, isStaffHoliday?: Array<string>, sortOrder?: 0 | 1 | -1, sortBy?: string,\n        failedRecords?: Array<string>, pageNumber?: number, pageSize?: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {\n\n\n        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });\n        queryParameters = this.commonComponent.setQueryParams(classId, 'ClassId', queryParameters);\n        queryParameters = this.commonComponent.setQueryParams(sectionId, 'SectionId', queryParameters);\n\n        queryParameters = this.commonComponent.setQueryParams(fromDate, 'FromDate', queryParameters);\n        queryParameters = this.commonComponent.setQueryParams(fromDateBegin, 'FromDateBegin', queryParameters);\n        queryParameters = this.commonComponent.setQueryParams(fromDateEnd, 'FromDateEnd', queryParameters);\n\n        queryParameters = this.commonComponent.setQueryParams(toDate, 'ToDate', queryParameters);\n        queryParameters = this.commonComponent.setQueryParams(toDateBegin, 'ToDateBegin', queryParameters);\n        queryParameters = this.commonComponent.setQueryParams(toDateEnd, 'ToDateEnd', queryParameters);\n\n        queryParameters = this.commonComponent.setQueryParams(holidayReason, 'HolidayReason', queryParameters);\n        queryParameters = this.commonComponent.setQueryParams(isStaffHoliday, 'IsStaffHoliday', queryParameters);\n        queryParameters = this.commonComponent.setQueryParams(sortOrder, 'SortOrder', queryParameters);\n        queryParameters = this.commonComponent.setQueryParams(sortBy, 'SortBy', queryParameters);\n        queryParameters = this.commonComponent.setQueryParams(failedRecords, 'FailedRecords', queryParameters);\n        queryParameters = this.commonComponent.setQueryParams(pageNumber, 'PageNumber', queryParameters);\n        queryParameters = this.commonComponent.setQueryParams(pageSize, 'PageSize', queryParameters);\n\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/HolidayConfiguration/holidayslist-details`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * To Update Holiday Details By HolidayId\n     * \n     * @param holidayViewModel \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateHoliday(holidayViewModel?: HolidayViewModel, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public updateHoliday(holidayViewModel?: HolidayViewModel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public updateHoliday(holidayViewModel?: HolidayViewModel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public updateHoliday(holidayViewModel?: HolidayViewModel, observe: any = 'body', reportProgress: boolean = false): Observable<any> {\n\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json-patch+json',\n            'application/json',\n            'text/json',\n            'application/_*+json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.put<any>(`${this.basePath}` + CourseModuleConfig._SchoolHolidays_UpdateHoliday,\n            holidayViewModel,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Direct File Upload from IFormFile\n     * \n     * @param authorization access token\n     * @param contentType \n     * @param contentDisposition \n     * @param headers \n     * @param length \n     * @param name \n     * @param fileName \n     * @param file \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public readHolidaysBulkData(file?: any): Observable<any> {\n        const input = new FormData();\n        input.append('file', file, file.name);\n        const headers = new HttpHeaders({\n            'Content-Type': 'application/json'\n        });\n\n        return this.httpClient\n            .post(`${this.basePath}` + '/HolidayConfiguration/read-valiadate-excel-csv-files', input, { headers: headers });\n    }\n\n    /**\n    * holidays bulk post\n    * \n    * @param authorization access token\n    * @param holidayViewModel \n    * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n    * @param reportProgress flag to report request and response progress.\n    */\n    public holidaysBulkPost(holidayViewModel?: HolidayBulkPostView, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public holidaysBulkPost(holidayViewModel?: HolidayBulkPostView, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public holidaysBulkPost(holidayViewModel?: HolidayBulkPostView, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public holidaysBulkPost(holidayViewModel?: HolidayBulkPostView, observe: any = 'body', reportProgress: boolean = false): Observable<any> {\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json-patch+json',\n            'application/json',\n            'text/json',\n            'application/_*+json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n        return this.httpClient.post<any>(`${this.basePath}/HolidayConfiguration/holidays-bulk-post`,\n            holidayViewModel,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n"],"sourceRoot":""}