{"version":3,"sources":["webpack:///./src/app/modules/academics/events/add-edit-school-event/add-edit-school-event.component.html","webpack:///./src/app/modules/academics/events/add-edit-school-event/add-edit-school-event.component.scss","webpack:///./src/app/modules/academics/events/add-edit-school-event/add-edit-school-event.component.ts","webpack:///./src/app/service/academic-service/api/events.service.ts"],"names":[],"mappings":"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","file":"default~app-modules-academics-events-events-module~app-modules-staff-staff-module~app-modules-studen~d75228cd.js","sourcesContent":["module.exports = \"<div class=\\\"p-32\\\">\\n  <div class=\\\"text-uppercase font-size-18 pl-12\\\" translate>{{eventTitle}}</div>\\n  <div class=\\\"w-100-p simple-table-container radius-t-20 mat-elevation-z3 mb-16\\\">\\n    <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"end center\\\" class=\\\"border-bottom p-16\\\">\\n      <button mat-raised-button class=\\\"text-uppercase\\\" color=\\\"primary\\\" (click)=\\\"return()\\\"><span\\n          translate>Back</span></button>\\n      <button mat-button (click)=\\\"getHelpText('School Events')\\\">\\n        <mat-icon class=\\\"grey-600-fg\\\">info</mat-icon>\\n      </button>\\n    </div>\\n    <div *ngIf=\\\"editDetails\\\">\\n      <form class=\\\"p-20\\\" [formGroup]=\\\"eventForm\\\" (ngSubmit)=\\\"onSubmit(eventForm)\\\" #eventDataForm=\\\"ngForm\\\">\\n        <div fxLayout=\\\"column\\\" fxLayout.gt-sm=\\\"row wrap\\\" class=\\\"pt-12\\\">\\n          <mat-form-field fxFlexFill appearance=\\\"outline\\\" fxLayout=\\\"column\\\" fxFlex=\\\"100\\\" fxFlex.gt-sm=\\\"50\\\"\\n            class=\\\"pr-sm-20\\\">\\n            <mat-label #eventTypeId translate>Event Type</mat-label>\\n            <mat-select formControlName=\\\"eventTypeId\\\" required (selectionChange)=\\\"onEventTypeSelect($event.value)\\\"\\n              [disabled]=\\\"(addEventId !== undefined)\\\">\\n              <mat-option *ngFor=\\\"let eventTypes of eventTypesList\\\" [value]=\\\"eventTypes.value\\\">\\n                {{eventTypes.label}}\\n              </mat-option>\\n            </mat-select>\\n            <mat-error>\\n              <app-validation [labelName]='eventTypeId.innerText' [validationControl]=\\\"eventForm.controls.eventTypeId\\\"\\n                [doValidate]=\\\"true\\\">\\n              </app-validation>\\n            </mat-error>\\n          </mat-form-field>\\n\\n          <mat-form-field appearance=\\\"outline\\\" fxFlexFill fxFlex.gt-sm=\\\"50\\\" fxFlex=\\\"100\\\" fxLayout=\\\"column\\\"\\n            class=\\\"icon-center\\\">\\n            <mat-label #announcedDate translate>Announce Date</mat-label>\\n            <input matInput (keyup)=\\\"forceValidation('announcedDate',eventForm)\\\" [matDatepicker]=\\\"announcedDatePicker\\\"\\n              formControlName=\\\"announcedDate\\\" required  [min]=\\\"startDate\\\" [max]=\\\"endDate\\\">\\n            <mat-datepicker-toggle matSuffix [for]=\\\"announcedDatePicker\\\"></mat-datepicker-toggle>\\n            <mat-datepicker #announcedDatePicker></mat-datepicker>\\n            <mat-error>\\n              <app-validation [labelName]='announcedDate.innerText'\\n                [validationControl]=\\\"eventForm.controls.announcedDate\\\" [doValidate]=\\\"true\\\">\\n              </app-validation>\\n            </mat-error>\\n          </mat-form-field>\\n\\n          <mat-form-field fxFlexFill appearance=\\\"outline\\\" fxLayout=\\\"column\\\" fxFlex=\\\"100\\\" fxFlex.gt-sm=\\\"50\\\"\\n            class=\\\"pr-sm-20 icon-center pt-12\\\" *ngIf=\\\"!hideFromToDate\\\">\\n            <mat-label #fromDate translate>From Date</mat-label>\\n            <input matInput [matDatepicker]=\\\"fromDatePicker\\\" (keyup)=\\\"forceValidation('fromDate',eventForm)\\\" required\\n              formControlName=\\\"fromDate\\\" [min]=\\\"eventForm.controls.announcedDate.value\\\" [max]=\\\"endDate\\\">\\n            <mat-datepicker-toggle matSuffix [for]=\\\"fromDatePicker\\\"></mat-datepicker-toggle>\\n            <mat-datepicker #fromDatePicker></mat-datepicker>\\n\\n            <mat-error>\\n              <app-validation [labelName]='fromDate.innerText' [validationControl]=\\\"eventForm.controls.fromDate\\\"\\n                [doValidate]=\\\"true\\\">\\n              </app-validation>\\n            </mat-error>\\n          </mat-form-field>\\n\\n          <mat-form-field fxFlexFill appearance=\\\"outline\\\" fxLayout=\\\"column\\\" fxFlex=\\\"100\\\" fxFlex.gt-sm=\\\"50\\\"\\n            class=\\\"icon-center pt-12\\\" *ngIf=\\\"!hideFromToDate\\\">\\n            <mat-label #toDate translate>To Date</mat-label>\\n            <input matInput [matDatepicker]=\\\"toDatePicker\\\" (keyup)=\\\"forceValidation('toDate',eventForm)\\\" required\\n              formControlName=\\\"toDate\\\"\\n              [min]=\\\"eventForm.controls.fromDate.value || eventForm.controls.announcedDate.value\\\" [max]=\\\"endDate\\\">\\n            <mat-datepicker-toggle matSuffix [for]=\\\"toDatePicker\\\"></mat-datepicker-toggle>\\n            <mat-datepicker #toDatePicker></mat-datepicker>\\n            <mat-error>\\n              <app-validation [labelName]='toDate.innerText' [validationControl]=\\\"eventForm.controls.toDate\\\"\\n                [doValidate]=\\\"true\\\">\\n              </app-validation>\\n            </mat-error>\\n          </mat-form-field>\\n        </div>\\n        <div fxLayout=\\\"column\\\" fxLayout.gt-sm=\\\"row\\\" class=\\\"pt-12\\\">\\n          <ng-container *ngIf=\\\"loadData | async\\\">\\n            <af-select [isValueIsObject]=\\\"isValueIsObject\\\" class=\\\"pr-sm-20\\\" fxLayout=\\\"column\\\" fxFlex=\\\"100\\\"\\n              fxFlex.gt-sm=\\\"50\\\" appearance=\\\"outline\\\" [optionGroupRequired]=\\\"true\\\" [groups]=\\\"classSections\\\"\\n              placeholder=\\\"{{'Class And Sections' | translate}}\\\" [multiple]=\\\"true\\\" formControlName=\\\"eventClassSections\\\"\\n              (selectionChange)=\\\"onSelectSection($event)\\\" [value]=\\\"selectedItems\\\"></af-select>\\n          </ng-container>\\n          <mat-form-field fxFlexFill appearance=\\\"outline\\\" fxLayout=\\\"column\\\" fxFlex=\\\"100\\\" fxFlex.gt-sm=\\\"50\\\"\\n            class=\\\"pr-sm-20\\\" *ngIf=\\\"!hideFromToDate\\\">\\n            <mat-label #statusId translate>Status</mat-label>\\n            <mat-select formControlName=\\\"statusId\\\" required>\\n              <mat-option *ngFor=\\\"let eventStatus of eventstatusList\\\" [value]=\\\"eventStatus.value\\\">\\n                {{eventStatus.label}}\\n              </mat-option>\\n            </mat-select>\\n            <mat-error>\\n              <app-validation [labelName]='statusId.innerText' [validationControl]=\\\"eventForm.controls.statusId\\\"\\n                [doValidate]=\\\"true\\\">\\n              </app-validation>\\n            </mat-error>\\n          </mat-form-field>\\n          <div fxLayout=\\\"column\\\" class=\\\"pt-sm-12 pr-sm-20\\\" fxFlex=\\\"100\\\" fxFlex.gt-sm=\\\"40\\\">\\n            <label class=\\\"mb-12 fuse-black-500-fg\\\" #IsPostCalender>{{'Do you Want to post this Event\\n              Information To School Calender ?' | translate}}</label>\\n            <mat-radio-group fxLayout=\\\"row\\\" fxFlex=\\\"100\\\" required formControlName=\\\"isPostToCalender\\\">\\n              <mat-radio-button class=\\\"ml-24\\\" value=\\\"Yes\\\">Yes</mat-radio-button>\\n              <mat-radio-button class=\\\"ml-24\\\" value=\\\"No\\\">No</mat-radio-button>\\n            </mat-radio-group>\\n          </div>\\n          <div fxLayout=\\\"column\\\">\\n            <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"start center\\\" class=\\\"mt-8\\\">\\n              <button mat-raised-button color=\\\"primary\\\" (click)=\\\"fileInput.value='';fileInput.click()\\\" type=\\\"button\\\"\\n                translate>\\n                {{'Upload Image' | translate}}\\n              </button>\\n\\n              <button *ngIf=\\\"eventForm?.value?.attachment?.fileName\\\" mat-icon-button  type=\\\"button\\\">\\n                <mat-icon class=\\\"mb-4 grey-600-fg\\\" (click)=\\\"fileInput.value='';clearImages(true)\\\">highlight_off\\n                </mat-icon>\\n              </button>\\n            </div>\\n            <input [accept]=\\\"'.doc,.docx,image/jpeg,image/jpg,image/png,application/pdf,image/*'\\\" id=\\\"fileInput\\\"\\n              (change)=\\\"imgChanged(fileInput.files,eventForm)\\\" fxHide type=\\\"file\\\" #fileInput>\\n            <div *ngIf=\\\"!isUpdateOrView\\\"\\n              [style.visibility]=\\\"eventForm?.value?.attachment?.fileName ? 'visible' : 'hidden'\\\"\\n              class=\\\"pt-4 primary-300-fg font-size-12 text-left pr-36\\\">\\n              {{eventForm?.value?.attachment?.fileName}}\\n            </div>\\n            <a *ngIf=\\\"isUpdateOrView\\\" target=\\\"_blank\\\" [href]=\\\"nameImgProp\\\"\\n              [style.visibility]=\\\"eventForm?.value?.attachment?.fileName ? 'visible' : 'hidden'\\\"\\n              class=\\\"pt-4 primary-300-fg font-size-12 text-left pr-36\\\">View Attachment</a>\\n          </div>\\n        </div>\\n\\n        <div fxLayout=\\\"row\\\" class=\\\"pt-12\\\">\\n          <mat-form-field fxFlexFill appearance=\\\"outline\\\" fxLayout=\\\"column\\\" fxFlex=\\\"100\\\">\\n            <mat-label #eventDescription translate>Event Description</mat-label>\\n            <textarea formControlName=\\\"eventDescription\\\" matInput required\\n              (keyup)=\\\"preventSpace($event,'eventForm','eventDescription')\\\"\\n              (blur)=\\\"trimTextBoxSpaces('eventForm','eventDescription')\\\"></textarea>\\n            <mat-error>\\n              <app-validation [labelName]='eventDescription.innerText'\\n                [validationControl]=\\\"eventForm.controls.eventDescription\\\" [doValidate]=\\\"true\\\">\\n              </app-validation>\\n            </mat-error>\\n          </mat-form-field>\\n        </div>\\n        <div fxLayout.gt-sm=\\\"row\\\" fxLayout=\\\"column\\\" fxLayoutAlign=\\\"end\\\">\\n          <div fxLayout=\\\"column\\\" class=\\\"mt-8 mr-20\\\" translate *ngIf=\\\"!hideFromToDate\\\">After Submission of\\n            Event,Participants &Finalist & winners\\n            Can be selected for Competition Events</div>\\n          <button mat-raised-button class=\\\"mx-sm-12 text-uppercase\\\" type=\\\"button\\\" (click)=\\\"return()\\\"\\n            translate>{{'Cancel' | translate}}</button>\\n          <button mat-raised-button color=\\\"accent\\\" class=\\\"text-uppercase\\\"\\n            translate>{{(updateButtonShow ? 'Update':'Create') | translate}}</button>\\n        </div>\\n      </form>\\n    </div>\\n\\n    <div *ngIf=\\\"viewDetails\\\" class=\\\"p-24\\\" fxLayout=\\\"column\\\">\\n      <form class=\\\"p-20\\\" [formGroup]=\\\"eventForm\\\" (ngSubmit)=\\\"onSubmit(eventForm)\\\" fxLayout=\\\"column\\\"\\n        fxLayout.gt-sm=\\\"row\\\">\\n        <div fxLayout=\\\"column\\\" fxFlex.gt-sm=\\\"{{fxFlexSize}}\\\" fxFlex=\\\"100\\\">\\n          <div fxLayout=\\\"column\\\" fxLayout.gt-sm=\\\"row\\\" class=\\\"pt-12\\\">\\n            <mat-form-field appearance=\\\"outline\\\" fxFlexFill fxFlex.gt-xs=\\\"33\\\" fxFlex=\\\"100\\\" fxLayout=\\\"column\\\">\\n              <mat-label #announcedDate translate>Announce Date</mat-label>\\n              <input matInput (keyup)=\\\"forceValidation('announcedDate',eventForm)\\\" [matDatepicker]=\\\"announcedDatePicker\\\"\\n                formControlName=\\\"announcedDate\\\" readonly>\\n              <mat-datepicker #announcedDatePicker></mat-datepicker>\\n            </mat-form-field>\\n\\n            <mat-form-field fxFlexFill appearance=\\\"outline\\\" fxLayout=\\\"column\\\" fxFlex=\\\"100\\\" fxFlex.gt-sm=\\\"34\\\"\\n              class=\\\"px-sm-20\\\">\\n              <mat-label #fromDate translate>From Date</mat-label>\\n              <input matInput [matDatepicker]=\\\"fromDatePicker\\\" (keyup)=\\\"forceValidation('fromDate',eventForm)\\\" required\\n                formControlName=\\\"fromDate\\\" [min]=\\\"eventForm.controls.announcedDate.value\\\" readonly>\\n              <mat-datepicker #fromDatePicker [startAt]=\\\"eventForm.value.announcedDate\\\"></mat-datepicker>\\n            </mat-form-field>\\n\\n            <mat-form-field fxFlexFill appearance=\\\"outline\\\" fxLayout=\\\"column\\\" fxFlex=\\\"100\\\" fxFlex.gt-sm=\\\"33\\\"\\n              class=\\\"pr-sm-20\\\">\\n              <mat-label #toDate translate>To Date</mat-label>\\n              <input matInput [matDatepicker]=\\\"toDatePicker\\\" (keyup)=\\\"forceValidation('toDate',eventForm)\\\" required\\n                formControlName=\\\"toDate\\\"\\n                [min]=\\\"eventForm.controls.fromDate.value || eventForm.controls.announcedDate.value\\\" readonly>\\n              <mat-datepicker #toDatePicker [startAt]=\\\"eventForm.value.fromDate\\\"></mat-datepicker>\\n            </mat-form-field>\\n          </div>\\n\\n          <div fxLayout=\\\"column\\\" fxLayout.gt-sm=\\\"row\\\" class=\\\"pt-12\\\">\\n            <mat-form-field fxFlexFill appearance=\\\"outline\\\" fxLayout=\\\"column\\\" fxFlex=\\\"100\\\" fxFlex.gt-sm=\\\"33\\\">\\n              <mat-label translate>Event Type</mat-label>\\n              <input matInput [value]=\\\"eventTypeName? eventTypeName: ''\\\" readonly>\\n            </mat-form-field>\\n            <mat-form-field fxFlexFill appearance=\\\"outline\\\" fxLayout=\\\"column\\\" fxFlex=\\\"100\\\" fxFlex.gt-sm=\\\"34\\\"\\n              class=\\\"px-sm-20\\\">\\n              <mat-label translate>Status</mat-label>\\n              <input matInput [value]=\\\"eventTypeStatus ? eventTypeStatus: ''\\\" readonly>\\n            </mat-form-field>\\n            <div fxLayout=\\\"column\\\" class=\\\"pt-sm-12 pr-sm-20\\\" fxFlex=\\\"100\\\" fxFlex.gt-sm=\\\"33\\\">\\n              <label class=\\\"mb-12 fuse-black-500-fg\\\" #IsPostCalender translate>Do you Want to post this Event\\n                Information To School Calender ?</label>\\n              <mat-radio-group fxLayout=\\\"row\\\" fxFlex=\\\"100\\\" disabled=\\\"true\\\" formControlName=\\\"isPostToCalender\\\">\\n                <mat-radio-button class=\\\"ml-24\\\" value=\\\"Yes\\\">Yes</mat-radio-button>\\n                <mat-radio-button class=\\\"ml-24\\\" value=\\\"No\\\">No</mat-radio-button>\\n              </mat-radio-group>\\n            </div>        \\n          </div>        \\n            <div fxLayout=\\\"row\\\" class=\\\"py-16\\\" *ngIf=\\\"attachmentDetails\\\">\\n              <button mat-raised-button type=\\\"button\\\" color=\\\"primary\\\" (click)=\\\"download()\\\">\\n                <mat-icon class=\\\"mr-8\\\">attachment</mat-icon><span translate>Preview Attachment</span>\\n              </button>\\n            </div>          \\n          <div fxLayout=\\\"row\\\" class=\\\"pt-12\\\">\\n            <mat-form-field fxFlexFill appearance=\\\"outline\\\" fxLayout=\\\"column\\\" fxFlex=\\\"100\\\" class=\\\"pr-sm-20\\\">\\n              <mat-label translate>Event Description</mat-label>\\n              <textarea formControlName=\\\"eventDescription\\\" matInput required readonly></textarea>\\n            </mat-form-field>\\n          </div>\\n        </div>\\n        <div fxLayout=\\\"column\\\" fxFlex.gt-sm=\\\"40\\\" fxFlex=\\\"100\\\" *ngIf=\\\"viewClassSection?.length\\\">\\n          <mat-list class=\\\"pt-0 confirm-table border mt-16\\\" fxLayout.gt-sm=\\\"row wrap\\\" fxLayoutAlign=\\\"center start\\\">\\n            <mat-list-item fxLayout=\\\"column\\\" fxFlex=\\\"50\\\" class=\\\"stickyx\\\"><strong translate>Class</strong>\\n            </mat-list-item>\\n            <mat-list-item fxLayout=\\\"column\\\" fxFlex=\\\"50\\\" class=\\\"stickyx\\\"><strong translate>Section</strong>\\n            </mat-list-item>\\n            <div *ngFor=\\\"let classSection of viewClassSection\\\" fxLayout=\\\"row\\\" fxFlex=\\\"100\\\" class=\\\"border-top\\\">\\n              <mat-list-item fxLayout=\\\"column\\\" fxFlex=\\\"50\\\">{{classSection.className}}</mat-list-item>\\n              <mat-list-item fxLayout=\\\"column\\\" fxFlex=\\\"50\\\">{{classSection.sectionName}}</mat-list-item>\\n            </div>\\n          </mat-list>\\n        </div>\\n      </form>\\n    </div>\\n  </div>\\n  <ng-template #eventsActions>\\n    <form [formGroup]=\\\"winnerPositionForm\\\" (ngSubmit)=\\\"onClickArray(winnerPositionForm, winnerPositionForm.value.positionId)\\\" #winnerForm=\\\"ngForm\\\">\\n      <div fxLayout=\\\"row\\\" fxFlex=\\\"100\\\" fxLayoutAlign=\\\"center center\\\">\\n        <mat-form-field class=\\\"pr-20 pl-4 mw-200\\\">\\n          <mat-label #sectionId translate>Winner Type</mat-label>\\n          <mat-select placeholder=\\\"Winner Type\\\" formControlName=\\\"positionId\\\" required>\\n            <mat-option *ngFor=\\\"let positionDetail of positionDetails\\\" [value]=\\\"positionDetail.value\\\">\\n              {{ positionDetail.label }}</mat-option>\\n          </mat-select>\\n          <mat-error>\\n            <app-validation [labelName]='sectionId.innerText'\\n              [validationControl]=\\\"winnerPositionForm.controls.positionId\\\" [doValidate]=\\\"winnerValidate\\\">\\n            </app-validation>\\n          </mat-error>\\n        </mat-form-field>\\n        <div fxLayout=\\\"column\\\">\\n          <button type=\\\"submit\\\" mat-raised-button class=\\\"text-uppercase mr-8\\\" translate color=\\\"accent\\\"\\n            [disabled]=\\\"!winnerPositionForm.value.positionId\\\">\\n            {{'Apply' | translate}}\\n          </button>\\n        </div>\\n      </div>\\n    </form>\\n  </ng-template>\\n  <ng-template #eventsFinalistActions>\\n    <form [formGroup]=\\\"winnerPositionForm\\\" (ngSubmit)=\\\"onClickArray(winnerPositionForm,winnerPositionForm.value.positionFinalistId)\\\" #winnerForm=\\\"ngForm\\\">\\n      <div fxLayout=\\\"row\\\" fxFlex=\\\"100\\\" fxLayoutAlign=\\\"center center\\\">\\n        <mat-form-field class=\\\"pr-20 pl-4 mw-200\\\">\\n          <mat-label #sectionId translate>Winner Type</mat-label>\\n          <mat-select formControlName=\\\"positionFinalistId\\\" placeholder=\\\"Winner Type\\\" required>\\n            <mat-option *ngFor=\\\"let positionDetail of positionFinalistDetails\\\" [value]=\\\"positionDetail.value\\\">\\n              {{ positionDetail.label }}</mat-option>\\n          </mat-select>\\n          <mat-error>\\n            <app-validation [labelName]='sectionId.innerText'\\n              [validationControl]=\\\"winnerPositionForm.controls.positionFinalistId\\\" [doValidate]=\\\"winnerValidate\\\">\\n            </app-validation>\\n          </mat-error>\\n        </mat-form-field>\\n        <div fxLayout=\\\"column\\\">\\n          <button type=\\\"submit\\\" mat-raised-button class=\\\"text-uppercase mr-8\\\" translate color=\\\"accent\\\"\\n            [disabled]=\\\"!winnerPositionForm.value.positionFinalistId\\\">\\n            {{'Apply' | translate}}\\n          </button>\\n        </div>\\n      </div>\\n    </form>\\n  </ng-template>\\n  <ng-template #eventsWinnerActions>\\n    <form [formGroup]=\\\"winnerPositionForm\\\" (ngSubmit)=\\\"onClickArray(winnerPositionForm, winnerPositionForm.value.positionWinnerId)\\\"\\n      #winnerForm=\\\"ngForm\\\">\\n      <div fxLayout=\\\"row\\\" fxFlex=\\\"100\\\" fxLayoutAlign=\\\"center center\\\">\\n        <mat-form-field class=\\\"pr-20 pl-4 mw-200\\\">\\n          <mat-label #sectionId translate>Winner Type</mat-label>\\n          <mat-select formControlName=\\\"positionWinnerId\\\" placeholder=\\\"Winner Type\\\" required>\\n            <mat-option *ngFor=\\\"let positionDetail of positionWinnerDetails\\\" [value]=\\\"positionDetail.value\\\">\\n              {{ positionDetail.label }}</mat-option>\\n          </mat-select>\\n          <mat-error>\\n            <app-validation [labelName]='sectionId.innerText'\\n              [validationControl]=\\\"winnerPositionForm.controls.positionWinnerId\\\" [doValidate]=\\\"winnerValidate\\\">\\n            </app-validation>\\n          </mat-error>\\n        </mat-form-field>\\n        <div fxLayout=\\\"column\\\">\\n          <button type=\\\"submit\\\" mat-raised-button class=\\\"text-uppercase mr-8\\\" translate color=\\\"accent\\\"\\n            [disabled]=\\\"!winnerPositionForm.value.positionWinnerId\\\">\\n            {{'Apply' | translate}}\\n          </button>\\n        </div>\\n      </div>\\n    </form>\\n  </ng-template>\\n  <mat-accordion multi class=\\\"tabs-table-padding0\\\" *ngIf=\\\"addEventId !== undefined && isCompetation\\\">\\n    <mat-expansion-panel *ngIf=\\\"isPanel\\\" class=\\\"mb-12\\\">\\n      <mat-expansion-panel-header>\\n        <mat-panel-title translate class=\\\"text-uppercase\\\">Student List</mat-panel-title>\\n      </mat-expansion-panel-header>\\n      <app-table [massActionTemplateRef]=\\\"eventsActions\\\" [settings]=\\\"tableSettings\\\"\\n        (selectedRows)='selectedRows($event)' (getTableData)='participantStudentDetails($event)'>\\n      </app-table>\\n    </mat-expansion-panel>\\n    <mat-expansion-panel (opened)=\\\"panelOpenState = true\\\" (closed)=\\\"panelOpenState = false\\\" class=\\\"mb-12\\\">\\n      <mat-expansion-panel-header>\\n        <mat-panel-title translate class=\\\"text-uppercase\\\">List Of Participants</mat-panel-title>\\n      </mat-expansion-panel-header>\\n      <app-table [massActionTemplateRef]=\\\"eventsFinalistActions\\\" [settings]=\\\"participantTabSetting\\\"\\n        (selectedRows)='selectedRows($event)' (deleteAllRows)='deleteAll()'>\\n      </app-table>\\n    </mat-expansion-panel>\\n    <mat-expansion-panel (opened)=\\\"panelOpenState = true\\\" (closed)=\\\"panelOpenState = false\\\" class=\\\"mb-12\\\">\\n      <mat-expansion-panel-header>\\n        <mat-panel-title translate class=\\\"text-uppercase\\\">List Of Finalist</mat-panel-title>\\n      </mat-expansion-panel-header>\\n      <app-table [massActionTemplateRef]=\\\"eventsWinnerActions\\\" [settings]=\\\"finalistTableSettings\\\"\\n        (selectedRows)='selectedRows($event)' (deleteAllRows)='deleteFinalist()'>\\n      </app-table>\\n    </mat-expansion-panel>\\n    <mat-expansion-panel (opened)=\\\"panelOpenState = true\\\" (closed)=\\\"panelOpenState = false\\\" class=\\\"mb-12\\\">\\n      <mat-expansion-panel-header>\\n        <mat-panel-title translate class=\\\"text-uppercase\\\">List Of Winners</mat-panel-title>\\n      </mat-expansion-panel-header>\\n      <app-table [settings]=\\\"winnerTabSetting\\\" (selectedRows)='selectedRows($event)' (deleteAllRows)='deleteWinner()'>\\n      </app-table>\\n    </mat-expansion-panel>\\n  </mat-accordion>\\n</div>\\n<!-- Coustom Dialog for winning Position-->\\n<ng-template #winnerPositionTemplate>\\n  <mat-table [dataSource]=\\\"selectedStudentIds\\\" class=\\\"mh-300\\\">\\n    <ng-container matColumnDef=\\\"studentName\\\">\\n      <mat-header-cell *matHeaderCellDef class=\\\"px-4\\\">Student Name</mat-header-cell>\\n      <mat-cell *matCellDef=\\\"let element\\\" class=\\\"px-4\\\"> {{element.studentName}}</mat-cell>\\n    </ng-container>\\n    <ng-container matColumnDef=\\\"className\\\">\\n      <mat-header-cell *matHeaderCellDef class=\\\"px-4\\\"> Class Name </mat-header-cell>\\n      <mat-cell *matCellDef=\\\"let element\\\" class=\\\"px-4\\\"> {{element.className}} </mat-cell>\\n    </ng-container>\\n    <ng-container matColumnDef=\\\"sectionName\\\">\\n      <mat-header-cell *matHeaderCellDef class=\\\"px-4\\\"> Section Name </mat-header-cell>\\n      <mat-cell *matCellDef=\\\"let element\\\" class=\\\"px-4\\\"> {{element.sectionName}} </mat-cell>\\n    </ng-container>\\n    <ng-container matColumnDef=\\\"admissionNumber\\\">\\n      <mat-header-cell *matHeaderCellDef class=\\\"px-4\\\"> Admission Number </mat-header-cell>\\n      <mat-cell *matCellDef=\\\"let element\\\" class=\\\"px-4\\\"> {{element.admissionNumber}} </mat-cell>\\n    </ng-container>\\n    <ng-container matColumnDef=\\\"position\\\">\\n      <mat-header-cell *matHeaderCellDef class=\\\"px-4\\\"> Winning Position </mat-header-cell>\\n      <mat-cell *matCellDef=\\\"let element\\\" class=\\\"px-4\\\">\\n        <mat-form-field fxFlexFill fxLayout=\\\"column\\\" fxFlex=\\\"100\\\" class=\\\"input-padding0\\\">\\n          <mat-label>Position</mat-label>\\n          <mat-select (selectionChange)=\\\"element.winningPosition=($event.value)\\\">\\n            <mat-option *ngFor=\\\"let winninPosition of winninPositions\\\" [value]=\\\"winninPosition.value\\\">\\n              {{winninPosition.label}}\\n            </mat-option>\\n          </mat-select>\\n        </mat-form-field>\\n      </mat-cell>\\n    </ng-container>\\n    <mat-header-row *matHeaderRowDef=\\\"displayedColumns; sticky: true\\\"></mat-header-row>\\n    <mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></mat-row>\\n  </mat-table>\\n  <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"end center\\\" class=\\\"pt-16\\\">\\n    <button class=\\\"mr-12 text-uppercase\\\" mat-raised-button type=\\\"button\\\" matDialogClose (click)=\\\"cancelClick()\\\"\\n      translate>{{'Cancel' | translate}}</button>\\n    <button mat-raised-button type=\\\"submit\\\" class=\\\"text-uppercase\\\" color=\\\"accent\\\" (click)=\\\"winningPositionClick()\\\"\\n      translate>{{'Submit' | translate}}</button>\\n  </div>\\n</ng-template>\\n<!-- End Coustom Dialog  -->\"","module.exports = \".confirm-table, .mh-300 {\\n  overflow-y: auto;\\n  max-height: 280px; }\\n\\n.mw-200 {\\n  min-width: 200px; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi92YXIvd3d3L2h0bWwvc2Nob29sLW1hbmFnZW1lbnQtZnVzZS9zcmMvYXBwL21vZHVsZXMvYWNhZGVtaWNzL2V2ZW50cy9hZGQtZWRpdC1zY2hvb2wtZXZlbnQvYWRkLWVkaXQtc2Nob29sLWV2ZW50LmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0ksZ0JBQWdCO0VBQ2hCLGlCQUNKLEVBQUE7O0FBQ0E7RUFDSSxnQkFBZ0IsRUFBQSIsImZpbGUiOiJzcmMvYXBwL21vZHVsZXMvYWNhZGVtaWNzL2V2ZW50cy9hZGQtZWRpdC1zY2hvb2wtZXZlbnQvYWRkLWVkaXQtc2Nob29sLWV2ZW50LmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLmNvbmZpcm0tdGFibGUsIC5taC0zMDB7XG4gICAgb3ZlcmZsb3cteTogYXV0bztcbiAgICBtYXgtaGVpZ2h0OiAyODBweFxufVxuLm13LTIwMHtcbiAgICBtaW4td2lkdGg6IDIwMHB4O1xufSJdfQ== */\"","import { Component, OnInit, ViewChild, ElementRef, ChangeDetectorRef, TemplateRef } from '@angular/core';\nimport { GradeSetupService } from 'app/service/grading-service/api/grade-setup.service';\nimport { ClassTimetableService } from 'app/service/class-schedules/class-time-table.service';\nimport { CommonComponent } from 'app/shared/common/common.component';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { RouteConfig } from 'app/url.config';\nimport { EventsService } from 'app/service/academic-service/api/events.service';\nimport { EventView } from '../model/event-view-model';\nimport { FormGroup, FormControl, Validators, FormBuilder } from '@angular/forms';\nimport { CustomDialogComponent } from 'app/shared/custom-dialog/custom-dialog.component';\nimport { AppSettings } from 'app/app.constants';\nimport * as HttpStatus from 'http-status-codes';\nimport { MatDialog } from '@angular/material/dialog';\nimport { CommonService } from 'app/service/common.service';\nimport { EventParticipantFilterView } from '../model/event-participant-filter-view';\nimport { AttachmentViewModel } from '../../student-admissions/model/attachment-view-model';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { EventDataView } from '../model/event-data-view';\nimport { StoreService } from 'app/service/file-management/store.service';\nimport { SchoolAcademicSessionService } from 'app/service/academic-service/api/school-academic-session.service';\nimport { MatSnackBar } from '@angular/material';\nimport { Location } from '@angular/common';\nimport { CalenderService } from 'app/service/staff/calender.service';\n\n@Component({\n  selector: 'app-add-edit-school-event',\n  templateUrl: './add-edit-school-event.component.html',\n  styleUrls: ['./add-edit-school-event.component.scss'],\n  providers: [GradeSetupService, ClassTimetableService, EventsService, SchoolAcademicSessionService, CalenderService]\n})\nexport class AddEditSchoolEventComponent extends CommonComponent implements OnInit {\n  @ViewChild('fileInput') fileInput: ElementRef;\n  @ViewChild('winnerPositionTemplate') positionIdValue: TemplateRef<any>;\n  @ViewChild('eventDataForm') eventDataForm;\n  @ViewChild('winnerForm') winnerForm;\n  currentComponent = 'AddEditSchoolEventComponent';\n  displayedColumns: string[] = ['studentName', 'className', 'sectionName', 'admissionNumber', 'position'];\n  formUpdateData: EventDataView;\n  attachmentInfo: AttachmentViewModel;\n  eventParticipantView: any;\n  formData: EventView;\n  eventParticipantFilterView: EventParticipantFilterView;\n\n\n  eventForm: FormGroup;\n  uploadFiles: FormGroup;\n  winnerPositionForm: FormGroup;\n\n  eventTypesList: any = [];\n  eventstatusList: any = [];\n  selectedSection: any;\n  eventId: any;\n  eventDetails: any;\n  finalistDetails: any;\n  participantDetails: any;\n  winnersDetails: any;\n  finalistTableSettings: any;\n  participantTabSetting: any;\n  winnerTabSetting: any;\n  columns: any;\n  flagImageProp: any;\n  positionDetails: any = [];\n  classSection: any = [];\n  selectedClass: any = [];\n  classSections: any = [];\n  test: any[];\n  addEventId: any;\n  tableSettings: any;\n  studentDetails: any;\n  totalItems: any;\n  pageCount: any;\n  selectedStudentIds: any;\n  currentPositionId: any;\n  isFinalist: number;\n  isWinner: number;\n  participantId: any;\n  winninPositions: any;\n  winnerColumns: any;\n  positionWinnerDetails: any;\n  positionFinalistDetails: any;\n  viewClassSection: any;\n  attachmentDetails: any;\n  nameImgProp: any;\n  operation: any;\n  winnerVal = '';\n  isUpdateOrView = false;\n\n  doValidate = false;\n  disableParticipant = true;\n  updateButtonShow: boolean;\n  viewDetails: boolean;\n  editDetails: boolean;\n  isPanel: boolean;\n  winnerValidate = true;\n  eventTitle: string;\n  panelOpenState: boolean;\n  fxFlexSize: string;\n  eventTypeName = '';\n  eventTypeStatus = '';\n  loadData = Promise.resolve(false);\n  selectedItems = [];\n  isValueIsObject = true;\n  isCompetation = false;\n  hideFromToDate = true;\n  eventType: any;\n  statusId: any;\n  startDate: Date;\n  endDate: Date;\n  constructor(private gradeSetupService: GradeSetupService, private classTimetableService: ClassTimetableService, private router: Router,\n    private route: ActivatedRoute, public dialog: MatDialog, public commonService: CommonService,\n    private common: CommonComponent, private eventsService: EventsService, private cd: ChangeDetectorRef,\n    private sanitizer: DomSanitizer,\n    private _fb: FormBuilder,\n    private storeService: StoreService,\n    private schoolAcademicSessionService: SchoolAcademicSessionService,\n    public snackBar: MatSnackBar,\n    public location: Location, private calenderService: CalenderService) {\n    super();\n  }\n\n  ngOnInit(): void {\n    this.isValueIsObject = true;\n    this.eventTitle = 'New Event';\n    this.getClassSections();\n    this.isPanel = true;\n    this.editDetails = true;\n    this.eventParticipantView = {\n      studentId: '',\n      eventId: '',\n      classId: 0,\n      sectionId: 0,\n      isFinalist: 0,\n      isWinner: 0,\n      winningPosition: 0,\n    };\n\n    this.eventParticipantFilterView = {\n      eventId: '',\n      admissionNumber: '',\n      studentName: '',\n      classIds: [],\n      sectionIds: [],\n      studentGroupIds: [],\n      sortBy: AppSettings.ID,\n      sortOrder: AppSettings.SORTORDER,\n      pageNumber: AppSettings.PAGENUMBER,\n      pageSize: AppSettings.PAGESIZE,\n    };\n\n    this.selectedClass = [];\n    this.positionDetails = [\n      { value: 1, label: 'Select as a Participant' },\n      { value: 2, label: 'Select as a Finalist' },\n      { value: 3, label: 'Select as a Winner' }\n    ];\n    this.positionFinalistDetails = [\n      { value: 2, label: 'Select as a Finalist' },\n      { value: 3, label: 'Select as a Winner' }\n    ];\n    this.positionWinnerDetails = [\n      { value: 3, label: 'Select as a Winner' }\n    ];\n    this.winninPositions = [\n      { value: 1, label: '1' },\n      { value: 2, label: '2' },\n      { value: 3, label: '3' },\n      { value: 4, label: '4' },\n      { value: 5, label: '5' },\n    ];\n\n    this.updateButtonShow = false;\n    this.columns = [\n      { field: 'studentName', header: 'Student Name', sort: false },\n      { field: 'admissionNumber', header: 'Admission Number', sort: false },\n      { field: 'groupName', header: 'Student Group', sort: false },\n      { field: 'className', header: 'Class', sort: false },\n      { field: 'sectionName', header: 'Section', sort: false }\n    ];\n    this.winnerColumns = [\n      { field: 'studentName', header: 'Student Name', sort: false },\n      { field: 'admissionNumber', header: 'Admission Number', sort: false },\n      { field: 'groupName', header: 'Student Group', sort: false },\n      { field: 'className', header: 'Class', sort: false },\n      { field: 'sectionName', header: 'Section', sort: false },\n      { field: 'winningPosition', header: 'Winning Position', sort: false }\n\n    ];\n    const modelTableComponent = this.getModelComponent(this.currentComponent);\n    if (modelTableComponent) {\n      this.eventParticipantFilterView = modelTableComponent;\n    }\n    this.tabsettingsIntialization();\n\n\n    this.initializeForm();\n    this.eventstatusList = [];\n    this.eventTypesList = [];\n    this.selectedSection = [];\n\n    this.eventTypes();\n    this.eventStatus();\n    this.uploadFiles = this._fb.group({\n      studentFileNameWithExtension: [''],\n      studentFileValue: [''],\n    });\n\n    this.formData = {\n      eventid: null,\n      announcedDate: new Date(),\n      fromDate: new Date(),\n      toDate: new Date(),\n      eventTypeId: 0,\n      statusId: 0,\n      eventDescription: '',\n      eventClassSections: [],\n      attachment: this.attachmentInfo\n    };\n    this.winnerPositionForm.reset();\n    this.routeParamsData();\n    this.academicPrevAndAfterDates();\n  }\n\n  // get Academic Start Date and End Date with prev and after 3 months\n  academicPrevAndAfterDates(): void {\n    this.calenderService.getAllSchoolCalender().subscribe(res => {\n      this.startDate = res.academicDatesView.startDate;\n      this.endDate = res.academicDatesView.endDate;\n    });\n  }\n\n  tabsettingsIntialization(): void {\n    this.tableSettings = {\n      model: this.eventParticipantFilterView,\n      rows: [],\n      columns: this.columns,\n      componentName: this.currentComponent,\n      padding: true\n    };\n\n    this.finalistTableSettings = {\n      model: this.eventForm,\n      rows: [],\n      columns: this.columns,\n      componentName: this.currentComponent,\n      padding: true\n    };\n    this.participantTabSetting = {\n      model: this.eventForm,\n      rows: [],\n      columns: this.columns,\n      componentName: this.currentComponent,\n      padding: true\n    };\n    this.winnerTabSetting = {\n      model: this.eventForm,\n      rows: [],\n      columns: this.winnerColumns,\n      componentName: this.currentComponent,\n      padding: true\n    };\n  }\n  initializeForm(): void {\n    this.eventForm = new FormGroup({\n      eventId: new FormControl(''),\n      announcedDate: new FormControl('', [Validators.required]),\n      fromDate: new FormControl('', [Validators.required]),\n      toDate: new FormControl('', [Validators.required]),\n      isPostToCalender: new FormControl(AppSettings.NO),\n      eventTypeId: new FormControl('', [Validators.required]),\n      statusId: new FormControl('', [Validators.required]),\n      eventDescription: new FormControl('', [Validators.required, Validators.maxLength(180)]),\n      eventClassSections: new FormControl(''),\n      attachment: new FormControl(null),\n      isPostToCalendar: new FormControl(false, [Validators.required])\n    });\n\n    this.winnerPositionForm = new FormGroup({\n      positionId: new FormControl('', [Validators.required]),\n      positionFinalistId: new FormControl('', [Validators.required]),\n      positionWinnerId: new FormControl('', [Validators.required]),\n    });\n  }\n\n  routeParamsData(): void {\n    this.route.params.subscribe((param) => {\n      if (param.id) {\n        this.addEventId = param.id;\n        this.operation = param.operation;\n      }\n    });\n    if (this.addEventId) {\n      if (this.operation === AppSettings.EDIT || this.operation === undefined) {\n        this.eventTitle = 'Update Event';\n        this.isPanel = true;\n        this.viewDetails = false;\n        this.editDetails = true;\n        this.participantStudentDetails(this.eventParticipantFilterView);\n        this.getEventDetails();\n      }\n      else {\n        this.eventTitle = 'Event Details';\n        this.isPanel = false;\n        this.viewDetails = true;\n        this.editDetails = false;\n        this.getEventDetails();\n      }\n    }\n  }\n\n  getEventDetails(): void {\n    this.eventsService.getByEvents(this.addEventId).subscribe(res => {\n      if (res.eventData != null) {\n        this.updateButtonShow = true;\n        this.disableParticipant = false;\n        this.eventDetails = res.eventData[0];\n        this.eventForm.patchValue(this.eventDetails);\n        this.onEventTypeSelect(this.eventForm.value.eventTypeId);\n        this.eventForm.controls['isPostToCalender'].setValue(this.eventDetails.isPostToCalender === 1 ? AppSettings.YES : AppSettings.NO);\n        this.finalistDetails = this.eventDetails.finalistDetails;\n        this.participantDetails = this.eventDetails.participantDetails;\n        this.winnersDetails = this.eventDetails.winnersDetails;\n        this.classSection = this.eventDetails.eventClassSections;\n        this.viewClassSection = this.eventDetails.eventClassSections;\n        this.assignEventTypesStatus();      \n\n        if (this.viewClassSection.length) {\n          this.fxFlexSize = '60';\n        }\n        else {\n          this.fxFlexSize = '100';\n        }\n        this.attachmentDetails = this.eventDetails.attachment.fileName;\n        if (this.eventDetails.attachment && this.eventDetails.attachment.fileName) {\n          this.nameImgProp = this.storeService.getFilePath(this.attachmentDetails);\n          this.isUpdateOrView = true;\n          const that = this;\n          that.flagImageProp = {\n            src: that.sanitizer.bypassSecurityTrustResourceUrl(this.storeService.getFilePath(this.attachmentDetails))\n          };\n          this.storeService.storeFileEncryptByFileNameGet(this.attachmentDetails)\n            .subscribe(data => {\n              if (data) {\n                that.eventForm.controls.attachment.patchValue({ fileName: data.fileNameWithExtension, fileValue: data.value });\n              }\n            });\n          that.cd.detectChanges();\n        }\n        else { this.isUpdateOrView = false; }\n        const selectedSections = this.eventForm.controls['eventClassSections'].value || [];\n\n        if (this.operation === AppSettings.VIEW_EVENTS) {\n          this.finalistTableSettings = this.tabSettings(this.finalistDetails, this.columns, false, false, true);\n          this.winnerTabSetting = this.tabSettings(this.winnersDetails, this.winnerColumns, false, false, true);\n          this.participantTabSetting = this.tabSettings(this.participantDetails, this.columns, false, false, true);\n        }\n        else {\n          this.selectedItems = [];\n          this.classSection.forEach(e => {\n            this.selectedItems.push({ label: e.sectionName, value: { classId: e.classId, sectionId: e.sectionId }, isValueObject: true, });\n          });\n          this.onSelectSection(this.selectedItems);\n          this.finalistTableSettings = this.tabSettings(this.finalistDetails, this.columns, true, true, true);\n          this.winnerTabSetting = this.tabSettings(this.winnersDetails, this.winnerColumns, true, true, true);\n          this.participantTabSetting = this.tabSettings(this.participantDetails, this.columns, true, true, true);\n        }\n        // this.onEventTypeSelect(this.eventForm.value.eventTypeId);\n      }\n    },\n      error => {\n        this.errorResponse(error);\n      });\n  }\n  tabSettings(rows, columns, isSelectRowRequired, visibleSelectAll, padding): any {\n    return {\n      model: this.eventForm,\n      rows: rows,\n      columns: columns,\n      componentName: this.currentComponent,\n      isPaginationRequired: false,\n      isSelectRowRequired: isSelectRowRequired,\n      visibleSelectAll: visibleSelectAll,\n      padding: padding\n    };\n  }\n\n  assignEventTypesStatus(): void {\n    if (this.eventDetails !== undefined &&\n      this.eventDetails.eventTypeId != null && this.eventTypesList.filter(obj => obj.value === this.eventDetails.eventTypeId)[0] !== undefined) {\n      this.eventTypeName = this.eventTypesList.filter(obj => obj.value === this.eventDetails.eventTypeId)[0].label;\n    }\n    if (this.eventDetails !== undefined && this.eventDetails.statusId != null && this.eventstatusList.filter(obj => obj.value === this.eventDetails.statusId)[0] !== undefined) {\n      this.eventTypeStatus = this.eventstatusList.filter(obj => obj.value === this.eventDetails.statusId)[0].label;\n    }\n  }\n\n  // get Classes\n  getClassSections(): void {\n    this.schoolAcademicSessionService.academicClassSections().subscribe(response => {\n      this.classResponse(response);\n    },\n      error => {\n        this.errorResponse(error);\n      });\n\n  }\n\n  classResponse(data: any): void {\n    this.test = data.classSectionsDataView;\n    this.test.forEach(classdata => {\n      const classObj = [];\n      classObj['name'] = classdata.className;\n      classObj['items'] = [];\n      classdata.sectionViewModel.forEach(section => {\n        classObj['items'].push({\n          label: section.name,\n          value: { classId: classdata.classId, sectionId: section.id }\n        });\n      });\n      this.classSections.push(classObj);\n    });\n    this.loadData = Promise.resolve(true);\n\n  }\n  // End\n\n  eventTypes(): void {\n    this.eventsService.getEventsTypes().subscribe(response => {\n      if (response.commonViewModel != null) {\n        if (response.commonViewModel.length) {\n          response.commonViewModel.forEach(element => {\n            this.eventTypesList.push({\n              label: element.name,\n              value: element.id,\n              isCompitation: element.code\n            });\n          });        \n        }\n      }\n    }, error => {\n      this.errorResponse(error);\n    });\n\n  }\n\n  eventStatus(): void {\n    this.eventsService.getEventStatus().subscribe(response => {\n      if (response.commonViewModel != null) {\n        if (response.commonViewModel.length) {\n          response.commonViewModel.forEach(element => {\n            this.eventstatusList.push({\n              label: element.name,\n              value: element.id,\n              code: element.code\n            });\n          });\n          this.assignEventTypesStatus();\n        }\n      }\n    }, error => {\n      this.errorResponse(error);\n    });\n\n  }\n\n\n  return(): void {\n    this.location.back();\n    // this.router.navigate([RouteConfig._Schol_Events]);\n    this.eventForm.reset();\n    if (this.eventDataForm !== undefined) {\n      this.eventDataForm.resetForm();\n    }\n  }\n\n  onSelectSection(data: any): void {\n    this.selectedSection = [];\n    if (data !== undefined) {\n      data.forEach(element => {\n        this.selectedSection.push(element.value);\n      });\n    }\n\n  }\n  onSubmit(eventForm: any, updateButton: any): void {\n    this.doValidate = true;\n    this.statusId = this.eventForm.controls.statusId.value;\n    this.eventType = this.eventTypesList.find(x => x.value === this.eventForm.controls.eventTypeId.value);\n    if (this.eventType.label === AppSettings.NEWS || this.eventType.isCompitation === '0') {\n      this.eventForm.controls['fromDate'].clearValidators();\n      this.eventForm.controls['toDate'].clearValidators();\n      this.eventForm.updateValueAndValidity();\n      this.eventForm.controls['fromDate'].setValue(this.eventForm.controls['announcedDate'].value);\n      this.eventForm.controls['toDate'].setValue(this.eventForm.controls['announcedDate'].value);\n      this.eventForm.controls['statusId'].setValue(this.eventstatusList.find(x => x.code === AppSettings.EVENT_CMP_CODE).value);\n      this.statusId = this.eventstatusList.find(x => x.code === AppSettings.EVENT_CMP_CODE).value;\n    }\n    if (this.eventForm.invalid) {\n      return;\n    }\n    else {\n      this.eventForm.controls['eventClassSections'].patchValue(this.selectedSection);\n      this.formData = this.eventForm.value;\n      this.formData.isPostToCalender = this.eventForm.value.isPostToCalender === AppSettings.YES ? 1 : 0;\n      this.formData.announcedDate = this.getFormattedDateByAPIPattern(this.formData.announcedDate);\n      this.formData.fromDate = this.getFormattedDateByAPIPattern(this.formData.fromDate);\n      this.formData.toDate = this.getFormattedDateByAPIPattern(this.formData.toDate);\n      this.formData.attachment = (this.formData.attachment == null || this.formData.attachment.fileValue != null) ? this.formData.attachment : null;\n      if (this.eventForm.value.eventId === '') {\n        this.eventsService.createEvents(this.formData).subscribe(eventRes => {\n          this.eventResponse(eventRes);\n        },\n          error => {\n            this.errorResponse(error);\n          });\n      }\n      else {\n        this.eventsService.updateEvents(this.formData).subscribe(eventRes => {\n          this.eventResponse(eventRes);\n        },\n          error => {\n            this.errorResponse(error);\n          });\n      }\n    }\n  }\n\n  // add response\n  eventResponse(data: any): void {\n    this.addEventId = data.eventId;\n    if (data.statusCode === HttpStatus.OK) {\n      this.statusChanges(this.statusId, this.eventType);\n      this.updateButtonShow = true;\n      this.dialog.closeAll();\n      this.getEventDetails();\n      this.participantStudentDetails(this.eventParticipantFilterView);\n      this.onEventTypeSelect(this.eventType.value);\n    }\n    this.openSnackBar(data.messages.ResultMessage);\n  }\n\n  participantStudentDetails(eventParticipantFilterView: EventParticipantFilterView): void {\n    this.eventParticipantFilterView = eventParticipantFilterView;\n    this.eventParticipantFilterView.eventId = this.addEventId;\n    this.eventsService.getStudentsDetails(\n      this.eventParticipantFilterView.eventId,\n      this.eventParticipantFilterView.admissionNumber,\n      this.eventParticipantFilterView.studentName,\n      this.eventParticipantFilterView.classIds,\n      this.eventParticipantFilterView.sectionIds,\n      this.eventParticipantFilterView.studentGroupIds,\n      this.eventParticipantFilterView.sortOrder,\n      this.eventParticipantFilterView.sortBy, this.eventParticipantFilterView.pageNumber, this.eventParticipantFilterView.pageSize).subscribe(res => {\n        if (res.studentDetails != null) {\n          this.studentDetails = res.studentDetails.list;\n          this.totalItems = res.studentDetails.totalItems;\n          this.pageCount = res.studentDetails.totalPages;\n\n        }\n        else {\n          this.studentDetails = [];\n          this.totalItems = 0;\n          this.pageCount = 0;\n        }\n        this.tableSettings = {\n          model: this.eventParticipantFilterView,\n          rows: this.studentDetails,\n          columns: this.columns,\n          componentName: this.currentComponent,\n          isPaginationRequired: true,\n          isSelectRowRequired: true,\n          isMultiDeleteRequired: false,\n          visibleSelectAll: true,\n          totalRowsCount: this.totalItems,\n          pageCnt: this.pageCount,\n          filtersList: res.filters,\n          padding: true\n        };\n      },\n        error => {\n          this.errorResponse(error);\n        });\n  }\n\n  imgChanged(files, logo = false): void {\n    if (this.checkFileSize(files[0], AppSettings.TEXT_AND_IMAGE_FILE_EXTENSION, 2097152)) {\n      return;\n    }\n    this.isUpdateOrView = false;\n    const reader = new FileReader();\n    reader.readAsDataURL(files[0]);\n    const that = this;\n    reader.onload = (_event) => {\n      that.eventForm.controls.attachment.patchValue({ fileName: files[0].name, fileValue: (<string>reader.result).split(',')[1] });\n      that.cd.detectChanges();\n    };\n  }\n\n  clearImages(logo = false): void {\n    this.flagImageProp = {};\n    this.eventForm.controls.attachment.patchValue(null);\n    this.cd.detectChanges();\n  }\n\n  selectedRows(data: any): void {\n    this.winnerVal = '';\n    this.selectedStudentIds = data;\n    this.winnerPositionForm.reset();\n  }\n\n  onClickArray(winnerPositionForm, val): any {\n    if (val === 2) {\n      this.isFinalist = 1;\n      this.selectedStudentIds.map((x: any) => {\n        x.isFinalist = 1;\n      });\n    }\n    else if (val === 3) {\n      this.isWinner = 1;\n      this.isFinalist = 1;\n      this.selectedStudentIds.map((x: any) => {\n        x.isFinalist = 1,\n        x.isWinner = 1;\n      });\n    }\n    else {\n      this.isWinner = null;\n      this.isFinalist = null;\n    }\n    this.eventParticipantView = this.selectedStudentIds;\n    this.eventParticipantView.map(e => e.eventId = this.addEventId);\n\n    if (val === 3) {\n      this.selectedStudentIds.map(x => x.winningPosition = null);\n      const dialogValue = this.dialog.open(CustomDialogComponent, {\n        data: { template: this.positionIdValue }\n      });\n      dialogValue.afterClosed().subscribe(action => {\n        this.cancelClick();\n      });\n      return false;\n    }\n    this.createParticipant(this.eventParticipantView);\n  }\n  createParticipant(eventParticipantView: any): void {\n    this.eventParticipantView = eventParticipantView;\n    this.eventsService.createParticipants(this.eventParticipantView).subscribe(particantRes => {\n      if (particantRes.statusCode === HttpStatus.OK) {\n        this.winnerPositionForm.reset();\n        if (this.winnerForm !== undefined) {\n          this.winnerForm.resetForm();\n        }\n        this.participantStudentDetails(this.eventParticipantFilterView);\n        this.participantsActions();\n      }\n      this.cd.detectChanges();\n      this.openSnackBar(particantRes.messages.ResultMessage);\n    },\n      error => {\n        this.errorResponse(error);\n      });\n  }\n  deleteAll(): void {\n    const dialogRef = this.dialog.open(CustomDialogComponent, {\n      width: '400px',\n      disableClose: true,\n      data: { text: this.commonService.getTranslation('Pleaseconfirmtodeletetheselectedparticipants'), action: true, btn1Text: AppSettings.NO, btn2Text: AppSettings.YES },\n    });\n\n    // Conformation for Delete ClassPeriodType\n    dialogRef.afterClosed().subscribe(action => {\n      if (action === AppSettings.YES) {\n        this.participantId = [];\n        this.selectedStudentIds.forEach(x => {\n          if (x) {\n            this.participantId.push(x.id);\n          }\n        });\n        this.eventsService.deleteParticipants(this.participantId).subscribe(res => {\n          if (res.statusCode === HttpStatus.OK) {\n            this.participantsActions();\n            this.participantStudentDetails(this.eventParticipantFilterView);\n          }\n          this.openSnackBar(res.messages.ResultMessage);\n        },\n          error => {\n            this.errorResponse(error);\n          });\n      }\n    });\n  }\n  participantsActions(): void {\n    this.eventsService.getByEvents(this.addEventId).subscribe(data => {\n      if (data.eventData != null) {\n        this.onEventTypeSelect(this.eventForm.value.eventTypeId);\n        this.finalistDetails = data.eventData[0].finalistDetails;\n        this.participantDetails = data.eventData[0].participantDetails;\n        this.winnersDetails = data.eventData[0].winnersDetails;\n        this.finalistTableSettings = this.tabSettings(this.finalistDetails, this.columns, true, true, true);\n        this.winnerTabSetting = this.tabSettings(this.winnersDetails, this.winnerColumns, true, true, true);\n        this.participantTabSetting = this.tabSettings(this.participantDetails, this.columns, true, true, true);\n      }\n    });\n  }\n  deleteFinalist(): void {\n    const dialogRef = this.dialog.open(CustomDialogComponent, {\n      width: '400px',\n      disableClose: true,\n      data: { text: this.commonService.getTranslation('Pleaseconfirmtodeletetheselectedfinalists'), action: true, btn1Text: AppSettings.NO, btn2Text: AppSettings.YES },\n    });\n\n    // Conformation for Delete ClassPeriodType\n    dialogRef.afterClosed().subscribe(action => {\n      if (action === AppSettings.YES) {\n        this.eventParticipantView = this.selectedStudentIds;\n        this.eventParticipantView.forEach(x => {\n          if (x) {\n            x.eventId = this.addEventId;\n            x.isFinalist = null;\n          }\n        });\n        this.createParticipant(this.eventParticipantView);\n      }\n    });\n  }\n  deleteWinner(): void {\n    const dialogRef = this.dialog.open(CustomDialogComponent, {\n      width: '400px',\n      disableClose: true,\n      data: { text: this.commonService.getTranslation('PleaseconfirmtodeletetheSelectedWinner'), action: true, btn1Text: AppSettings.NO, btn2Text: AppSettings.YES },\n    });\n\n    // Conformation for Delete ClassPeriodType\n    dialogRef.afterClosed().subscribe(action => {\n      if (action === AppSettings.YES) {\n        this.eventParticipantView = this.selectedStudentIds;\n        this.eventParticipantView.forEach(x => {\n          if (x) {\n            x.eventId = this.addEventId;\n            x.isWinner = null;\n            x.winningPosition = null;\n          }\n        });\n        this.createParticipant(this.eventParticipantView);\n      }\n    });\n  }\n\n  winningPositionClick(data): void {\n    this.dialog.closeAll();\n    this.eventParticipantView = this.selectedStudentIds;\n    this.eventParticipantView.forEach(x => {\n      if (x) {\n        x.eventId = this.addEventId;\n      }\n    });\n    this.createParticipant(this.eventParticipantView);\n  }\n\n  download(): void {\n    if (this.attachmentDetails !== null) {\n      window.open(this.nameImgProp);\n    }\n  }\n  onEventTypeSelect(type: any): void {\n    const eventType = this.eventTypesList.find(x => x.value === type);\n    if (eventType !== undefined) {\n      this.isCompetation = eventType.isCompitation === AppSettings.ISSTUDENT ? true : false;\n      if (this.isCompetation === false) {\n        this.hideFromToDate = true;\n      } else {\n        this.hideFromToDate = false;\n      }\n    }\n\n  }\n  statusChanges(value: any, eventType: any): void {\n    const statusType = this.eventstatusList.find(x => x.value === value);\n    if (statusType !== undefined && eventType !== undefined &&\n      ((this.eventType.label === AppSettings.NEWS || this.eventType.isCompitation === '0')) || (statusType.code === AppSettings.EVE_CAN)) {\n      this.return();\n    }\n  }\n  cancelClick(): void {\n    this.isWinner = null;\n    this.isFinalist = null;\n  }\n\n}\n\n","/**\n * BaseWebAPI\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: v1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional } from '@angular/core';\nimport {\n    HttpClient, HttpHeaders, HttpParams,\n    HttpResponse, HttpEvent\n} from '@angular/common/http';\nimport { Observable } from 'rxjs/Observable';\nimport { Configuration, BASE_PATH } from 'app/service/grading-service';\nimport { CustomHttpUrlEncodingCodec } from 'app/service/base/encoder';\nimport { EventView } from 'app/modules/academics/events/model/event-view-model';\nimport { EventDataView } from 'app/modules/academics/events/model/event-data-view';\nimport { BaseUrlConfig, ModuleConfig, BaseModuleConfig } from 'app/url.config';\nimport { EventParticipantView } from 'app/modules/academics/events/model/event-participant-view';\nimport { CommonComponent } from 'app/shared/common/common.component';\n\n\n\n@Injectable()\nexport class EventsService {\n    protected basePath = BaseUrlConfig.BasePath + ModuleConfig.Base;\n// protected basePath = 'http://localhost:8013';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration, \n    private commonComponent: CommonComponent) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Create Events\n     * \n     * @param eventView \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public createEvents(eventView?: EventView, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public createEvents(eventView?: EventView, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public createEvents(eventView?: EventView, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public createEvents(eventView?: EventView, observe: any = 'body', reportProgress: boolean = false): Observable<any> {\n\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json-patch+json',\n            'application/json',\n            'text/json',\n            'application/_*+json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<any>(`${this.basePath}` + BaseModuleConfig._Events_Create_Events,\n            eventView,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get All Event Statuses\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getEventStatus(observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getEventStatus(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getEventStatus(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getEventStatus(observe: any = 'body', reportProgress: boolean = false): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}` + BaseModuleConfig._Events_Event_Statuses,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n\n    /**\n     * Get All Events Types Resp by School Id\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getEventsTypes(observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getEventsTypes(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getEventsTypes(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getEventsTypes(observe: any = 'body', reportProgress: boolean = false): Observable<any> {\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}` + BaseModuleConfig._Events_Event_Types,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get All Events\n     * \n     * @param announcedDateBegin Gets or sets of EndDateBegin\n     * @param announcedDateEnd Gets or sets of EndDateEnd\n     * @param fromDateBegin Gets or sets of OnlineApplicationStartDateBegin\n     * @param fromDateEnd Gets or sets of OnlineApplicationStartDateEnd\n     * @param toDateBegin Gets or sets of OnlineApplicationEndDateBegin\n     * @param toDateEnd Gets or sets of OnlineApplicationEndDateEnd\n     * @param eventDescription Gets or Sets ClassName\n     * @param classIds Gets or Sets ClassName\n     * @param sectionIds Gets or Sets ClassName\n     * @param statusIds Gets or Sets Status\n     * @param eventTypes Gets or Sets eventTypes\n     * @param sortOrder Gets or Sets SortOrder\n     * @param sortBy Gets or Sets SortBy\n     * @param pageNumber \n     * @param pageSize \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getEvents(announcedDateBegin?: Date, announcedDateEnd?: Date,\n         fromDateBegin?: Date, fromDateEnd?: Date, toDateBegin?: Date,\n          toDateEnd?: Date, eventDescription?: string, classIds?: Array<string>, \n          sectionIds?: Array<string>, statusIds?: Array<string>, eventTypes?: Array<string>, sortOrder?: 0 | 1 | -1,\n           sortBy?: string, pageNumber?: number, pageSize?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n\n        queryParameters = this.commonComponent.setQueryParams(announcedDateBegin, 'AnnouncedDateBegin', queryParameters);\n        queryParameters = this.commonComponent.setQueryParams(announcedDateEnd, 'AnnouncedDateEnd', queryParameters);\n        queryParameters = this.commonComponent.setQueryParams(fromDateBegin, 'FromDateBegin', queryParameters);\n        queryParameters = this.commonComponent.setQueryParams(fromDateEnd, 'FromDateEnd', queryParameters);\n        queryParameters = this.commonComponent.setQueryParams(toDateBegin, 'ToDateBegin', queryParameters);\n        queryParameters = this.commonComponent.setQueryParams(toDateEnd, 'ToDateEnd', queryParameters);\n        queryParameters = this.commonComponent.setQueryParams(eventDescription, 'EventDescription', queryParameters);\n        queryParameters = this.commonComponent.setQueryParams(classIds, 'ClassIds', queryParameters);\n        queryParameters = this.commonComponent.setQueryParams(sectionIds, 'SectionIds', queryParameters);\n        queryParameters = this.commonComponent.setQueryParams(statusIds, 'StatusIds', queryParameters);\n        queryParameters = this.commonComponent.setQueryParams(eventTypes, 'eventTypeIds', queryParameters);\n        queryParameters = this.commonComponent.setQueryParams(sortBy, 'SortBy', queryParameters);\n        queryParameters = this.commonComponent.setQueryParams(sortOrder, 'SortOrder', queryParameters);\n        queryParameters = this.commonComponent.setQueryParams(pageNumber, 'PageNumber', queryParameters);\n        queryParameters = this.commonComponent.setQueryParams(pageSize, 'PageSize', queryParameters);\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}` + BaseModuleConfig._Events_Get_All_Events,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n\n    /**\n     * Get Event By Id\n     * \n     * @param id \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getByEvents(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getByEvents(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getByEvents(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getByEvents(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling getByEvents.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (id !== undefined && id !== null) {\n            queryParameters = queryParameters.set('Id', <any>id);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}` + BaseModuleConfig._Events_Event_Details,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n       /**\n     * Get Students\n     * \n     * @param eventId Gets or Sets EventId\n     * @param admissionNumber Gets or Sets AdmissionNumber\n     * @param studentName Gets or Sets StudentName\n     * @param classIds Gets or Sets ClassIds\n     * @param sectionIds Gets or Sets SectionIds\n     * @param studentGroupIds Gets or Sets StudentGroupIds\n     * @param sortOrder Gets or Sets SortOrder\n     * @param sortBy Gets or Sets SortBy\n     * @param pageNumber \n     * @param pageSize \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getStudentsDetails(eventId?: string, \n        admissionNumber?: string, studentName?: string, \n        classIds?: Array<string>, sectionIds?: Array<string>, \n        studentGroupIds?: Array<string>, sortOrder?: 0 | 1 | -1,\n         sortBy?: string, pageNumber?: number, pageSize?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (eventId !== undefined && eventId !== null) {\n            queryParameters = queryParameters.set('EventId', <any>eventId);\n        }\n        if (admissionNumber !== undefined && admissionNumber !== null) {\n            queryParameters = queryParameters.set('AdmissionNumber', <any>admissionNumber);\n        }\n        if (studentName !== undefined && studentName !== null) {\n            queryParameters = queryParameters.set('StudentName', <any>studentName);\n        }\n        if (classIds) {\n            classIds.forEach((element) => {\n                queryParameters = queryParameters.append('ClassIds', <any>element);\n            });\n        }\n        if (sectionIds) {\n            sectionIds.forEach((element) => {\n                queryParameters = queryParameters.append('SectionIds', <any>element);\n            });\n        }\n        if (studentGroupIds) {\n            studentGroupIds.forEach((element) => {\n                queryParameters = queryParameters.append('StudentGroupIds', <any>element);\n            });\n        }\n        if (sortOrder !== undefined && sortOrder !== null) {\n            queryParameters = queryParameters.set('SortOrder', <any>sortOrder);\n        }\n        if (sortBy !== undefined && sortBy !== null) {\n            queryParameters = queryParameters.set('SortBy', <any>sortBy);\n        }\n        if (pageNumber !== undefined && pageNumber !== null) {\n            queryParameters = queryParameters.set('PageNumber', <any>pageNumber);\n        }\n        if (pageSize !== undefined && pageSize !== null) {\n            queryParameters = queryParameters.set('PageSize', <any>pageSize);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}` + BaseModuleConfig._Events_Get_Students,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n/**\n     * Update Event\n     * \n     * @param eventDataView \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateEvents(eventDataView?: EventDataView, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public updateEvents(eventDataView?: EventDataView, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public updateEvents(eventDataView?: EventDataView, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public updateEvents(eventDataView?: EventDataView, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json-patch+json',\n            'application/json',\n            'text/json',\n            'application/_*+json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.put<any>(`${this.basePath}` + BaseModuleConfig._Events_Update_Event,\n            eventDataView,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Create Events\n     * \n     * @param eventParticipantView \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public createParticipants(eventParticipantView?: Array<EventParticipantView>, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public createParticipants(eventParticipantView?: Array<EventParticipantView>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public createParticipants(eventParticipantView?: Array<EventParticipantView>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public createParticipants(eventParticipantView?: Array<EventParticipantView>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json-patch+json',\n            'application/json',\n            'text/json',\n            'application/_*+json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<any>(`${this.basePath}` + BaseModuleConfig._Events_Create_Participants,\n            eventParticipantView,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n\n    /**\n     * Multi Participants Delete\n     * \n     * @param ids \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteParticipants(ids: Array<string>, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public deleteParticipants(ids: Array<string>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public deleteParticipants(ids: Array<string>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public deleteParticipants(ids: Array<string>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (ids === null || ids === undefined) {\n            throw new Error('Required parameter ids was null or undefined when calling deleteParticipants.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (ids) {\n            ids.forEach((element) => {\n                queryParameters = queryParameters.append('Ids', <any>element);\n            });\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.delete<any>(`${this.basePath}` + BaseModuleConfig._Events_Delete_Participants,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }  \n\n\n    /**\n     * Get Event By Id\n     * \n     * @param id \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getAwards(announcedDate?: Date, description?: string, pageNumber?: number, pageSize?: number, observe?: 'body', reportProgress?: boolean): Observable<any> { \n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n\n        if (announcedDate !== undefined && announcedDate !== null) {\n            queryParameters = queryParameters.set('AnnouncedDate', <any>announcedDate.toISOString());\n        }\n        if (description !== undefined && description !== null) {\n            queryParameters = queryParameters.set('Description', <any>description);\n        }\n        if (pageNumber !== undefined && pageNumber !== null) {\n            queryParameters = queryParameters.set('PageNumber', <any>pageNumber);\n        }\n        if (pageSize !== undefined && pageSize !== null) {\n            queryParameters = queryParameters.set('PageSize', <any>pageSize);\n        }\n\n        let headers = this.defaultHeaders; \n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/Events/student-awards`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n}\n"],"sourceRoot":""}