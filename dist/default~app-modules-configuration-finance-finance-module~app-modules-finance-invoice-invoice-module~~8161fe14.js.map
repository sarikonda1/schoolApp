{"version":3,"sources":["webpack:///./src/app/service/configuration/finance/api/fee-terms.service.ts"],"names":[],"mappings":"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","file":"default~app-modules-configuration-finance-finance-module~app-modules-finance-invoice-invoice-module~~8161fe14.js","sourcesContent":["/**\n * Fee\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: v1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams, HttpResponse, HttpEvent } from '@angular/common/http';\nimport { Observable } from 'rxjs/Observable';\nimport { BaseUrlConfig, ModuleConfig, FeeModuleConfig } from 'app/url.config';\nimport { Configuration, BASE_PATH } from 'app/service/grading-service';\nimport { CustomHttpUrlEncodingCodec } from 'app/service/base/encoder';\nimport { FeeTermsDataViewModel } from 'app/modules/configuration/finance/models/fee-terms-data-view-model';\nimport { FeeTermsViewModel } from 'app/modules/configuration/finance/models/fee-terms-view-model';\nimport { CommonComponent } from 'app/shared/common/common.component';\n\n@Injectable()\nexport class FeeTermsService {\n    // protected basePath = 'http://localhost:8011';\n    protected basePath = BaseUrlConfig.BasePath + ModuleConfig.Fee;\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, private commonComponent: CommonComponent,\n        @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Add FeeTerms\n     * \n     * @param feeTermsViewModel \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public addFeeTerms(feeTermsViewModel?: FeeTermsDataViewModel, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public addFeeTerms(feeTermsViewModel?: FeeTermsDataViewModel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public addFeeTerms(feeTermsViewModel?: FeeTermsDataViewModel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public addFeeTerms(feeTermsViewModel?: FeeTermsDataViewModel, observe: any = 'body', reportProgress: boolean = false): Observable<any> {\n\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json-patch+json',\n            'application/json',\n            'text/json',\n            'application/_*+json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<any>(`${this.basePath}` + FeeModuleConfig._FeeTerm_FeeTerm,\n            feeTermsViewModel,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Delete Fee Term\n     * \n     * @param id \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public dropFeeTerms(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public dropFeeTerms(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public dropFeeTerms(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public dropFeeTerms(id: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling dropFeeTerms.');\n        }\n\n        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });\n        if (id !== undefined && id !== null) {\n            queryParameters = queryParameters.set('Id', <any>id);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.delete<any>(`${this.basePath}` + FeeModuleConfig._FeeTerm_FeeTerm,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Update Fee Term\n     * \n     * @param feeTermsViewModel \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public editFeeTerms(feeTermsViewModel?: FeeTermsViewModel, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public editFeeTerms(feeTermsViewModel?: FeeTermsViewModel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public editFeeTerms(feeTermsViewModel?: FeeTermsViewModel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public editFeeTerms(feeTermsViewModel?: FeeTermsViewModel, observe: any = 'body', reportProgress: boolean = false): Observable<any> {\n\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json-patch+json',\n            'application/json',\n            'text/json',\n            'application/_*+json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.put<any>(`${this.basePath}` + FeeModuleConfig._FeeTerm_FeeTerm,\n            feeTermsViewModel,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Fee-term details by id\n     * \n     * @param id \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public feeTermById(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public feeTermById(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public feeTermById(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public feeTermById(id: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling feeTermById.');\n        }\n\n        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });\n        if (id !== undefined && id !== null) {\n            queryParameters = queryParameters.set('Id', <any>id);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}` + FeeModuleConfig._FeeTerms_FeeTerm_By_Id,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Fetch details of fee-terms list\n     * \n     * @param shortName Gets or Sets ShortName\n     * @param displayName Gets or Sets DisplayName\n     * @param code Gets or Sets Code\n     * @param description Gets or Sets Description\n     * @param sortBy Gets or Sets SortBy\n     * @param sortOrder Gets or Sets SortOrder    \n     * @param startDate Gets or Sets StartDate\n     * @param endDate Gets or Sets EndDate\n     * @param invoiceGenerationDate Gets or Sets InvoiceGenerationDate\n     * @param invoiceIssueDate Gets or Sets InvoiceIssueDate\n     * @param invoiceDueDate Gets or Sets InvoiceDueDate\n     * @param pageNumber \n     * @param pageSize \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public feeTerms(shortName?: Array<string>, displayName?: Array<string>, code?: Array<string>, description?: Array<string>, sortBy?: string, sortOrder?: 0 | 1 | -1,\n        startDate?: string, startDateBegin?: string, startDateEnd?: string, endDate?: string, endDateBegin?: string, endDateEnd?: string, invoiceGenerationDate?: string,\n        invoiceGenerationDateBegin?: string, invoiceGenerationDateEnd?: string, invoiceIssueDate?: string, invoiceIssueDateBegin?: string, invoiceIssueDateEnd?: string,\n        invoiceDueDate?: string, invoiceDueDateBegin?: string,\n        invoiceDueDateEnd?: string, pageNumber?: number, pageSize?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public feeTerms(shortName?: Array<string>, displayName?: Array<string>, code?: Array<string>, description?: Array<string>, sortBy?: string, sortOrder?: 0 | 1 | -1,\n        startDate?: string, startDateBegin?: string, startDateEnd?: string, endDate?: string, endDateBegin?: string, endDateEnd?: string, invoiceGenerationDate?: string,\n        invoiceGenerationDateBegin?: string, invoiceGenerationDateEnd?: string, invoiceIssueDate?: string, invoiceIssueDateBegin?: string, invoiceIssueDateEnd?: string,\n        invoiceDueDate?: string, invoiceDueDateBegin?: string, invoiceDueDateEnd?: string, pageNumber?: number, pageSize?: number, observe?: 'response',\n        reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public feeTerms(shortName?: Array<string>, displayName?: Array<string>, code?: Array<string>, description?: Array<string>, sortBy?: string, sortOrder?: 0 | 1 | -1,\n        startDate?: string, startDateBegin?: string, startDateEnd?: string, endDate?: string, endDateBegin?: string, endDateEnd?: string, invoiceGenerationDate?: string,\n        invoiceGenerationDateBegin?: string, invoiceGenerationDateEnd?: string, invoiceIssueDate?: string, invoiceIssueDateBegin?: string, invoiceIssueDateEnd?: string,\n        invoiceDueDate?: string, invoiceDueDateBegin?: string, invoiceDueDateEnd?: string, pageNumber?: number, pageSize?: number, observe?: 'events',\n        reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public feeTerms(shortName?: Array<string>, displayName?: Array<string>, code?: Array<string>, description?: Array<string>, sortBy?: string, sortOrder?: 0 | 1 | -1,\n        startDate?: string, startDateBegin?: string, startDateEnd?: string, endDate?: string, endDateBegin?: string, endDateEnd?: string, invoiceGenerationDate?: string,\n        invoiceGenerationDateBegin?: string, invoiceGenerationDateEnd?: string, invoiceIssueDate?: string, invoiceIssueDateBegin?: string,\n        invoiceIssueDateEnd?: string, invoiceDueDate?: string, invoiceDueDateBegin?: string, invoiceDueDateEnd?: string, pageNumber?: number,\n        pageSize?: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {\n        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });\n\n        queryParameters = this.commonComponent.setQueryParams(shortName, 'ShortName', queryParameters);\n        queryParameters = this.commonComponent.setQueryParams(displayName, 'DisplayName', queryParameters);\n        queryParameters = this.commonComponent.setQueryParams(code, 'Code', queryParameters);\n        queryParameters = this.commonComponent.setQueryParams(description, 'Description', queryParameters);\n        queryParameters = this.commonComponent.setQueryParams(sortOrder, 'SortOrder', queryParameters);\n        queryParameters = this.commonComponent.setQueryParams(sortBy, 'SortBy', queryParameters);\n\n        queryParameters = this.commonComponent.setQueryParams(startDate, 'StartDate', queryParameters);\n        queryParameters = this.commonComponent.setQueryParams(startDateBegin, 'StartDateBegin', queryParameters);\n        queryParameters = this.commonComponent.setQueryParams(startDateEnd, 'StartDateEnd', queryParameters);\n\n        queryParameters = this.commonComponent.setQueryParams(endDate, 'EndDate', queryParameters);\n        queryParameters = this.commonComponent.setQueryParams(endDateBegin, 'EndDateBegin', queryParameters);\n        queryParameters = this.commonComponent.setQueryParams(endDateEnd, 'EndDateEnd', queryParameters);\n\n        queryParameters = this.commonComponent.setQueryParams(invoiceGenerationDate, 'InvoiceGenerationDate', queryParameters);\n        queryParameters = this.commonComponent.setQueryParams(invoiceGenerationDateBegin, 'InvoiceGenerationDateBegin', queryParameters);\n        queryParameters = this.commonComponent.setQueryParams(invoiceGenerationDateEnd, 'InvoiceGenerationDateEnd', queryParameters);\n\n        queryParameters = this.commonComponent.setQueryParams(invoiceIssueDate, 'InvoiceIssueDate', queryParameters);\n        queryParameters = this.commonComponent.setQueryParams(invoiceIssueDateBegin, 'InvoiceIssueDateBegin', queryParameters);\n        queryParameters = this.commonComponent.setQueryParams(invoiceIssueDateEnd, 'InvoiceIssueDateEnd', queryParameters);\n\n        queryParameters = this.commonComponent.setQueryParams(invoiceDueDate, 'InvoiceDueDate', queryParameters);\n        queryParameters = this.commonComponent.setQueryParams(invoiceDueDateBegin, 'InvoiceDueDateBegin', queryParameters);\n        queryParameters = this.commonComponent.setQueryParams(invoiceDueDateEnd, 'InvoiceDueDateEnd', queryParameters);\n\n        queryParameters = this.commonComponent.setQueryParams(pageNumber, 'PageNumber', queryParameters);\n        queryParameters = this.commonComponent.setQueryParams(pageSize, 'PageSize', queryParameters);\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}` + FeeModuleConfig._FeeTerm_FeeTerm,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n * Get FeeTerms Based On Academic Session Id\n * \n * @param id \n * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n * @param reportProgress flag to report request and response progress.\n */\n    public getFeeTerms_1(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getFeeTerms_1(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getFeeTerms_1(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getFeeTerms_1(id: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling getFeeTerms_1.');\n        }\n\n        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });\n        if (id !== undefined && id !== null) {\n            queryParameters = queryParameters.set('Id', <any>id);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}` + FeeModuleConfig._FeeTerms_FeeTerm_By_Academicsession,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n"],"sourceRoot":""}