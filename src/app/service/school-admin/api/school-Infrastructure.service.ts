/**
 * BaseWebAPI
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import {
    HttpClient, HttpHeaders, HttpParams,
    HttpResponse, HttpEvent
} from '@angular/common/http';

import { Observable } from 'rxjs/Observable';


import { CustomHttpUrlEncodingCodec } from 'app/service/base/encoder';
import { Configuration, BASE_PATH } from 'app/service/grading-service';
import { SchoolFloorDataView } from 'app/models/school-admin/school-floor-data-view';
import { SchoolRoomDataView } from 'app/models/school-admin/school-room-data-view';
import { SchoolBuildingUpdateView } from 'app/models/school-admin/school-building-update-view';
import { SchoolRoomView } from 'app/models/school-admin/school-room-view';
import { ListOfSchoolBuildingsView } from 'app/models/school-admin/list-Of-school-buildings-view';
import { SchoolFloorView } from 'app/models/school-admin/school-floor-view';
import { BaseUrlConfig, ModuleConfig, BaseModuleConfig } from 'app/url.config';
import { CommonComponent } from 'app/shared/common/common.component';


@Injectable()
export class SchoolInfrastructureService {

    protected basePath = BaseUrlConfig.BasePath + ModuleConfig.Base;
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(private commmonComponent: CommonComponent, protected httpClient: HttpClient,
         @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * adds School Buildings
     * 
     * @param schoolbuildings 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addBuildings(schoolbuildings?: ListOfSchoolBuildingsView, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public addBuildings(schoolbuildings?: ListOfSchoolBuildingsView, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public addBuildings(schoolbuildings?: ListOfSchoolBuildingsView, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public addBuildings(schoolbuildings?: ListOfSchoolBuildingsView, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        let headers = this.defaultHeaders;
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}` + BaseModuleConfig._SchoolBuilding_PostSchoolBuildings,

            schoolbuildings,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * adds a floor to a school building
     * 
     * @param schoolFloor 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addFloor(schoolFloor?: SchoolFloorView, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public addFloor(schoolFloor?: SchoolFloorView, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public addFloor(schoolFloor?: SchoolFloorView, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public addFloor(schoolFloor?: SchoolFloorView, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}` + BaseModuleConfig._SchoolBuilding_PostFloor,
            schoolFloor,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Adds a room
     * 
     * @param schoolRoomView 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addRoom(schoolRoomView?: SchoolRoomView, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public addRoom(schoolRoomView?: SchoolRoomView, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public addRoom(schoolRoomView?: SchoolRoomView, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public addRoom(schoolRoomView?: SchoolRoomView, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}` + BaseModuleConfig._SchoolBuilding_PostRooms,

            schoolRoomView,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * deletes a floor in building along with its rooms
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteFloor(id: StringConstructor, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteFloor(id: StringConstructor, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteFloor(id: StringConstructor, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteFloor(id: StringConstructor, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteFloor.');
        }
        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('Id', <any>id);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}` + BaseModuleConfig._SchoolBuilding_DeleteFloor,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Deletes a room
     * 
     * @param id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteRoom(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteRoom(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteRoom(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteRoom(id: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteRoom.');
        }

        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('Id', <any>id);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}` + BaseModuleConfig._SchoolBuilding_DeleteRoom,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * deletes a school building along with its floors and rooms
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteSchoolBuilding(id: StringConstructor, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteSchoolBuilding(id: StringConstructor, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteSchoolBuilding(id: StringConstructor, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteSchoolBuilding(id: StringConstructor, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteSchoolBuilding.');
        }

        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('Id', <any>id);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}` + BaseModuleConfig._SchoolBuilding_DeleteSchoolBuliding,

            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets a building floors and rooms
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getBuildingFloorsAndRooms(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getBuildingFloorsAndRooms(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getBuildingFloorsAndRooms(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getBuildingFloorsAndRooms(id: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getBuildingFloorsAndRooms.');
        }

        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('Id', <any>id);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}` + BaseModuleConfig._SchoolBuilding_GetFloorsAndRooms,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets room types in the system
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getRoomTypes(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getRoomTypes(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getRoomTypes(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getRoomTypes(observe: any = 'body', reportProgress: boolean = false): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}` + BaseModuleConfig._SchoolBuilding_GetRoomTypes,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * gets school buildings
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSchoolbuildings(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getSchoolbuildings(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getSchoolbuildings(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getSchoolbuildings(id: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec()});
        queryParameters = this.commmonComponent.setQueryParams(id, 'Id', queryParameters);

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];



        return this.httpClient.get<any>(`${this.basePath}` + BaseModuleConfig._SchoolBuilding_GetSchoolBuildings,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates a floor
     * 
     * @param schoolFloorUpdateView 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateFloor(schoolFloorUpdateView?: SchoolFloorDataView, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateFloor(schoolFloorUpdateView?: SchoolFloorDataView, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateFloor(schoolFloorUpdateView?: SchoolFloorDataView, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateFloor(schoolFloorUpdateView?: SchoolFloorDataView, observe: any = 'body', reportProgress: boolean = false): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}` + BaseModuleConfig._SchoolBuilding_UpdateFloor,
            schoolFloorUpdateView,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates a room
     * @param schoolRoomUpdateView 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateRoom(schoolRoomUpdateView?: SchoolRoomDataView, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateRoom(schoolRoomUpdateView?: SchoolRoomDataView, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateRoom(schoolRoomUpdateView?: SchoolRoomDataView, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateRoom(schoolRoomUpdateView?: SchoolRoomDataView, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}` + BaseModuleConfig._SchoolBuilding_UpdateRoom,
            schoolRoomUpdateView,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * updates a school building
     * 
     * @param schoolBuildingUpdateView 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateSchoolBuilding(schoolBuildingUpdateView?: SchoolBuildingUpdateView, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateSchoolBuilding(schoolBuildingUpdateView?: SchoolBuildingUpdateView, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateSchoolBuilding(schoolBuildingUpdateView?: SchoolBuildingUpdateView, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateSchoolBuilding(schoolBuildingUpdateView?: SchoolBuildingUpdateView, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}` + BaseModuleConfig._SchoolBuilding_UpdateBuilding,
            schoolBuildingUpdateView,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
