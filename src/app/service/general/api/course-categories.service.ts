/**
 * BaseWebAPI
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import {
    HttpClient, HttpHeaders, HttpParams,
    HttpResponse, HttpEvent
} from '@angular/common/http';

import { Observable } from 'rxjs/Observable';

import { CustomHttpUrlEncodingCodec } from 'app/service/base/encoder';
import { Configuration, BASE_PATH } from 'app/service/academic-service';

import { CommonComponent } from 'app/shared/common/common.component';
import { BaseUrlConfig, ModuleConfig } from 'app/url.config';
import { CourseCategoryDataViewModel } from 'app/modules/configuration/general/models/course-category-data-view-model';
import { CourseCategeoryViewModel } from 'app/modules/configuration/general/models/course-categeory-view-model';

@Injectable()
export class CourseCategoriesService {
    protected basePath = BaseUrlConfig.BasePath + ModuleConfig.Base;
    // protected basePath = 'http://localhost:8013';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(private commonComponent: CommonComponent, protected httpClient: HttpClient,
        @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Create CourseCategory
     * 
     * @param courseCategoryView 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createCourseCategory(courseCategoryView?: CourseCategeoryViewModel, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public createCourseCategory(courseCategoryView?: CourseCategeoryViewModel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public createCourseCategory(courseCategoryView?: CourseCategeoryViewModel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public createCourseCategory(courseCategoryView?: CourseCategeoryViewModel, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
        let headers = this.defaultHeaders;
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/CourseCategories/create-course-category`,
            courseCategoryView,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete Course Category By courseCategoryId
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteCourseCategory(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteCourseCategory(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteCourseCategory(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteCourseCategory(id: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteCourseCategory.');
        }

        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('Id', <any>id);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/CourseCategories/delete-course-category`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Search Course Categories
     * 
     * @param name Gets or sets Name
     * @param areAllRequired Gets or sets AreAllRequired
     * @param requiredCount Gets or sets RequiredCount
     * @param areAllOptional Gets or sets AreAllOptional
     * @param optionalCount Gets or sets OptionalCount
     * @param courseTypeId Gets or sets CourseTypeId
     * @param sortBy Gets or Sets SortBy
     * @param sortOrder Gets or Sets SortOrder
     * @param pageNumber 
     * @param pageSize 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllCourseCategories(name?: Array<string>, areAllRequired?: Array<number>, requiredCount?: Array<string>,
        areAllOptional?: Array<number>, optionalCount?: Array<string>, courseTypeId?: Array<string>, sortBy?: string,
        sortOrder?: number, pageNumber?: number, pageSize?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getAllCourseCategories(name?: Array<string>, areAllRequired?: Array<number>, requiredCount?: Array<string>,
        areAllOptional?: Array<number>, optionalCount?: Array<string>, courseTypeId?: Array<string>, sortBy?: string,
        sortOrder?: number, pageNumber?: number, pageSize?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getAllCourseCategories(name?: Array<string>, areAllRequired?: Array<number>, requiredCount?: Array<string>,
        areAllOptional?: Array<number>, optionalCount?: Array<string>, courseTypeId?: Array<string>, sortBy?: string,
        sortOrder?: number, pageNumber?: number, pageSize?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getAllCourseCategories(name?: Array<string>, areAllRequired?: Array<number>, requiredCount?: Array<string>,
        areAllOptional?: Array<number>, optionalCount?: Array<string>, courseTypeId?: Array<string>, sortBy?: string,
        sortOrder?: number, pageNumber?: number, pageSize?: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {


        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });

        queryParameters = this.commonComponent.setQueryParams(name, 'Name', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(areAllRequired, 'AreAllRequired', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(requiredCount, 'RequiredCount', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(areAllOptional, 'AreAllOptional', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(optionalCount, 'OptionalCount', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(courseTypeId, 'CourseTypeId', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(sortBy, 'SortBy', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(sortOrder, 'SortOrder', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(pageNumber, 'PageNumber', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(pageSize, 'PageSize', queryParameters);

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        return this.httpClient.get<any>(`${this.basePath}/CourseCategories/search-course-categories`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
    * Get CourseCategory By courseCategoryId
    * 
  
    * @param id 
    * @param authorization access token
    * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
    * @param reportProgress flag to report request and response progress.
    */
    public getCourseCategory(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getCourseCategory(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getCourseCategory(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getCourseCategory(id: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {



        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getCourseCategory.');
        }


        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });

        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('Id', <any>id);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/CourseCategories/course-category-id`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
    * Update CourseCategory
    * 
    * @param courseCategoryDataViewModel 
    * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
    * @param reportProgress flag to report request and response progress.
    */
    public updateCourseCategory(courseCategoryDataViewModel?: CourseCategoryDataViewModel, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateCourseCategory(courseCategoryDataViewModel?: CourseCategoryDataViewModel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateCourseCategory(courseCategoryDataViewModel?: CourseCategoryDataViewModel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateCourseCategory(courseCategoryDataViewModel?: CourseCategoryDataViewModel, observe: any = 'body', reportProgress: boolean = false): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}/CourseCategories/update-course-category`,
            courseCategoryDataViewModel,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
