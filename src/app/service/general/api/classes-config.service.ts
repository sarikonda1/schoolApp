/**
 * BaseWebAPI
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import {
    HttpClient, HttpHeaders, HttpParams,
    HttpResponse, HttpEvent
} from '@angular/common/http';

import { Observable } from 'rxjs/Observable';
import { Configuration } from 'app/service/base/configuration';
import { BASE_PATH } from 'app/service/base/variables';
import { ClassViewModel } from 'app/modules/configuration/general/models/class-view-model';
import { CustomHttpUrlEncodingCodec } from 'app/service/base/encoder';
import { ClassDataViewModel } from 'app/modules/configuration/general/models/class-data-view-model';
import { BaseUrlConfig, ModuleConfig, BaseModuleConfig } from 'app/url.config';
import { CommonComponent } from 'app/shared/common/common.component';

@Injectable()
export class ClassesConfigService {

    // protected basePath = 'http://localhost:8013';
    protected basePath = BaseUrlConfig.BasePath + ModuleConfig.Base;
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient,
        @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration, private commonComponent: CommonComponent) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Adds a CLass to the specified School(in Headers)
     * 
     * @param classViewModel 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createClass(classViewModel?: ClassViewModel, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public createClass(classViewModel?: ClassViewModel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public createClass(classViewModel?: ClassViewModel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public createClass(classViewModel?: ClassViewModel, observe: any = 'body', reportProgress: boolean = false): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}` + BaseModuleConfig._ClassesConfig_class,
            classViewModel,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
   * Classes Based On SchoolBoard
   * 
   * @param authorization access token
   * @param schoolAcademicSessionId Gets or sets SchoolAcademicSessionId
   * @param schoolBoardId Gets or sets SchoolBoardId
   * @param schoolId SchoolId in Encrypted Form
   * @param instituteId InstituteId in Encrypted Form
   * @param userId UserId in Encrypted Form
   * @param academicSessionId AcademicSessionId in Encrypted Form 
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
    public classesBasedOnSchoolBoard(schoolAcademicSessionId?: string, schoolBoardId?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public classesBasedOnSchoolBoard(schoolAcademicSessionId?: string, schoolBoardId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public classesBasedOnSchoolBoard(schoolAcademicSessionId?: string, schoolBoardId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public classesBasedOnSchoolBoard(schoolAcademicSessionId?: string, schoolBoardId?: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });

        if (schoolAcademicSessionId !== undefined && schoolAcademicSessionId !== null) {
            queryParameters = this.commonComponent.setQueryParams(schoolAcademicSessionId, 'SchoolAcademicSessionId', queryParameters);
        }
        if (schoolBoardId !== undefined && schoolBoardId !== null) {
            queryParameters = this.commonComponent.setQueryParams(schoolBoardId, 'SchoolBoardId', queryParameters);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}` + BaseModuleConfig._Class_Class_Based_On_School_Board,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Deletes all the Classes if this class is not associated with any other tables else returns FailedIds
     * 
     * @param ids 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteAllClass(ids: Array<string>, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteAllClass(ids: Array<string>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteAllClass(ids: Array<string>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteAllClass(ids: Array<string>, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        if (ids === null || ids === undefined) {
            throw new Error('Required parameter ids was null or undefined when calling deleteAllClass.');
        }

        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (ids) {
            ids.forEach((element) => {
                queryParameters = queryParameters.append('Ids', <any>element);
            });
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}` + BaseModuleConfig._ClassesConfig_all_classes,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Particular Class Details of a School
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getClass(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getClass(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getClass(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getClass(id: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getClass.');
        }

        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('Id', <any>id);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}` + BaseModuleConfig._ClassesConfig_class,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets Generic List of ClassReferences
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getClassReferences(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getClassReferences(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getClassReferences(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getClassReferences(observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}` + BaseModuleConfig._ClassesConfig_class_references,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets all the Filtered and Paged List of Classes in a school
     * 
     * @param classReferenceIds Gets or Sets ClassReferences
     * @param names Gets or Sets Names
     * @param codes Gets or Sets Codes
     * @param descriptions Gets or Sets Descriptions
     * @param sortOrder Gets or Sets SortColumn
     * @param sortBy Gets or Sets SortBy- \&quot;ClassReference Name Code Description\&quot;
     * @param pageNumber 
     * @param pageSize 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getFilteredClasses(classReferenceIds?: Array<string> | Array<number>,
        names?: Array<string>, codes?: Array<string>, descriptions?: Array<string>,
        sortOrder?: 0 | 1 | -1, sortBy?: string, failedRecords?: Array<string>,
        pageNumber?: number, pageSize?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getFilteredClasses(classReferenceIds?: Array<string> | Array<number>,
        names?: Array<string>, codes?: Array<string>, descriptions?: Array<string>,
        sortOrder?: 0 | 1 | -1, sortBy?: string, failedRecords?: Array<string>,
        pageNumber?: number, pageSize?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getFilteredClasses(classReferenceIds?: Array<string> | Array<number>,
        names?: Array<string>, codes?: Array<string>, descriptions?: Array<string>,
        sortOrder?: 0 | 1 | -1, sortBy?: string, failedRecords?: Array<string>,
        pageNumber?: number, pageSize?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getFilteredClasses(classReferenceIds?: Array<string> | Array<number>,
        names?: Array<string>, codes?: Array<string>, descriptions?: Array<string>,

        sortOrder?: 0 | 1 | -1, sortBy?: string, failedRecords?: Array<string>,
        pageNumber?: number, pageSize?: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        queryParameters = this.commonComponent.setQueryParams(classReferenceIds, 'ClassReferenceIds', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(names, 'Names', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(codes, 'Codes', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(descriptions, 'Descriptions', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(sortOrder, 'SortOrder', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(sortBy, 'SortBy', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(failedRecords, 'FailedRecords', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(pageNumber, 'PageNumber', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(pageSize, 'PageSize', queryParameters);

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}` + BaseModuleConfig._ClassesConfig_filtered_classes,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update Particular Class Details of a School
     * 
     * @param model 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateClass(model?: ClassDataViewModel, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateClass(model?: ClassDataViewModel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateClass(model?: ClassDataViewModel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateClass(model?: ClassDataViewModel, observe: any = 'body', reportProgress: boolean = false): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}` + BaseModuleConfig._ClassesConfig_class,
            model,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
    * Academic Classes Based On SchoolBoard
    * 
    * @param authorization access token
    * @param schoolAcademicSessionId Gets or sets SchoolAcademicSessionId
    * @param schoolBoardId Gets or sets SchoolBoardId
    * @param schoolId SchoolId in Encrypted Form
    * @param instituteId InstituteId in Encrypted Form
    * @param userId UserId in Encrypted Form
    * @param academicSessionId AcademicSessionId in Encrypted Form 
    * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
    * @param reportProgress flag to report request and response progress.
    */
    public academicClassesBasedOnSchoolBoard(schoolAcademicSessionId?: number, schoolBoardId?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public academicClassesBasedOnSchoolBoard(schoolAcademicSessionId?: number, schoolBoardId?: number,
        observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public academicClassesBasedOnSchoolBoard(schoolAcademicSessionId?: number, schoolBoardId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public academicClassesBasedOnSchoolBoard(schoolAcademicSessionId?: number, schoolBoardId?: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (schoolAcademicSessionId !== undefined && schoolAcademicSessionId !== null) {
            queryParameters = queryParameters.set('SchoolAcademicSessionId', <any>schoolAcademicSessionId);
        }
        if (schoolBoardId !== undefined && schoolBoardId !== null) {
            queryParameters = queryParameters.set('SchoolBoardId', <any>schoolBoardId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}` + BaseModuleConfig._Class_Class_Based_On_School_Board_DecrypedIds,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get All Classes in the Current Academic Session
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCurrentClasses(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getCurrentClasses(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getCurrentClasses(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getCurrentClasses(observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}` + BaseModuleConfig._ClassesConfig_current_classes,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
    * Fetch School Boards Based On Academic Session Id
    * 
    * @param id 
    * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
    * @param reportProgress flag to report request and response progress.
    */
    public boardsBasedOnAcademicSession(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public boardsBasedOnAcademicSession(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public boardsBasedOnAcademicSession(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public boardsBasedOnAcademicSession(id: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling boardsBasedOnAcademicSession.');
        }

        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('Id', <any>id);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}` + BaseModuleConfig._ClassesConfig_Academicsession_Boards,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Fetch Classes Based On Academic Session Id And School Board
     * 
     * @param schoolAcademicSessionId Gets or sets SchoolAcademicSessionId
     * @param schoolBoardId Gets or sets School Board ID
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public classesBasedOnAcademicSession(schoolAcademicSessionId?: number, schoolBoardId?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public classesBasedOnAcademicSession(schoolAcademicSessionId?: number, schoolBoardId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public classesBasedOnAcademicSession(schoolAcademicSessionId?: number, schoolBoardId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public classesBasedOnAcademicSession(schoolAcademicSessionId?: number, schoolBoardId?: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (schoolAcademicSessionId !== undefined && schoolAcademicSessionId !== null) {
            queryParameters = queryParameters.set('SchoolAcademicSessionId', <any>schoolAcademicSessionId);
        }
        if (schoolBoardId !== undefined && schoolBoardId !== null) {
            queryParameters = queryParameters.set('SchoolBoardId', <any>schoolBoardId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}` + BaseModuleConfig._ClassesConfig_Academicsession_Classes,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
    * Fetch Sections Based On Academic Session Id And School Board
    * 
    * @param schoolAcademicSessionId Gets or sets SchoolAcademicSessionId
    * @param schoolBoardId Gets or sets School Board ID
    * @param classId Gets or sets ClassId
    * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
    * @param reportProgress flag to report request and response progress.
    */
    public sectionsBasedOnAcademicSession(schoolAcademicSessionId?: number, schoolBoardId?: number, classId?: number,
        observe?: 'body', reportProgress?: boolean): Observable<any>;
    public sectionsBasedOnAcademicSession(schoolAcademicSessionId?: number, schoolBoardId?: number, classId?: number,
        observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public sectionsBasedOnAcademicSession(schoolAcademicSessionId?: number, schoolBoardId?: number, classId?: number,
        observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public sectionsBasedOnAcademicSession(schoolAcademicSessionId?: number, schoolBoardId?: number, classId?: number,
        observe: any = 'body', reportProgress: boolean = false): Observable<any> {
        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (schoolAcademicSessionId !== undefined && schoolAcademicSessionId !== null) {
            queryParameters = queryParameters.set('SchoolAcademicSessionId', <any>schoolAcademicSessionId);
        }
        if (schoolBoardId !== undefined && schoolBoardId !== null) {
            queryParameters = queryParameters.set('SchoolBoardId', <any>schoolBoardId);
        }
        if (classId !== undefined && classId !== null) {
            queryParameters = queryParameters.set('ClassId', <any>classId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}` + BaseModuleConfig._ClassesConfig_Academicsession_Sections,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
