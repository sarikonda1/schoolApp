/**
 * BaseWebAPI
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import {
    HttpClient, HttpHeaders, HttpParams,
    HttpResponse, HttpEvent
} from '@angular/common/http';
import { Observable } from 'rxjs/Observable';
import { BASE_PATH } from '../base/variables';
import { Configuration } from '../base/configuration';
import { HolidaysView } from 'app/modules/configuration/class-schedules/model/holidays-view';
import { CustomHttpUrlEncodingCodec } from '../base/encoder';
import { HolidayViewModel } from 'app/modules/configuration/class-schedules/model/holiday-view-model';
import { CommonComponent } from 'app/shared/common/common.component';
import { ModuleConfig, BaseUrlConfig, CourseModuleConfig } from 'app/url.config';
import { HolidayBulkPostView } from 'app/modules/configuration/class-schedules/model/holiday-bulk-post-view';


@Injectable()
export class HolidayConfigurationService {

    // protected basePath = 'http://localhost:8013';
    protected basePath = BaseUrlConfig.BasePath + ModuleConfig.Base;
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string,
        @Optional() configuration: Configuration, protected commonComponent: CommonComponent) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * To create holidays under schoolAcademicSession
     * 
     * @param holidayViewModel 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createHolidays(holidayViewModel?: HolidaysView, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public createHolidays(holidayViewModel?: HolidaysView, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public createHolidays(holidayViewModel?: HolidaysView, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public createHolidays(holidayViewModel?: HolidaysView, observe: any = 'body', reportProgress: boolean = false): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}` + CourseModuleConfig._SchoolHolidays_AddHoliday,
            holidayViewModel,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete Holidays
     * 
     * @param ids 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteHolidays(ids: Array<string>, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteHolidays(ids: Array<string>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteHolidays(ids: Array<string>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteHolidays(ids: Array<string>, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        if (ids === null || ids === undefined) {
            throw new Error('Required parameter ids was null or undefined when calling deleteHolidays.');
        }

        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (ids) {
            ids.forEach((element) => {
                queryParameters = queryParameters.append('Ids', <any>element);
            });
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}` + CourseModuleConfig._SchoolHolidays_RemoveHoliday,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * To Fetch Holiday Details By holidayId
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public fetchHolidayById(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public fetchHolidayById(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public fetchHolidayById(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public fetchHolidayById(id: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling fetchHolidayById.');
        }

        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        queryParameters = this.commonComponent.setQueryParams(id, 'Id', queryParameters);

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}` + CourseModuleConfig._SchoolHolidays_FetchHolidayListByID,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
    * Search Holidays
    * 
    * @param classId Gets or sets ClassId
    * @param sectionId Gets or sets SectionId
    * @param fromDateBegin Gets or sets FromDateBegin
    * @param fromDateEnd Gets or sets FromDateEnd
    * @param toDateBegin Gets or sets ToDateBegin
    * @param toDateEnd Gets or sets ToDateEnd
    * @param holidayReason Gets or sets HolidayReason
    * @param isStaffHoliday Gets or sets IsStaffHoliday
    * @param sortOrder Gets or Sets SortOrder
    * @param sortBy Gets or Sets SortBy
    * @param pageNumber 
    * @param pageSize 
    
    * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
    * @param reportProgress flag to report request and response progress.
    */
    public searchHolidays(classId?: Array<number>, sectionId?: Array<number>, fromDate?: string, fromDateBegin?: string, fromDateEnd?: string,
        toDate?: string, toDateBegin?: string, toDateEnd?: string, holidayReason?: Array<string>, isStaffHoliday?: Array<string>, sortOrder?: 0 | 1 | -1, sortBy?: string,
        failedRecords?: Array<string>, pageNumber?: number, pageSize?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public searchHolidays(classId?: Array<number>, sectionId?: Array<number>, fromDate?: string, fromDateBegin?: string, fromDateEnd?: string,
        toDate?: string, toDateBegin?: string, toDateEnd?: string, holidayReason?: Array<string>, isStaffHoliday?: Array<string>, sortOrder?: 0 | 1 | -1, sortBy?: string,
        failedRecords?: Array<string>, pageNumber?: number, pageSize?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public searchHolidays(classId?: Array<number>, sectionId?: Array<number>, fromDate?: string, fromDateBegin?: string, fromDateEnd?: string,
        toDate?: string, toDateBegin?: string, toDateEnd?: string, holidayReason?: Array<string>, isStaffHoliday?: Array<string>, sortOrder?: 0 | 1 | -1, sortBy?: string,
        failedRecords?: Array<string>, pageNumber?: number, pageSize?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public searchHolidays(classId?: Array<number>, sectionId?: Array<number>, fromDate?: string, fromDateBegin?: string, fromDateEnd?: string,
        toDate?: string, toDateBegin?: string, toDateEnd?: string, holidayReason?: Array<string>, isStaffHoliday?: Array<string>, sortOrder?: 0 | 1 | -1, sortBy?: string,
        failedRecords?: Array<string>, pageNumber?: number, pageSize?: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {


        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        queryParameters = this.commonComponent.setQueryParams(classId, 'ClassId', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(sectionId, 'SectionId', queryParameters);

        queryParameters = this.commonComponent.setQueryParams(fromDate, 'FromDate', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(fromDateBegin, 'FromDateBegin', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(fromDateEnd, 'FromDateEnd', queryParameters);

        queryParameters = this.commonComponent.setQueryParams(toDate, 'ToDate', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(toDateBegin, 'ToDateBegin', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(toDateEnd, 'ToDateEnd', queryParameters);

        queryParameters = this.commonComponent.setQueryParams(holidayReason, 'HolidayReason', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(isStaffHoliday, 'IsStaffHoliday', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(sortOrder, 'SortOrder', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(sortBy, 'SortBy', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(failedRecords, 'FailedRecords', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(pageNumber, 'PageNumber', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(pageSize, 'PageSize', queryParameters);


        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/HolidayConfiguration/holidayslist-details`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * To Update Holiday Details By HolidayId
     * 
     * @param holidayViewModel 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateHoliday(holidayViewModel?: HolidayViewModel, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateHoliday(holidayViewModel?: HolidayViewModel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateHoliday(holidayViewModel?: HolidayViewModel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateHoliday(holidayViewModel?: HolidayViewModel, observe: any = 'body', reportProgress: boolean = false): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}` + CourseModuleConfig._SchoolHolidays_UpdateHoliday,
            holidayViewModel,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Direct File Upload from IFormFile
     * 
     * @param authorization access token
     * @param contentType 
     * @param contentDisposition 
     * @param headers 
     * @param length 
     * @param name 
     * @param fileName 
     * @param file 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public readHolidaysBulkData(file?: any): Observable<any> {
        const input = new FormData();
        input.append('file', file, file.name);
        const headers = new HttpHeaders({
            'Content-Type': 'application/json'
        });

        return this.httpClient
            .post(`${this.basePath}` + '/HolidayConfiguration/read-valiadate-excel-csv-files', input, { headers: headers });
    }

    /**
    * holidays bulk post
    * 
    * @param authorization access token
    * @param holidayViewModel 
    * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
    * @param reportProgress flag to report request and response progress.
    */
    public holidaysBulkPost(holidayViewModel?: HolidayBulkPostView, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public holidaysBulkPost(holidayViewModel?: HolidayBulkPostView, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public holidaysBulkPost(holidayViewModel?: HolidayBulkPostView, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public holidaysBulkPost(holidayViewModel?: HolidayBulkPostView, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        return this.httpClient.post<any>(`${this.basePath}/HolidayConfiguration/holidays-bulk-post`,
            holidayViewModel,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
