/**
 * Course
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import {
    HttpClient, HttpHeaders, HttpParams,
    HttpResponse, HttpEvent
} from '@angular/common/http';


import { Observable } from 'rxjs/Observable';
import { Configuration, BASE_PATH } from '../grading-service';
import { ModuleConfig, BaseUrlConfig, CourseModuleConfig } from 'app/url.config';
import { CustomHttpUrlEncodingCodec } from '../base/encoder';
import { SchoolschedulePeriodsUpdateView } from 'app/modules/configuration/class-schedules/model/school-schedule-periods-update-view';
import { SchoolschedulePeriodsView } from 'app/modules/configuration/class-schedules/model/school-schedule-periods-view';
import { CommonComponent } from 'app/shared/common/common.component';

@Injectable()
export class SchoolScheduleTemplateService {

    protected basePath = BaseUrlConfig.BasePath + ModuleConfig.Course;    
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, 
    @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration, protected commonComponent: CommonComponent) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Get All Templates
     *      
     * @param name Gets or Sets SortBy
     * @param sortBy Gets or Sets SortBy
     * @param sortOrder Gets or Sets SortOrder
     * @param pageNumber 
     * @param pageSize     
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public schoolScheduleTemplateAllTemplatesGet(name?: Array<string>, sortBy?: string, sortOrder?: number, 
        pageNumber?: number, pageSize?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public schoolScheduleTemplateAllTemplatesGet(name?: Array<string>, sortBy?: string, sortOrder?: number, 
        pageNumber?: number, pageSize?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public schoolScheduleTemplateAllTemplatesGet(name?: Array<string>, sortBy?: string, sortOrder?: number, 
        pageNumber?: number, pageSize?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public schoolScheduleTemplateAllTemplatesGet(name?: Array<string>, sortBy?: string, sortOrder?: number, 
        pageNumber?: number, pageSize?: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });

        queryParameters = this.commonComponent.setQueryParams(name, 'Name', queryParameters);

        queryParameters = this.commonComponent.setQueryParams(sortBy, 'SortBy', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(sortOrder, 'SortOrder', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(pageNumber, 'PageNumber', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(pageSize, 'PageSize', queryParameters);

        let headers = this.defaultHeaders;
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}` + CourseModuleConfig._SchoolPeriodTemplate_All_Templates, // `${this.basePath}/SchoolScheduleTemplate/all-templates`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete Template
     * 
     * @param id    
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public schoolScheduleTemplateDeleteTemplateDelete(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public schoolScheduleTemplateDeleteTemplateDelete(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public schoolScheduleTemplateDeleteTemplateDelete(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public schoolScheduleTemplateDeleteTemplateDelete(id: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling schoolScheduleTemplateDeleteTemplateDelete.');
        }

        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('Id', <any>id);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}` + CourseModuleConfig._SchoolPeriodTemplate_Delete_Template,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Template Details
     * 
     * @param id     
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public schoolScheduleTemplateTemplateDetailsGet(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public schoolScheduleTemplateTemplateDetailsGet(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public schoolScheduleTemplateTemplateDetailsGet(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public schoolScheduleTemplateTemplateDetailsGet(id: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling schoolScheduleTemplateTemplateDetailsGet.');
        }

        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('Id', <any>id);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}` + CourseModuleConfig._SchoolPeriodTemplate_Template_Details,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Add Template
     *      
     * @param schoolschedulePeriodsView     
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public schoolScheduleTemplateTemplatePost(schoolschedulePeriodsView?: SchoolschedulePeriodsView, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public schoolScheduleTemplateTemplatePost(schoolschedulePeriodsView?: SchoolschedulePeriodsView, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public schoolScheduleTemplateTemplatePost(schoolschedulePeriodsView?: SchoolschedulePeriodsView, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public schoolScheduleTemplateTemplatePost(schoolschedulePeriodsView?: SchoolschedulePeriodsView, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}` + CourseModuleConfig._SchoolPeriodTemplate_Template,
            schoolschedulePeriodsView,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Add Template
     *      
     * @param schoolschedulePeriodsUpdateView      
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public schoolScheduleTemplateUpdateTemplatePut(schoolschedulePeriodsUpdateView?: SchoolschedulePeriodsUpdateView, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public schoolScheduleTemplateUpdateTemplatePut(schoolschedulePeriodsUpdateView?: SchoolschedulePeriodsUpdateView, 
        observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public schoolScheduleTemplateUpdateTemplatePut(schoolschedulePeriodsUpdateView?: SchoolschedulePeriodsUpdateView, 
        observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public schoolScheduleTemplateUpdateTemplatePut(schoolschedulePeriodsUpdateView?: SchoolschedulePeriodsUpdateView, 
        observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}` + CourseModuleConfig._SchoolPeriodTemplate_Update_Template,
            schoolschedulePeriodsUpdateView,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get All WeekDays
     *      
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public schoolScheduleTemplateWeekdaysGet(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public schoolScheduleTemplateWeekdaysGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public schoolScheduleTemplateWeekdaysGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public schoolScheduleTemplateWeekdaysGet(observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}` + CourseModuleConfig._SchoolPeriodTemplate_Weekdays,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }
}
