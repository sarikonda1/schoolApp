/**
* Fee
* No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
*
* OpenAPI spec version: v1
* 
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/

import { Inject, Injectable, Optional } from '@angular/core';
import {
  HttpClient,
  HttpHeaders,
  HttpParams,
  HttpResponse,
  HttpEvent
} from '@angular/common/http';

import { Observable } from 'rxjs/Observable';
import { BASE_PATH } from '../base/variables';
import { InvoiceCriteriaViewModel } from 'app/models/invoice/invoice-criteria-view-model';
import { Configuration } from '../grading-service';
import { BaseUrlConfig, ModuleConfig, FeeModuleConfig } from 'app/url.config';
import { ArbitraryFeeViewModel } from 'app/models/invoice/arbitrary-fee-view-model';
import { CustomHttpUrlEncodingCodec } from '../base/encoder';
import { PaymentViewModel } from 'app/models/invoice/payment-view-model';
import { InvoiceAdjustmentDataView } from 'app/models/invoice/invoice-adustment-data-view';
import { InvoiceSearchCriteriaView } from 'app/models/invoice/invoice-search-criteria-view';
import { CommonComponent } from 'app/shared/common/common.component';

@Injectable()
export class InvoiceService {

 // protected basePath = 'http://localhost:8011';
  protected basePath = BaseUrlConfig.BasePath + ModuleConfig.Fee;
  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();

  constructor(
    protected httpClient: HttpClient,
    @Optional() @Inject(BASE_PATH) basePath: string,
    @Optional() configuration: Configuration,
    private commonComponent: CommonComponent
  ) {
    if (basePath) {
      this.basePath = basePath;
    }
    if (configuration) {
      this.configuration = configuration;
      this.basePath = basePath || configuration.basePath || this.basePath;
    }
  }

  /**
   * @param consumes string[] mime-types
   * @return true: consumes contains 'multipart/form-data', false: otherwise
   */
  private canConsumeForm(consumes: string[]): boolean {
    const form = 'multipart/form-data';
    for (const consume of consumes) {
      if (form === consume) {
        return true;
      }
    }
    return false;
  }

  /**
   * Generation Invoice
   *
   * @param invoiceCriteriaViewModel
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public generateInvoice(
    invoiceCriteriaViewModel?: InvoiceCriteriaViewModel,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<any>;
  public generateInvoice(
    invoiceCriteriaViewModel?: InvoiceCriteriaViewModel,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<any>>;
  public generateInvoice(
    invoiceCriteriaViewModel?: InvoiceCriteriaViewModel,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<any>>;
  public generateInvoice(
    invoiceCriteriaViewModel?: InvoiceCriteriaViewModel,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    let headers = this.defaultHeaders;

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json-patch+json',
      'application/json',
      'text/json',
      'application/_*+json'
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.post<any>(`${this.basePath}` + FeeModuleConfig._Generate_Invoice,
      invoiceCriteriaViewModel,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }



  /**
     * Fee Invoice Cancelation
     * 
     * @param authorization access token
     * @param invoiceCriteriaViewModel 
     * @param schoolId SchoolId in Encrypted Form
     * @param instituteId InstituteId in Encrypted Form
     * @param userId UserId in Encrypted Form
     * @param academicSessionId AcademicSessionId in Encrypted Form 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
  public feeInvoice(invoiceCriteriaViewModel?: InvoiceSearchCriteriaView,
     schoolId?: string, instituteId?: string, userId?: string, academicSessionId?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
  public feeInvoice(invoiceCriteriaViewModel?: InvoiceSearchCriteriaView, 
    schoolId?: string, instituteId?: string, userId?: string, 
    academicSessionId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
  public feeInvoice(invoiceCriteriaViewModel?: InvoiceSearchCriteriaView,
     schoolId?: string, instituteId?: string, userId?: string, academicSessionId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
  public feeInvoice(invoiceCriteriaViewModel?: InvoiceSearchCriteriaView,
     schoolId?: string, instituteId?: string, userId?: string, academicSessionId?: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {



    let headers = this.defaultHeaders;
    if (schoolId !== undefined && schoolId !== null) {
      headers = headers.set('SchoolId', String(schoolId));
    }
    if (instituteId !== undefined && instituteId !== null) {
      headers = headers.set('InstituteId', String(instituteId));
    }
    if (userId !== undefined && userId !== null) {
      headers = headers.set('UserId', String(userId));
    }
    if (academicSessionId !== undefined && academicSessionId !== null) {
      headers = headers.set('AcademicSessionId', String(academicSessionId));
    }

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json-patch+json',
      'application/json',
      'text/json',
      'application/_*+json'
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }
    return this.httpClient.put<any>(`${this.basePath}` + FeeModuleConfig._Fee_Invoice_Cancellation,
      invoiceCriteriaViewModel,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }
  /**
   * Get fee accounts based on code
   *
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public cardTypes(
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    let headers = this.defaultHeaders;

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [];
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.get<any>(`${this.basePath}` + FeeModuleConfig._Card_Type, {
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress
    });
  }

  /**
   * save payment
   *
   * @param paymentViewModel
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public createPayment(
    paymentViewModel?: PaymentViewModel,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    let headers = this.defaultHeaders;

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [];
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json-patch+json',
      'application/json',
      'text/json',
      'application/_*+json'
    ];
    const httpContentTypeSelected:
      | string
      | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.post<any>(
      `${this.basePath}/Payment/save-payment`,
      paymentViewModel,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Get payment status based on code
   *
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public paymentStatus(
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    let headers = this.defaultHeaders;

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [];
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.get<any>(`${this.basePath}/Payment/payment-status`, {
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress
    });
  }

  /**
   * Get payment types based on code
   *
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public paymentTypes(
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    let headers = this.defaultHeaders;

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [];
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.get<any>(`${this.basePath}` + FeeModuleConfig._Payment_Type, {
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress
    });
  }

  /**
* InvoiceAdjustmentTypes
* 
* @param authorization access token
* @param schoolId SchoolId in Encrypted Form
* @param instituteId InstituteId in Encrypted Form
* @param userId UserId in Encrypted Form
* @param academicSessionId AcademicSessionId in Encrypted Form 
* @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
* @param reportProgress flag to report request and response progress.
*/
  public invoiceAdjustmentTypes(observe?: 'body', reportProgress?: boolean): Observable<any>;
  public invoiceAdjustmentTypes(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
  public invoiceAdjustmentTypes(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
  public invoiceAdjustmentTypes(observe: any = 'body', reportProgress: boolean = false): Observable<any> {

    let headers = this.defaultHeaders;

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    return this.httpClient.get<any>(`${this.basePath}/InvoiceAdjustmentType/invoice-adjustment-types-dropdown`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
* Invoice details
* @param id 
* @param isCorrected Gets or Sets
* @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
* @param reportProgress flag to report request and response progress.
*/
  public invoiceDetails(id?: string, isCorrected?: boolean, observe?: 'body', reportProgress?: boolean): Observable<any>;
  public invoiceDetails(id?: string, isCorrected?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
  public invoiceDetails(id?: string, isCorrected?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
  public invoiceDetails(id?: string, isCorrected?: boolean, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

    let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
    if (id !== undefined && id !== null) {
      queryParameters = queryParameters.set('Id', <any>id);
    }
    if (isCorrected !== undefined && isCorrected !== null) {
      queryParameters = queryParameters.set('IsCorrected', <any>isCorrected);
    }
    let headers = this.defaultHeaders;

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header

    return this.httpClient.get<any>(`${this.basePath}/invoice-details`,
      {
        params: queryParameters,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
* AddInvoiceAdjustment
* 
* @param authorization access token
* @param model 
* @param schoolId SchoolId in Encrypted Form
* @param instituteId InstituteId in Encrypted Form
* @param userId UserId in Encrypted Form
* @param academicSessionId AcademicSessionId in Encrypted Form 
* @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
* @param reportProgress flag to report request and response progress.
*/
  public addInvoiceAdjustment(model?: InvoiceAdjustmentDataView, observe?: 'body', reportProgress?: boolean): Observable<any>;
  public addInvoiceAdjustment(model?: InvoiceAdjustmentDataView, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
  public addInvoiceAdjustment(model?: InvoiceAdjustmentDataView, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
  public addInvoiceAdjustment(model?: InvoiceAdjustmentDataView, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

    let headers = this.defaultHeaders;
    // to determine the Accept headerd
    const httpHeaderAccepts: string[] = [
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json-patch+json',
      'application/json',
      'text/json',
      'application/_*+json'
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.post<any>(`${this.basePath}/InvoiceAdjustmentType/invoice-adjustment`,
      model,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }
  /**
    * Assign arbitrary fees to students
    * 
    * @param arbitraryFeeViewModel 
    * @param schoolId SchoolId in Encrypted Form
    * @param instituteId InstituteId in Encrypted Form
    * @param userId UserId in Encrypted Form
    * @param academicSessionId AcademicSessionId in Encrypted Form 
    * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
    * @param reportProgress flag to report request and response progress.
    */
  public feeAssignment(arbitraryFeeViewModel?: ArbitraryFeeViewModel, observe?: 'body', reportProgress?: boolean): Observable<any>;
  public feeAssignment(arbitraryFeeViewModel?: ArbitraryFeeViewModel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
  public feeAssignment(arbitraryFeeViewModel?: ArbitraryFeeViewModel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
  public feeAssignment(arbitraryFeeViewModel?: ArbitraryFeeViewModel, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

    let headers = this.defaultHeaders;

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json-patch+json',
      'application/json',
      'text/json',
      'application/_*+json'
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.post<any>(`${this.basePath}/fee-assignment`,
      arbitraryFeeViewModel,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }
        /**
     * Get
     * 
     * @param ids 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public checkInvoices(ids: Array<string>, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public checkInvoices(ids: Array<string>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public checkInvoices(ids: Array<string>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public checkInvoices(ids: Array<string>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (ids === null || ids === undefined) {
            throw new Error('Required parameter ids was null or undefined when calling checkInvoices.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        queryParameters = this.commonComponent.setQueryParams(ids, 'Ids', queryParameters);

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/Payment/check-invoices`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }
}
