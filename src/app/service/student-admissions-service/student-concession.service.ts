/**
 * BaseWebAPI
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import {
    HttpClient, HttpHeaders, HttpParams,
    HttpResponse, HttpEvent
} from '@angular/common/http';
import { Configuration, BASE_PATH } from '../academic-service';
import { StudentFeeConcessionGroupView } from 'app/modules/academics/student-admissions/model/student-fee-concession-group-view';
import { Observable } from 'rxjs/Observable';
import { BaseViewModel } from 'app/modules/academics/student-admissions/model/base-view-model';
import { CustomHttpUrlEncodingCodec } from '../base/encoder';
import { CommonComponent } from 'app/shared/common/common.component';
import { BaseUrlConfig, ModuleConfig, BaseModuleConfig } from 'app/url.config';


@Injectable()
export class StudentConcessionService {

    protected basePath = BaseUrlConfig.BasePath + ModuleConfig.Base;
    // protected basePath = 'http://localhost:8013';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) 
    basePath: string, @Optional() configuration: Configuration, private commonComponent: CommonComponent) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * CreateStudentConcessionGroup
     * 
     * @param authorization access token
     * @param studentConcessionGroupView 
     * @param schoolId SchoolId in Encrypted Form
     * @param instituteId InstituteId in Encrypted Form
     * @param userId UserId in Encrypted Form
     * @param academicSessionId AcademicSessionId in Encrypted Form 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createStudentConcessionGroup(studentConcessionGroupView?: StudentFeeConcessionGroupView, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public createStudentConcessionGroup(studentConcessionGroupView?: StudentFeeConcessionGroupView, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public createStudentConcessionGroup(studentConcessionGroupView?: StudentFeeConcessionGroupView, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public createStudentConcessionGroup(studentConcessionGroupView?: StudentFeeConcessionGroupView, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}` + BaseModuleConfig._Add_Concession,
            studentConcessionGroupView,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * StudentAttendances Search
     * 
     * @param authorization access token
     * @param studentNames Gets or Sets StudentNames
     * @param studentConcessionGroupIds Gets or Sets StudentConcessionGroupIds
     * @param admissionNumbers Gets or Sets AdmissionNumbers
     * @param rollNumbers Gets or Sets RollNumbers
     * @param classIds Gets or Sets ClassIds
     * @param sectionIds Gets or Sets CurrentSectionName
     * @param sortOrder Gets or Sets SortColumn
     * @param sortBy Gets or Sets SortBy-\&quot;StudentName ParentName AdmissionNumber Class Status DOB\&quot;
     * @param pageNumber 
     * @param pageSize 
     * @param schoolId SchoolId in Encrypted Form
     * @param instituteId InstituteId in Encrypted Form
     * @param userId UserId in Encrypted Form
     * @param academicSessionId AcademicSessionId in Encrypted Form 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllStudentsFeeConcessionGroups(studentNames?: Array<string>, studentConcessionGroupIds?: string, admissionNumbers?: Array<string>,
        rollNumbers?: Array<string>, classIds?: Array<string>,
        sectionIds?: Array<string>, sortOrder?: 0 | 1 | -1, sortBy?: string,
        pageNumber?: number, pageSize?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getAllStudentsFeeConcessionGroups(studentNames?: Array<string>, studentConcessionGroupIds?: string, admissionNumbers?: Array<string>, 
        rollNumbers?: Array<string>, classIds?: Array<string>, sectionIds?: Array<string>, sortOrder?: 0 | 1 | -1, sortBy?: string, pageNumber?: number, 
        pageSize?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getAllStudentsFeeConcessionGroups(studentNames?: Array<string>, studentConcessionGroupIds?: string, admissionNumbers?: Array<string>, 
        rollNumbers?: Array<string>, classIds?: Array<string>, sectionIds?: Array<string>, sortOrder?: 0 | 1 | -1, sortBy?: string, pageNumber?: number, 
        pageSize?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getAllStudentsFeeConcessionGroups(studentNames?: Array<string>, studentConcessionGroupIds?: string, admissionNumbers?: Array<string>,
         rollNumbers?: Array<string>, classIds?: Array<string>, sectionIds?: Array<string>, sortOrder?: 0 | 1 | -1, sortBy?: string, pageNumber?: number, 
         pageSize?: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        queryParameters = this.commonComponent.setQueryParams(sortBy, 'SortBy', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(studentNames, 'StudentNames', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(studentConcessionGroupIds, 'StudentConcessionGroupId', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(admissionNumbers, 'AdmissionNumbers', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(rollNumbers, 'RollNumbers', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(classIds, 'ClassIds', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(sectionIds, 'SectionIds', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(sortOrder, 'SortOrder', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(pageNumber, 'PageNumber', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(pageSize, 'PageSize', queryParameters);

        let headers = this.defaultHeaders;
      
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
         return this.httpClient.get<any>(`${this.basePath}` + BaseModuleConfig._StudentConcession,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * RemoveStudentConcessionGroup
     * 
     * @param authorization access token
     * @param studentFeeConcessionGroupView 
     * @param schoolId SchoolId in Encrypted Form
     * @param instituteId InstituteId in Encrypted Form
     * @param userId UserId in Encrypted Form
     * @param academicSessionId AcademicSessionId in Encrypted Form 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public removeStudentConcessionGroup(studentFeeConcessionGroupView?: BaseViewModel, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public removeStudentConcessionGroup(studentFeeConcessionGroupView?: BaseViewModel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public removeStudentConcessionGroup(studentFeeConcessionGroupView?: BaseViewModel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public removeStudentConcessionGroup(studentFeeConcessionGroupView?: BaseViewModel, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}` + BaseModuleConfig._Remove_Concession,
            studentFeeConcessionGroupView,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

        /**
     * Gets Generic List of FeeConcessionGroups
     * 
     * @param authorization access token
     * @param schoolId SchoolId in Encrypted Form
     * @param instituteId InstituteId in Encrypted Form
     * @param userId UserId in Encrypted Form
     * @param academicSessionId AcademicSessionId in Encrypted Form 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getFeeConcessionGroups(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getFeeConcessionGroups(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getFeeConcessionGroups( observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getFeeConcessionGroups(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return this.httpClient.get<any>(`${this.basePath}` + BaseModuleConfig._FeeConcession_Groups,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }
}
