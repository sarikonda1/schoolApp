/**
 * Fee
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import {
    HttpClient, HttpHeaders, HttpParams,
    HttpResponse, HttpEvent
} from '@angular/common/http';

import { Observable } from 'rxjs/Observable';
import { Configuration } from '../base/configuration';
import { BASE_PATH } from '../base/variables';
import { PaymentCorrectionView } from 'app/modules/finance/payments/models/payment-correction-view';
import { PaymentCorrectionEditView } from 'app/modules/finance/payments/models/payment-correction-edit-view';
import { CustomHttpUrlEncodingCodec } from '../base/encoder';
import { FeeModuleConfig, BaseUrlConfig, ModuleConfig } from 'app/url.config';
import { BaseViewModel } from 'app/modules/academics/student-admissions/model/base-view-model';
import { PaymentCorrectionStatusModel } from 'app/modules/finance/payments/models/payment-correction-status-model';
import { CancelPaymentCorrectionModel } from 'app/modules/finance/payments/models/cancel-payment-correction-model';
import { ReplaySubject } from 'rxjs';



@Injectable()
export class PaymentCorrectionService {
   // protected basePath = 'http://localhost:8011';
    protected basePath = BaseUrlConfig.BasePath + ModuleConfig.Fee;
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    private response = new ReplaySubject<any>();

    constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * adds an payeement creation, returns validation message
     * 
     * @param paymentCorrectionView 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public craetePaymentCorrection(paymentCorrectionView?: PaymentCorrectionView, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public craetePaymentCorrection(paymentCorrectionView?: PaymentCorrectionView, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public craetePaymentCorrection(paymentCorrectionView?: PaymentCorrectionView, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public craetePaymentCorrection(paymentCorrectionView?: PaymentCorrectionView, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}` + FeeModuleConfig._Payment_Cooreection,
            paymentCorrectionView,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Edit details of payment correction, returns validation message
     * 
     * @param paymentCorrectionEditView 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public editPaymentCorrection(paymentCorrectionEditView?: PaymentCorrectionEditView, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public editPaymentCorrection(paymentCorrectionEditView?: PaymentCorrectionEditView, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public editPaymentCorrection(paymentCorrectionEditView?: PaymentCorrectionEditView, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public editPaymentCorrection(paymentCorrectionEditView?: PaymentCorrectionEditView, observe: any = 'body', reportProgress: boolean = false): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}` + FeeModuleConfig._Payment_Cooreection,
            paymentCorrectionEditView,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Fetch details of payment correction, returns Details on success else validation messsage
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public paymentCorrectionDetails(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public paymentCorrectionDetails(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public paymentCorrectionDetails(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public paymentCorrectionDetails(id: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('Id', <any>id);
        }

        let headers = this.defaultHeaders;
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}` + FeeModuleConfig._Payment_Cooreection,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }
    setCorrectionResponse(response: any): void {
        this.response.next({ response: response });
    }

    getCorrectionResponse(): Observable<any> {
        return this.response.asObservable();
    }

     /**
     * Approve Or Reject PaymentCorrection
     * 
     * @param paymentCorrectionStatusModel 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public approveOrRejectCorrection(paymentCorrectionStatusModel?: PaymentCorrectionStatusModel, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public approveOrRejectCorrection(paymentCorrectionStatusModel?: PaymentCorrectionStatusModel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public approveOrRejectCorrection(paymentCorrectionStatusModel?: PaymentCorrectionStatusModel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public approveOrRejectCorrection(paymentCorrectionStatusModel?: PaymentCorrectionStatusModel, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}` + FeeModuleConfig._Payment_ApproveOrReject,
            paymentCorrectionStatusModel,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

  /**
     * Cancel PaymentCorrection
     * 
     * @param cancelPaymentCorrectionModel 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public cancelPaymentCorrection(cancelPaymentCorrectionModel?: CancelPaymentCorrectionModel, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public cancelPaymentCorrection(cancelPaymentCorrectionModel?: CancelPaymentCorrectionModel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public cancelPaymentCorrection(cancelPaymentCorrectionModel?: CancelPaymentCorrectionModel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public cancelPaymentCorrection(cancelPaymentCorrectionModel?: CancelPaymentCorrectionModel, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}` + FeeModuleConfig._Payment_Cancel,
            cancelPaymentCorrectionModel,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }


}
