/**
 * BaseWebAPI
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import {
    HttpClient, HttpHeaders, HttpParams,
    HttpResponse, HttpEvent
} from '@angular/common/http';

import { Observable } from 'rxjs/Observable';
import { Configuration, BASE_PATH } from 'app/service/grading-service';
import { AssessmentParameterDataView } from 'app/models/academics/assessment-parameter-data-view';
import { CustomHttpUrlEncodingCodec } from 'app/service/base/encoder';
import { AssessmentParameterView } from 'app/models/academics/models';
import { BaseUrlConfig, ModuleConfig, BaseModuleConfig } from 'app/url.config';
import { CommonComponent } from 'app/shared/common/common.component';
import { basename } from 'path';
import { ClassAssessmentParameterViewModel } from 'app/models/academics/class-assessment-parameter-viewmodel';
import { AssessmentGroupsViewModelAdd } from 'app/modules/configuration/assessment/models/assessment-groups-view-model-add';
import { AssesmentParameterEditView } from 'app/modules/configuration/assessment/models/assesment-parameter-edit-view';


@Injectable()
export class AssessmentParameterService {
    protected basePath = BaseUrlConfig.BasePath + ModuleConfig.Base;
    // protected basePath = 'http://localhost:8013';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(private commonComponent: CommonComponent, protected httpClient: HttpClient,
        @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }

    /**
 * Add Assessment Paarmeters
 *  
 * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
 * @param reportProgress flag to report request and response progress.
 */
    public addAssesmentParameter(assessmentParameterView?: AssessmentGroupsViewModelAdd, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public addAssesmentParameter(assessmentParameterView?: AssessmentGroupsViewModelAdd, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public addAssesmentParameter(assessmentParameterView?: AssessmentGroupsViewModelAdd, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public addAssesmentParameter(assessmentParameterView?: AssessmentGroupsViewModelAdd, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/AssessmentParameter/add-assessment-parameter`,
            assessmentParameterView,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Create Class Assessment Parameters
     * 
     * @param classAssessmentParameterViewModel 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createClassAssessmentParameters(classAssessmentParameterViewModel?: ClassAssessmentParameterViewModel, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public createClassAssessmentParameters(classAssessmentParameterViewModel?: ClassAssessmentParameterViewModel,
        observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public createClassAssessmentParameters(classAssessmentParameterViewModel?: ClassAssessmentParameterViewModel,
        observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public createClassAssessmentParameters(classAssessmentParameterViewModel?: ClassAssessmentParameterViewModel,
        observe: any = 'body', reportProgress: boolean = false): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}` + BaseModuleConfig._ClassAssessmentParameters,
            classAssessmentParameterViewModel,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }


    /**
     * Fetch AssessmentParameters List
     * 
     * @param assessmentGroupId AssessmentGroupId
     * @param assessmentCategoryId AssessmentCategoryId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public fetchAssessmentParametersByCategoryIdGroupId(assessmentGroupId: number, assessmentCategoryId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public fetchAssessmentParametersByCategoryIdGroupId(assessmentGroupId: number, assessmentCategoryId: number,
        observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public fetchAssessmentParametersByCategoryIdGroupId(assessmentGroupId: number, assessmentCategoryId: number,
        observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public fetchAssessmentParametersByCategoryIdGroupId(assessmentGroupId: number, assessmentCategoryId: number,
        observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });

        queryParameters = this.commonComponent.setQueryParams(assessmentGroupId, 'AssessmentGroupId', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(assessmentCategoryId, 'AssessmentCategoryId', queryParameters);

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}` + BaseModuleConfig._AssessmentParameters_Fetch_By_GroupID_CategoryId,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get all assessmentParameters by schoolId
     * 
     * @param assessmentParameterNames Gets or Sets Name
     * @param assessmentGroupIds Gets or Sets Name
     * @param assessmentCategoryIds Gets or Sets Name
     * @param assessmentSubCategoryNames Gets or Sets Name
     * @param sortBy Gets or Sets SortBy
     * @param sortOrder Gets or Sets SortOrder
     * @param pageNumber 
     * @param pageSize 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllAssessmentParametersList(names?: Array<string>, sortOrder?: 0 | 1 | -1,
        sortBy?: string, failedRecords?: Array<string>, pageNumber?: number, pageSize?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getAllAssessmentParametersList(names?: Array<string>, sortOrder?: 0 | 1 | -1,
        sortBy?: string, failedRecords?: Array<string>, pageNumber?: number, pageSize?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getAllAssessmentParametersList(names?: Array<string>, sortOrder?: 0 | 1 | -1,
        sortBy?: string, failedRecords?: Array<string>, pageNumber?: number, pageSize?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getAllAssessmentParametersList(names?: Array<string>, sortOrder?: 0 | 1 | -1,
        sortBy?: string, failedRecords?: Array<string>, pageNumber?: number, pageSize?: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });

        queryParameters = this.commonComponent.setQueryParams(names, 'Names', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(sortBy, 'SortBy', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(sortOrder, 'SortOrder', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(failedRecords, 'FailedRecords', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(pageNumber, 'PageNumber', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(pageSize, 'PageSize', queryParameters);

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        return this.httpClient.get<any>(`${this.basePath}` + BaseModuleConfig._AssessmentParameters_List_Fetch,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Assessment Categories
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAssessmentCategoriesList(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getAssessmentCategoriesList(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getAssessmentCategoriesList(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getAssessmentCategoriesList(observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        return this.httpClient.get<any>(`${this.basePath}` + BaseModuleConfig._AssessmentCategory_List_Fetch,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get AssessmentCategoriesList by AssessmentGroupId
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAssessmentCategoriesListByGroupId(id?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getAssessmentCategoriesListByGroupId(id?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getAssessmentCategoriesListByGroupId(id?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getAssessmentCategoriesListByGroupId(id?: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {


        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('Id', <any>id);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}` + BaseModuleConfig._AssessmentCategory_List_By_GroupId,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Assessment Groups
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAssessmentGroupsList(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getAssessmentGroupsList(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getAssessmentGroupsList(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getAssessmentGroupsList(observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        return this.httpClient.get<any>(`${this.basePath}` + BaseModuleConfig._AssessmentGroups_Fetch,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Assessment Paarmeters
     * 
     * @param id 
     * @param authorization access token
     * @param schoolId SchoolId in Encrypted Form
     * @param instituteId InstituteId in Encrypted Form
     * @param userId UserId in Encrypted Form
     * @param academicSessionId AcademicSessionId in Encrypted Form 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAssesmentParameter(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getAssesmentParameter(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getAssesmentParameter(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getAssesmentParameter(id: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getAssesmentParameter.');
        }
        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('Id', <any>id);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/AssessmentParameter/assessment-parameter`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Upadte Assessment Paarmeters ListOfRequiredViewModel model
     * 
     * @param authorization access token
     * @param assessmentParameterView 
     * @param schoolId SchoolId in Encrypted Form
     * @param instituteId InstituteId in Encrypted Form
     * @param userId UserId in Encrypted Form
     * @param academicSessionId AcademicSessionId in Encrypted Form 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateAssesmentParameter(assessmentParameterView?: AssesmentParameterEditView, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateAssesmentParameter(assessmentParameterView?: AssesmentParameterEditView, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateAssesmentParameter(assessmentParameterView?: AssesmentParameterEditView, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateAssesmentParameter(assessmentParameterView?: AssesmentParameterEditView, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}/AssessmentParameter/update-assessment-parameter`,
            assessmentParameterView,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
    * Deleting Class Assessment Parameters
    * 
    * @param id 
    * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
    * @param reportProgress flag to report request and response progress.
    */
    public deleteClassAssesmentParameter(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteClassAssesmentParameter(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteClassAssesmentParameter(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteClassAssesmentParameter(id: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteClassAssesmentParameter.');
        }

        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('Id', <any>id);
        }

        let headers = this.defaultHeaders;
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        return this.httpClient.delete<any>(`${this.basePath}` + BaseModuleConfig._Delete_Class_Assessment_Parameter,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }


    /**
     * Get Class Assessment List
     * 
     * @param sortBy Gets or Sets of SortBy
     * @param sortOrder Gets or Sets of SortOrder
     * @param classes Gets or Sets of Sections
     * @param schoolBoards Gets or Sets of SchoolBoards
     * @param assesmentGroups Gets or Sets of AssesmentGroups
     * @param assesmentCategories Gets or Sets of AssesmentCategories
     * @param assesmentSubCategories Gets or Sets of AssesmentSubCategories
     * @param assesmentParameters Gets or Sets of AssesmentParameters
     * @param pageNumber 
     * @param pageSize 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public fetchClassAssesmentList(sortBy?: string, sortOrder?: 0 | 1 | -1, classes?: Array<string>, sections?: Array<string>, schoolBoards?: Array<string>,
        assesmentGroups?: Array<string>, assesmentCategories?: Array<string>, assesmentSubCategories?: Array<string>, assesmentParameters?: Array<string>,
        pageNumber?: number, pageSize?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public fetchClassAssesmentList(sortBy?: string, sortOrder?: 0 | 1 | -1, classes?: Array<string>, sections?: Array<string>, schoolBoards?: Array<string>,
        assesmentGroups?: Array<string>, assesmentCategories?: Array<string>, assesmentSubCategories?: Array<string>, assesmentParameters?: Array<string>,
        pageNumber?: number, pageSize?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public fetchClassAssesmentList(sortBy?: string, sortOrder?: 0 | 1 | -1, classes?: Array<string>, sections?: Array<string>, schoolBoards?: Array<string>,
        assesmentGroups?: Array<string>, assesmentCategories?: Array<string>, assesmentSubCategories?: Array<string>, assesmentParameters?: Array<string>,
        pageNumber?: number, pageSize?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public fetchClassAssesmentList(sortBy?: string, sortOrder?: 0 | 1 | -1, classes?: Array<string>, sections?: Array<string>, schoolBoards?: Array<string>,
        assesmentGroups?: Array<string>, assesmentCategories?: Array<string>, assesmentSubCategories?: Array<string>, assesmentParameters?: Array<string>,
        pageNumber?: number, pageSize?: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        queryParameters = this.commonComponent.setQueryParams(sortBy, 'SortBy', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(sortOrder, 'SortOrder', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(classes, 'Classes', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(sections, 'Sections', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(schoolBoards, 'SchoolBoards', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(assesmentGroups, 'AssesmentGroups', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(assesmentCategories, 'AssesmentCategories', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(assesmentSubCategories, 'AssesmentSubCategories', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(assesmentParameters, 'AssesmentParameters', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(pageNumber, 'PageNumber', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(pageSize, 'PageSize', queryParameters);

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}` + BaseModuleConfig.CLASS_ASSESMENT,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
    * Get Assessment Sub CategoriesList by categoryId
    * 
    * @param authorization access token
    * @param categoryId 
    * @param schoolId SchoolId in Encrypted Form
    * @param instituteId InstituteId in Encrypted Form
    * @param userId UserId in Encrypted Form
    * @param academicSessionId AcademicSessionId in Encrypted Form 
    * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
    * @param reportProgress flag to report request and response progress.
    */
    public getAssessmentSubCategories(categoryId?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getAssessmentSubCategories(categoryId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getAssessmentSubCategories(categoryId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getAssessmentSubCategories(categoryId?: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        let headers = this.defaultHeaders;
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [];

        if (categoryId !== undefined && categoryId !== null) {
            queryParameters = queryParameters.set('categoryId', <any>categoryId);
        }

        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        return this.httpClient.get<any>(`${this.basePath}/ClassAssessmentParameter/assessment-sub-categories`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * delete Assessment Paarmeters
     * 
     * @param ids 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteAssesmentParameter(ids: Array<string>, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteAssesmentParameter(ids: Array<string>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteAssesmentParameter(ids: Array<string>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteAssesmentParameter(ids: Array<string>, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        if (ids === null || ids === undefined) {
            throw new Error('Required parameter ids was null or undefined when calling deleteAssesmentParameter.');
        }
        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (ids) {
            ids.forEach((element) => {
                queryParameters = queryParameters.append('Ids', <any>element);
            });
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/AssessmentParameter/delete-assessment-parameter`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *  Assessment Paarmeters
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listAssesmentParameter(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public listAssesmentParameter(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public listAssesmentParameter(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public listAssesmentParameter(observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/AssessmentParameter/list-assessment-parameter`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }


    /**
     * Get Assessment Groups
     * @param
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getClassAssesmentGroupDropdownLists(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getClassAssesmentGroupDropdownLists(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getClassAssesmentGroupDropdownLists(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getClassAssesmentGroupDropdownLists(observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        return this.httpClient.get<any>(`${this.basePath}` + BaseModuleConfig._AssessmentCategory_List_Fetch,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Assesment Category DropDownlist
     *
     * @param classId Gets or Sets
     * @param sectionId Gets or Sets
     * @param assesmentGroupId Gets or Sets
     * @param assesmentCategoryId Gets or Sets
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public fetchClassAssesmentCategoryDropDownList(classId?: number, sectionId?: number, assesmentGroupId?: number,
                                                   assesmentCategoryId?: number, observe?: 'body',
                                                   reportProgress?: boolean): Observable<any>;
    public fetchClassAssesmentCategoryDropDownList(classId?: number, sectionId?: number, assesmentGroupId?: number,
                                                   assesmentCategoryId?: number, observe?: 'response',
                                                   reportProgress?: boolean): Observable<HttpResponse<any>>;
    public fetchClassAssesmentCategoryDropDownList(classId?: number, sectionId?: number, assesmentGroupId?: number,
                                                   assesmentCategoryId?: number, observe?: 'events',
                                                   reportProgress?: boolean): Observable<HttpEvent<any>>;
    public fetchClassAssesmentCategoryDropDownList(classId?: number, sectionId?: number, assesmentGroupId?: number,
                                                   assesmentCategoryId?: number, observe: any = 'body',
                                                   reportProgress: boolean = false ): Observable<any> {





        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (classId !== undefined && classId !== null) {
            queryParameters = queryParameters.set('ClassId', <any>classId);
        }
        if (sectionId !== undefined && sectionId !== null) {
            queryParameters = queryParameters.set('SectionId', <any>sectionId);
        }
        if (assesmentGroupId !== undefined && assesmentGroupId !== null) {
            queryParameters = queryParameters.set('AssesmentGroupId', <any>assesmentGroupId);
        }
        if (assesmentCategoryId !== undefined && assesmentCategoryId !== null) {
            queryParameters = queryParameters.set('AssesmentCategoryId', <any>assesmentCategoryId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/ClassAssessmentParameter/class-assesment-category-dropdown-lists`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Assesment Group DropDownlist
     *
     * @param classId Gets or Sets
     * @param sectionId Gets or Sets
     * @param assesmentGroupId Gets or Sets
     * @param assesmentCategoryId Gets or Sets
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public fetchClassAssesmentGroupDropDownList(classId?: number, sectionId?: number, assesmentGroupId?: number,
                                                assesmentCategoryId?: number, observe?: 'body',
                                                reportProgress?: boolean): Observable<any>;
    public fetchClassAssesmentGroupDropDownList(classId?: number, sectionId?: number, assesmentGroupId?: number,
                                                assesmentCategoryId?: number, observe?: 'response',
                                                reportProgress?: boolean): Observable<HttpResponse<any>>;
    public fetchClassAssesmentGroupDropDownList(classId?: number, sectionId?: number, assesmentGroupId?: number,
                                                assesmentCategoryId?: number, observe?: 'events',
                                                reportProgress?: boolean): Observable<HttpEvent<any>>;
    public fetchClassAssesmentGroupDropDownList(classId?: number, sectionId?: number, assesmentGroupId?: number,
                                                assesmentCategoryId?: number, observe: any = 'body',
                                                reportProgress: boolean = false ): Observable<any> {





        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (classId !== undefined && classId !== null) {
            queryParameters = queryParameters.set('ClassId', <any>classId);
        }
        if (sectionId !== undefined && sectionId !== null) {
            queryParameters = queryParameters.set('SectionId', <any>sectionId);
        }
        if (assesmentGroupId !== undefined && assesmentGroupId !== null) {
            queryParameters = queryParameters.set('AssesmentGroupId', <any>assesmentGroupId);
        }
        if (assesmentCategoryId !== undefined && assesmentCategoryId !== null) {
            queryParameters = queryParameters.set('AssesmentCategoryId', <any>assesmentCategoryId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/ClassAssessmentParameter/class-assesment-group-dropdown-lists`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Assesment Parameter DropDownlist
     *
     * @param classId Gets or Sets
     * @param sectionId Gets or Sets
     * @param assesmentGroupId Gets or Sets
     * @param assesmentCategoryId Gets or Sets
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public fetchClassAssesmentParameterDropDownList(classId?: number, sectionId?: number, assesmentGroupId?: number,
                                                    assesmentCategoryId?: number, observe?: 'body',
                                                    reportProgress?: boolean): Observable<any>;
    public fetchClassAssesmentParameterDropDownList(classId?: number, sectionId?: number, assesmentGroupId?: number,
                                                    assesmentCategoryId?: number, observe?: 'response',
                                                    reportProgress?: boolean): Observable<HttpResponse<any>>;
    public fetchClassAssesmentParameterDropDownList(classId?: number, sectionId?: number, assesmentGroupId?: number,
                                                    assesmentCategoryId?: number, observe?: 'events',
                                                    reportProgress?: boolean): Observable<HttpEvent<any>>;
    public fetchClassAssesmentParameterDropDownList(classId?: number, sectionId?: number, assesmentGroupId?: number,
                                                    assesmentCategoryId?: number, observe: any = 'body',
                                                    reportProgress: boolean = false ): Observable<any> {





        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (classId !== undefined && classId !== null) {
            queryParameters = queryParameters.set('ClassId', <any>classId);
        }
        if (sectionId !== undefined && sectionId !== null) {
            queryParameters = queryParameters.set('SectionId', <any>sectionId);
        }
        if (assesmentGroupId !== undefined && assesmentGroupId !== null) {
            queryParameters = queryParameters.set('AssesmentGroupId', <any>assesmentGroupId);
        }
        if (assesmentCategoryId !== undefined && assesmentCategoryId !== null) {
            queryParameters = queryParameters.set('AssesmentCategoryId', <any>assesmentCategoryId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/ClassAssessmentParameter/class-assesment-parameter-dropdown-lists`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
