/**
 * Teacher API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import {
    HttpClient, HttpHeaders, HttpParams,
    HttpResponse, HttpEvent
} from '@angular/common/http';
import { Observable } from 'rxjs/Observable';
import { Configuration } from '../base/configuration';
import { BASE_PATH } from '../base/variables';
import { CustomHttpUrlEncodingCodec } from '../base/encoder';
import { CommonComponent } from '../../shared/common/common.component';
import { BaseModuleConfig, BaseUrlConfig, ModuleConfig } from 'app/url.config';
import { StaffLeaveRequestViewModel } from 'app/modules/staff/staff-information-system/model/staff-leave-request-view-model';


@Injectable()
export class StaffLeaveRequestService {

    protected basePath = BaseUrlConfig.BasePath + ModuleConfig.Teacher;
    // protected basePath = 'http://localhost:8016';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH)
    basePath: string, @Optional() configuration: Configuration, private commonComponent: CommonComponent, ) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }

    /**
        * Approve Or reject the leave request
        * 
        * @param leaveRequestId Gets or Sets of LeaveRequestId
        * @param staffId Gets or Sets of StaffId
        * @param isApproveAction Gets or Sets of IsApproveAction
        * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
        * @param reportProgress flag to report request and response progress.
        */
    public approveOrRejectRequest(leaveRequestId?: string, staffId?: string, isApproveAction?: boolean, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public approveOrRejectRequest(leaveRequestId?: string, staffId?: string, isApproveAction?: boolean,
        observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public approveOrRejectRequest(leaveRequestId?: string, staffId?: string, isApproveAction?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public approveOrRejectRequest(leaveRequestId?: string, staffId?: string, isApproveAction?: boolean, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (leaveRequestId !== undefined && leaveRequestId !== null) {
            queryParameters = queryParameters.set('LeaveRequestId', <any>leaveRequestId);
        }
        if (staffId !== undefined && staffId !== null) {
            queryParameters = queryParameters.set('StaffId', <any>staffId);
        }
        if (isApproveAction !== undefined && isApproveAction !== null) {
            queryParameters = queryParameters.set('IsApproveAction', <any>isApproveAction);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.put<any>(`${this.basePath}` + BaseModuleConfig.Staff_Leave_Request_Approve,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }
    /**
     * Add Staff Leave Request
     * 
     * @param staffLeaveRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createStaffLeaveRequest(staffLeaveRequest?: StaffLeaveRequestViewModel, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public createStaffLeaveRequest(staffLeaveRequest?: StaffLeaveRequestViewModel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public createStaffLeaveRequest(staffLeaveRequest?: StaffLeaveRequestViewModel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public createStaffLeaveRequest(staffLeaveRequest?: StaffLeaveRequestViewModel, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}` + BaseModuleConfig.Staff_Leave_Request,
            staffLeaveRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Fetch Staff Leave Request
     * 
     * @param sortBy Gets or Sets of SortBy
     * @param sortOrder Gets or Sets of SortOrder
     * @param staffNames Gets or Sets of Classes
     * @param staffTypes Gets or Sets of Sections
     * @param reasons Gets or Sets of SchoolBoards
     * @param statuses Gets or Sets of AssesmentGroups
     * @param leaveStartDatesBegin Gets or Sets of LeaveStartDatesBegin
     * @param leaveStartDatesEnd Gets or Sets of LeaveStartDatesEnd
     * @param leaveEndDatesBegin Gets or Sets of LeaveEndDatesBegin
     * @param leaveEndDatesEnd Gets or Sets of LeaveEndDatesEnd
     * @param pageNumber 
     * @param pageSize 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public fetchStaffLeaveRequests(sortBy?: string, sortOrder?: 0 | 1 | -1, staffNames?: Array<string>, staffTypes?: Array<string>,
        reasons?: Array<string>, statuses?: Array<string>, leaveStartDatesBegin?: string, leaveStartDatesEnd?: string,
        leaveEndDatesBegin?: string, leaveEndDatesEnd?: string, pageNumber?: number, pageSize?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public fetchStaffLeaveRequests(sortBy?: string, sortOrder?: 0 | 1 | -1, staffNames?: Array<string>, staffTypes?: Array<string>,
        reasons?: Array<string>, statuses?: Array<string>, leaveStartDatesBegin?: string, leaveStartDatesEnd?: string, leaveEndDatesBegin?: string,
        leaveEndDatesEnd?: string, pageNumber?: number, pageSize?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public fetchStaffLeaveRequests(sortBy?: string, sortOrder?: 0 | 1 | -1, staffNames?: Array<string>, staffTypes?: Array<string>,
        reasons?: Array<string>, statuses?: Array<string>, leaveStartDatesBegin?: string, leaveStartDatesEnd?: string, leaveEndDatesBegin?: string,
        leaveEndDatesEnd?: string, pageNumber?: number, pageSize?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public fetchStaffLeaveRequests(sortBy?: string, sortOrder?: 0 | 1 | -1, staffNames?: Array<string>, staffTypes?: Array<string>,
        reasons?: Array<string>, statuses?: Array<string>, leaveStartDatesBegin?: string, leaveStartDatesEnd?: string, leaveEndDatesBegin?: string,
        leaveEndDatesEnd?: string, pageNumber?: number, pageSize?: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {


        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });

        queryParameters = this.commonComponent.setQueryParams(staffNames, 'StaffNames', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(staffTypes, 'StaffTypes', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(reasons, 'Reasons', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(statuses, 'Statuses', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(leaveStartDatesBegin, 'LeaveStartDatesBegin', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(leaveStartDatesEnd, 'LeaveStartDatesEnd', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(leaveEndDatesBegin, 'LeaveEndDatesBegin', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(leaveEndDatesEnd, 'LeaveEndDatesEnd', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(sortOrder, 'SortOrder', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(sortBy, 'SortBy', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(pageNumber, 'PageNumber', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(pageSize, 'PageSize', queryParameters);

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}` + BaseModuleConfig.Staff_Leave_Request,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}

