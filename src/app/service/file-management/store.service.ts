/**
 * File API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import {
    HttpClient, HttpHeaders, HttpParams,
    HttpResponse, HttpEvent
} from '@angular/common/http';
import { Observable } from 'rxjs/Observable';
import { BASE_PATH } from '../base/variables';
import { Configuration } from '../base/configuration';
import { BaseUrlConfig, ModuleConfig } from 'app/url.config';
import { ZipViewModel } from './model/zip-view-model';



@Injectable()
export class StoreService {
    
    protected basePath = BaseUrlConfig.BasePath + ModuleConfig.FileManagment;
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }

    public getFilePath(filename): any {
        return `${this.basePath}/Store/${encodeURIComponent(String(filename))}`;
    }

    /**
     * 
     * 
     * @param filename 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public storeByFilenameGet(filename: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public storeByFilenameGet(filename: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public storeByFilenameGet(filename: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public storeByFilenameGet(filename: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        if (filename === null || filename === undefined) {
            throw new Error('Required parameter filename was null or undefined when calling storeByFilenameGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/Store/${encodeURIComponent(String(filename))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param fileName 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public storeFileEncryptByFileNameGet(fileName: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public storeFileEncryptByFileNameGet(fileName: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public storeFileEncryptByFileNameGet(fileName: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public storeFileEncryptByFileNameGet(fileName: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        if (fileName === null || fileName === undefined) {
            throw new Error('Required parameter fileName was null or undefined when calling storeFileEncryptByFileNameGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/Store/FileEncrypt/${encodeURIComponent(String(fileName))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * DownloadFiles as Zip returns the File Directly to Download
     * 
     * @param zipViewModel 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public storeZipPut(zipViewModel?: ZipViewModel, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public storeZipPut(zipViewModel?: ZipViewModel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public storeZipPut(zipViewModel?: ZipViewModel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public storeZipPut(zipViewModel?: ZipViewModel, observe: any = 'body', reportProgress: boolean = false): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}/Store/Zip`,
            zipViewModel,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
