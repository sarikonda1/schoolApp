/**
 * Course
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import {
    HttpClient, HttpHeaders, HttpParams,
    HttpResponse, HttpEvent
} from '@angular/common/http';
import { Observable } from 'rxjs/Observable';
import { Configuration } from '../base/configuration';
import { BASE_PATH } from '../base/variables';
import { CustomHttpUrlEncodingCodec } from '../base/encoder';
import { BaseUrlConfig, ModuleConfig } from 'app/url.config';
import { CommonComponent } from 'app/shared/common/common.component';
import { StudentCustomFieldsView } from 'app/models/grading/student-custom-fields-view';


@Injectable()
export class GradeReportService {
  
     protected basePath = BaseUrlConfig.BasePath + ModuleConfig.Course;
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration,
        private commonComponent: CommonComponent) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
* Get all student reports details
* 
* @param authorization access token
* @param schoolAcademicSessionStudentId Gets or sets
* @param board Gets or Sets Board Encrypted Values
* @param studentNames Gets or sets
* @param gradingTermId Gets Or Sets
* @param gradingTermName Gets or sets
* @param reportCardStatus Gets or sets
* @param admissionNumbers Gets or sets
* @param rollNumbers Gets or sets
* @param classIds Gets or sets
* @param sectionIds Gets or sets
* @param studentIds Gets or sets
* @param statusId Gets or Sets StatusId
* @param sortOrder Gets or Sets SortOrder
* @param sortBy Gets or Sets SortBy
* @param pageNumber 
* @param pageSize 
* @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
* @param reportProgress flag to report request and response progress.
*/
    public studentReportsFetchReportsDetailsGet(schoolAcademicSessionStudentId?: number, board?: Array<number>, studentName?: Array<string>,
         gradingTermId?: Array<string>, gradingTermName?: string, reportCardStatus?: string, admissionNumber?: string, rollNumber?: Array<string>,
          classIds?: Array<number>, sectionIds?: Array<number>, studentIds?: Array<string>, statusId?: Array<string>, sortOrder?: 0 | 1 | -1, 
          sortBy?: string, pageNumber?: number, pageSize?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public studentReportsFetchReportsDetailsGet(schoolAcademicSessionStudentId?: number, board?: Array<number>, studentName?: Array<string>,
         gradingTermId?: Array<string>, gradingTermName?: string, reportCardStatus?: string, admissionNumber?: string, rollNumber?: Array<string>,
          classIds?: Array<number>, sectionIds?: Array<number>, studentIds?: Array<string>, statusId?: Array<string>, sortOrder?: 0 | 1 | -1,
           sortBy?: string, pageNumber?: number, pageSize?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public studentReportsFetchReportsDetailsGet(schoolAcademicSessionStudentId?: number, board?: Array<number>, studentName?: Array<string>,
         gradingTermId?: Array<string>, gradingTermName?: string, reportCardStatus?: string, admissionNumber?: string, rollNumber?: Array<string>,
          classIds?: Array<number>, sectionIds?: Array<number>, studentIds?: Array<string>, statusId?: Array<string>, sortOrder?: 0 | 1 | -1,
           sortBy?: string, pageNumber?: number, pageSize?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public studentReportsFetchReportsDetailsGet(schoolAcademicSessionStudentId?: number, board?: Array<number>, studentName?: Array<string>,
         gradingTermId?: Array<string>, gradingTermName?: string, reportCardStatus?: string, admissionNumber?: string, rollNumber?: Array<string>,
          classIds?: Array<number>, sectionIds?: Array<number>, studentIds?: Array<string>, statusId?: Array<string>, sortOrder?: 0 | 1 | -1,
           sortBy?: string, pageNumber?: number, pageSize?: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        queryParameters = this.commonComponent.setQueryParams(schoolAcademicSessionStudentId, 'SchoolAcademicSessionStudentId', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(board, 'Board', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(studentName, 'StudentName', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(gradingTermId, 'GradingTermId', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(gradingTermName, 'GradingTermName', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(reportCardStatus, 'ReportCardStatus', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(admissionNumber, 'AdmissionNumber', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(rollNumber, 'RollNumber', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(classIds, 'ClassIds', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(sectionIds, 'SectionIds', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(studentIds, 'StudentIds', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(statusId, 'StatusId', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(sortOrder, 'SortOrder', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(sortBy, 'SortBy', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(pageNumber, 'PageNumber', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(pageSize, 'PageSize', queryParameters);



        let headers = this.defaultHeaders;
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/StudentReports/fetch-reports-details`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
    * Get student report card details by School Id(Required)
    * 
    * @param id 
    * @param authorization access token
    * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
    * @param reportProgress flag to report request and response progress.
    */
    public studentReportsReportsGetGet(id: string, gradingTermId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public studentReportsReportsGetGet(id: string, gradingTermId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public studentReportsReportsGetGet(id: string, gradingTermId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public studentReportsReportsGetGet(id: string, gradingTermId: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling studentReportsReportsGetGet.');
        }

        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('Id', <any>id);
        }

        if (gradingTermId !== undefined && gradingTermId !== null) {
            queryParameters = queryParameters.set('GradingTermId', <any>gradingTermId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/StudentReports/reports-get`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Generate Student Report Card
     * 
     * @param authorization access token
     * @param gradingTermId Gets or Sets GradingTermId
     * @param studentIds Gets or Sets StudentIds
     * @param classId Gets or Sets SchoolAcademicSessionStudentId
     * @param sectionId Gets or Sets SchoolAcademicSessionStudentId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public reportsGenerateStudentReportGet(gradingTermId?: number, studentIds?: Array<number>, classId?: number, sectionId?: number,
         observe?: 'body', reportProgress?: boolean): Observable<any>;
    public reportsGenerateStudentReportGet(gradingTermId?: number, studentIds?: Array<number>, classId?: number, sectionId?: number,
         observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public reportsGenerateStudentReportGet(gradingTermId?: number, studentIds?: Array<number>, classId?: number, sectionId?: number,
         observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public reportsGenerateStudentReportGet(gradingTermId?: number, studentIds?: Array<number>, classId?: number, sectionId?: number,
         observe: any = 'body', reportProgress: boolean = false): Observable<any> {



        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (gradingTermId !== undefined && gradingTermId !== null) {
            queryParameters = queryParameters.set('GradingTermId', <any>gradingTermId);
        }
        if (studentIds) {
            studentIds.forEach((element) => {
                queryParameters = queryParameters.append('StudentIds', <any>element);
            });
        }
        if (classId !== undefined && classId !== null) {
            queryParameters = queryParameters.set('ClassId', <any>classId);
        }
        if (sectionId !== undefined && sectionId !== null) {
            queryParameters = queryParameters.set('SectionId', <any>sectionId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/Reports/generate-student-report`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }


    /**
     * Approve Pending Approval Report Cards
     * 
     * @param authorization access token
     * @param schoolAcademicSessionStudentIds Gets or Sets SchoolAcademicSessionStudentId
     * @param gradingTermId Gets or Sets GradingTermId
     * @param classId Gets or Sets ClassId
     * @param sectionId Gets or Sets SectionId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public reportsApprovePendingapprovalReportsPut(schoolAcademicSessionStudentIds?: Array<number>, gradingTermId?: number, classId?: number, 
        sectionId?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public reportsApprovePendingapprovalReportsPut(schoolAcademicSessionStudentIds?: Array<number>, gradingTermId?: number, classId?: number, 
        sectionId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public reportsApprovePendingapprovalReportsPut(schoolAcademicSessionStudentIds?: Array<number>, gradingTermId?: number, classId?: number,
         sectionId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public reportsApprovePendingapprovalReportsPut(schoolAcademicSessionStudentIds?: Array<number>, gradingTermId?: number, classId?: number,
         sectionId?: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {



        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (schoolAcademicSessionStudentIds) {
            schoolAcademicSessionStudentIds.forEach((element) => {
                queryParameters = queryParameters.append('SchoolAcademicSessionStudentIds', <any>element);
            });
        }
        if (gradingTermId !== undefined && gradingTermId !== null) {
            queryParameters = queryParameters.set('GradingTermId', <any>gradingTermId);
        }
        if (classId !== undefined && classId !== null) {
            queryParameters = queryParameters.set('ClassId', <any>classId);
        }
        if (sectionId !== undefined && sectionId !== null) {
            queryParameters = queryParameters.set('SectionId', <any>sectionId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.put<any>(`${this.basePath}/Reports/approve-pendingapproval-reports`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Approved Report Files
     * 
     * @param authorization access token
     * @param schoolAcademicSessionStudentIds Gets or Sets SchoolAcademicSessionStudentId
     * @param gradingTermId Gets or Sets GradingTermId
     * @param classId Gets or Sets ClassId
     * @param sectionId Gets or Sets SectionId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public reportsApprovedReportFilesGet(schoolAcademicSessionStudentIds?: Array<number>, gradingTermId?: number, classId?: number,
         sectionId?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public reportsApprovedReportFilesGet(schoolAcademicSessionStudentIds?: Array<number>, gradingTermId?: number, classId?: number,
         sectionId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public reportsApprovedReportFilesGet(schoolAcademicSessionStudentIds?: Array<number>, gradingTermId?: number, classId?: number,
         sectionId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public reportsApprovedReportFilesGet(schoolAcademicSessionStudentIds?: Array<number>, gradingTermId?: number, classId?: number,
         sectionId?: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {




        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (schoolAcademicSessionStudentIds) {
            schoolAcademicSessionStudentIds.forEach((element) => {
                queryParameters = queryParameters.append('SchoolAcademicSessionStudentIds', <any>element);
            });
        }
        if (gradingTermId !== undefined && gradingTermId !== null) {
            queryParameters = queryParameters.set('GradingTermId', <any>gradingTermId);
        }
        if (classId !== undefined && classId !== null) {
            queryParameters = queryParameters.set('ClassId', <any>classId);
        }
        if (sectionId !== undefined && sectionId !== null) {
            queryParameters = queryParameters.set('SectionId', <any>sectionId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/Reports/approved-report-files`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Generate Student Report Card
     * 
     * @param authorization access token
     * @param schoolAcademicSessionStudentIds Gets or Sets SchoolAcademicSessionStudentId
     * @param gradingTermId Gets or Sets GradingTermId
     * @param classId Gets or Sets ClassId
     * @param sectionId Gets or Sets SectionId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public reportsClearStudentReportsDelete(schoolAcademicSessionStudentIds?: Array<number>, gradingTermId?: number, classId?: number,
         sectionId?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public reportsClearStudentReportsDelete(schoolAcademicSessionStudentIds?: Array<number>, gradingTermId?: number, classId?: number,
         sectionId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public reportsClearStudentReportsDelete(schoolAcademicSessionStudentIds?: Array<number>, gradingTermId?: number, classId?: number,
         sectionId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public reportsClearStudentReportsDelete(schoolAcademicSessionStudentIds?: Array<number>, gradingTermId?: number, classId?: number,
         sectionId?: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {



        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (schoolAcademicSessionStudentIds) {
            schoolAcademicSessionStudentIds.forEach((element) => {
                queryParameters = queryParameters.append('SchoolAcademicSessionStudentIds', <any>element);
            });
        }
        if (gradingTermId !== undefined && gradingTermId !== null) {
            queryParameters = queryParameters.set('GradingTermId', <any>gradingTermId);
        }
        if (classId !== undefined && classId !== null) {
            queryParameters = queryParameters.set('ClassId', <any>classId);
        }
        if (sectionId !== undefined && sectionId !== null) {
            queryParameters = queryParameters.set('SectionId', <any>sectionId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/Reports/clear-student-reports`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Genarate Pending,Incomplete Report Cards
     * 
     * @param authorization access token
     * @param schoolAcademicSessionStudentId Gets or sets
     * @param board Gets or Sets Board Encrypted Values
     * @param gradingTermId Gets Or Sets
     * @param classId Gets or sets
     * @param sectionId Gets or sets
     * @param studentIds Gets or sets
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public reportsGeneratePendingIncompleteReportsPost(schoolAcademicSessionStudentId?: Array<string>, board?: number, gradingTermId?: number,
         classId?: number, sectionId?: number, studentIds?: Array<string>, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public reportsGeneratePendingIncompleteReportsPost(schoolAcademicSessionStudentId?: Array<string>, board?: number, gradingTermId?: number,
         classId?: number, sectionId?: number, studentIds?: Array<string>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public reportsGeneratePendingIncompleteReportsPost(schoolAcademicSessionStudentId?: Array<string>, board?: number, gradingTermId?: number,
         classId?: number, sectionId?: number, studentIds?: Array<string>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public reportsGeneratePendingIncompleteReportsPost(schoolAcademicSessionStudentId?: Array<string>, board?: number, gradingTermId?: number,
         classId?: number, sectionId?: number, studentIds?: Array<string>, observe: any = 'body', reportProgress: boolean = false): Observable<any> {



        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (schoolAcademicSessionStudentId) {
            schoolAcademicSessionStudentId.forEach((element) => {
                queryParameters = queryParameters.append('SchoolAcademicSessionStudentId', <any>element);
            });
        }
        if (board !== undefined && board !== null) {
            queryParameters = queryParameters.set('Board', <any>board);
        }
        if (gradingTermId !== undefined && gradingTermId !== null) {
            queryParameters = queryParameters.set('GradingTermId', <any>gradingTermId);
        }
        if (classId !== undefined && classId !== null) {
            queryParameters = queryParameters.set('ClassId', <any>classId);
        }
        if (sectionId !== undefined && sectionId !== null) {
            queryParameters = queryParameters.set('SectionId', <any>sectionId);
        }
        if (studentIds) {
            studentIds.forEach((element) => {
                queryParameters = queryParameters.append('StudentIds', <any>element);
            });
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<any>(`${this.basePath}/Reports/generate-pending-incomplete-reports`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }


    /**
     * Get all student reports details
     * 
     * @param board Gets or Sets Board Encrypted Values
     * @param schoolAcademicSessionStudentId Gets or sets
     * @param studentNames Gets or sets
     * @param gradingTermId Gets Or Sets
     * @param gradingTermName Gets or sets
     * @param admissionNumbers Gets or sets
     * @param rollNumbers Gets or sets
     * @param classIds Gets or sets
     * @param sectionIds Gets or sets
     * @param studentIds Gets or sets
     * @param reportCardItemName Gets or sets
     * @param reportCardItemValue Gets or sets
     * @param sortOrder Gets or Sets SortOrder
     * @param sortBy Gets or Sets SortBy
     * @param pageNumber 
     * @param pageSize 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public studentReportsStudentAdditionalInformationGet(schoolAcademicSessionStudentId?: number, board?: Array<number>, studentNames?: Array<string>,
         gradingTermId?: Array<string>, gradingTermName?: string, reportCardStatus?: string, admissionNumbers?: string, rollNumbers?: Array<string>,
          classIds?: Array<number>, sectionIds?: Array<number>, studentIds?: Array<string>, reportCardItemName?: string, reportCardItemValue?: string,
           sortOrder?: 0 | 1 | -1, sortBy?: string, pageNumber?: number, pageSize?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    
    public studentReportsStudentAdditionalInformationGet(schoolAcademicSessionStudentId?: number, board?: Array<number>, studentNames?: Array<string>, 
        gradingTermId?: Array<string>, gradingTermName?: string, reportCardStatus?: string, admissionNumbers?: string, rollNumbers?: Array<string>, classIds?: Array<number>,
         sectionIds?: Array<number>, studentIds?: Array<string>, reportCardItemName?: string, reportCardItemValue?: string, sortOrder?: 0 | 1 | -1,
          sortBy?: string, pageNumber?: number, pageSize?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;

    public studentReportsStudentAdditionalInformationGet(schoolAcademicSessionStudentId?: number, board?: Array<number>, studentNames?: Array<string>,
         gradingTermId?: Array<string>, gradingTermName?: string, reportCardStatus?: string, admissionNumbers?: string, rollNumbers?: Array<string>,
          classIds?: Array<number>, sectionIds?: Array<number>, studentIds?: Array<string>,
          reportCardItemName?: string, reportCardItemValue?: string, sortOrder?: 0 | 1 | -1, sortBy?: string, pageNumber?: number, pageSize?: number,
           observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;

    public studentReportsStudentAdditionalInformationGet(schoolAcademicSessionStudentId?: number, board?: Array<number>, studentNames?: Array<string>,
         gradingTermId?: Array<string>, gradingTermName?: string, reportCardStatus?: string, admissionNumbers?: string, rollNumbers?: Array<string>, 
        classIds?: Array<number>, sectionIds?: Array<number>, studentIds?: Array<string>, reportCardItemName?: string, reportCardItemValue?: string,
         sortOrder?: 0 | 1 | -1, sortBy?: string, pageNumber?: number, pageSize?: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        queryParameters = this.commonComponent.setQueryParams(schoolAcademicSessionStudentId, 'SchoolAcademicSessionStudentId', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(board, 'Board', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(studentNames, 'StudentNames', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(gradingTermId, 'GradingTermId', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(gradingTermName, 'GradingTermName', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(reportCardStatus, 'ReportCardStatus', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(admissionNumbers, 'AdmissionNumbers', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(rollNumbers, 'RollNumbers', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(classIds, 'ClassIds', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(sectionIds, 'SectionIds', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(studentIds, 'StudentIds', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(reportCardItemName, 'ReportCardItemName', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(reportCardItemValue, 'ReportCardItemValue', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(sortOrder, 'SortOrder', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(sortBy, 'SortBy', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(pageNumber, 'PageNumber', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(pageSize, 'PageSize', queryParameters);
        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/StudentReports/student-additional-information`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * To Update the Student Custom Fields
     * 
     * @param studentCustomFieldsView 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public studentReportsStudentCustomDetailsPut(studentCustomFieldsView?: StudentCustomFieldsView, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public studentReportsStudentCustomDetailsPut(studentCustomFieldsView?: StudentCustomFieldsView, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public studentReportsStudentCustomDetailsPut(studentCustomFieldsView?: StudentCustomFieldsView, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public studentReportsStudentCustomDetailsPut(studentCustomFieldsView?: StudentCustomFieldsView, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        let headers = this.defaultHeaders;
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}/StudentReports/student-custom-details`,
            studentCustomFieldsView,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }
}
