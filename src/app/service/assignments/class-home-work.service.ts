/**
 * BaseWebAPI
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent } from '@angular/common/http';

import { Observable } from 'rxjs/Observable';
import { CustomHttpUrlEncodingCodec } from '../base/encoder';
import { BASE_PATH } from '../base/variables';
import { Configuration } from '../base/configuration';
import { BaseUrlConfig, ModuleConfig, BaseModuleConfig } from '../../url.config';
import { ClassHomeWorkModel } from 'app/modules/staff/assignments/model/class-home-work-model';
import { ClassHomeworkIdModel } from 'app/modules/staff/assignments/model/class-homework-id-model';
import { CommonComponent } from 'app/shared/common/common.component';



@Injectable()
export class ClassHomeWorkService {

    protected basePath = BaseUrlConfig.BasePath + ModuleConfig.Base;

    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration,
    private commonComponent: CommonComponent) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Get All Homework Details
     * 
     * @param authorization access token
     * @param boardIds 
     * @param classIds 
     * @param sectionIds 
     * @param typeIds 
     * @param courseIds 
     * @param homeWorkNames 
     * @param issueDateBegin 
     * @param issueDateEnd 
     * @param dueDateBegin 
     * @param dueDateEnd 
     * @param termIds 
     * @param testTypeIds 
     * @param sortOrder Gets or Sets SortColumn
     * @param sortBy Gets or Sets SortBy
     * @param pageNumber 
     * @param pageSize 
     * @param schoolId SchoolId in Encrypted Form
     * @param instituteId InstituteId in Encrypted Form
     * @param userId UserId in Encrypted Form
     * @param academicSessionId AcademicSessionId in Encrypted Form 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllHomeworks(boardIds?: Array<string>, classIds?: Array<string>, sectionIds?: Array<string>, typeIds?: Array<string>, courseIds?: Array<string>,
         homeWorkNames?: Array<string>, issueDateBegin?: Date, issueDateEnd?: Date, dueDateBegin?: Date, dueDateEnd?: Date, termIds?: Array<string>, testTypeIds?: Array<string>,
         sortOrder?: 0 | 1 | -1, sortBy?: string, pageNumber?: number, pageSize?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getAllHomeworks(boardIds?: Array<string>, classIds?: Array<string>, sectionIds?: Array<string>, typeIds?: Array<string>, courseIds?: Array<string>,
         homeWorkNames?: Array<string>, issueDateBegin?: Date, issueDateEnd?: Date, dueDateBegin?: Date, dueDateEnd?: Date, termIds?: Array<string>, testTypeIds?: Array<string>,
          sortOrder?: 0 | 1 | -1, sortBy?: string, pageNumber?: number, pageSize?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getAllHomeworks(boardIds?: Array<string>, classIds?: Array<string>, sectionIds?: Array<string>, typeIds?: Array<string>, courseIds?: Array<string>,
         homeWorkNames?: Array<string>, issueDateBegin?: Date, issueDateEnd?: Date, dueDateBegin?: Date, dueDateEnd?: Date, termIds?: Array<string>, testTypeIds?: Array<string>,
          sortOrder?: 0 | 1 | -1, sortBy?: string, pageNumber?: number, pageSize?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getAllHomeworks(boardIds?: Array<string>, classIds?: Array<string>, sectionIds?: Array<string>, typeIds?: Array<string>, courseIds?: Array<string>,
         homeWorkNames?: Array<string>, issueDateBegin?: Date, issueDateEnd?: Date, dueDateBegin?: Date, dueDateEnd?: Date, termIds?: Array<string>, testTypeIds?: Array<string>,
          sortOrder?: 0 | 1 | -1, sortBy?: string, pageNumber?: number, pageSize?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

       
        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        queryParameters = this.commonComponent.setQueryParams(boardIds, 'BoardIds', queryParameters);

        queryParameters = this.commonComponent.setQueryParams(classIds, 'ClassIds', queryParameters);

        queryParameters = this.commonComponent.setQueryParams(sectionIds, 'SectionIds', queryParameters);

        queryParameters = this.commonComponent.setQueryParams(typeIds, 'TypeIds', queryParameters);

        queryParameters = this.commonComponent.setQueryParams(courseIds, 'CourseIds', queryParameters);

        queryParameters = this.commonComponent.setQueryParams(homeWorkNames, 'HomeWorkNames', queryParameters);

        queryParameters = this.commonComponent.setQueryParams(issueDateBegin, 'IssueDateBegin', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(issueDateEnd, 'IssueDateEnd', queryParameters);

        queryParameters = this.commonComponent.setQueryParams(dueDateBegin, 'DueDateBegin', queryParameters);

        queryParameters = this.commonComponent.setQueryParams(dueDateEnd, 'DueDateEnd', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(termIds, 'TermIds', queryParameters);

        queryParameters = this.commonComponent.setQueryParams(testTypeIds, 'TestTypeIds', queryParameters);

        queryParameters = this.commonComponent.setQueryParams(sortOrder, 'SortOrder', queryParameters);

        queryParameters = this.commonComponent.setQueryParams(sortBy, 'SortBy', queryParameters);

        queryParameters = this.commonComponent.setQueryParams(pageNumber, 'PageNumber', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(pageSize, 'PageSize', queryParameters);

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        
        return this.httpClient.get<any>(`${this.basePath}` + BaseModuleConfig._Home_work_Assignments,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Adding homework
     * 
     * @param authorization access token
     * @param classHomeWorkModel 
     * @param schoolId SchoolId in Encrypted Form
     * @param instituteId InstituteId in Encrypted Form
     * @param userId UserId in Encrypted Form
     * @param academicSessionId AcademicSessionId in Encrypted Form 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postHomework(classHomeWorkModel?: ClassHomeWorkModel, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public postHomework(classHomeWorkModel?: ClassHomeWorkModel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public postHomework(classHomeWorkModel?: ClassHomeWorkModel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public postHomework(classHomeWorkModel?: ClassHomeWorkModel, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

       
        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}` + BaseModuleConfig._Home_work_Assignments,
            classHomeWorkModel,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Method to get All Sections Details based on SchoolAcademicSessionId,school board id
     * 
     * @param schoolBoardId Gets or sets School Board ID
     * @param classId Gets or sets ClassId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllDetails(schoolBoardId?: number, classId?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getAllDetails(schoolBoardId?: number, classId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getAllDetails(schoolBoardId?: number, classId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getAllDetails(schoolBoardId?: number, classId?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (schoolBoardId !== undefined && schoolBoardId !== null) {
            queryParameters = queryParameters.set('SchoolBoardId', <any>schoolBoardId);
        }
        if (classId !== undefined && classId !== null) {
            queryParameters = queryParameters.set('ClassId', <any>classId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
       
        return this.httpClient.get<any>(`${this.basePath}` + BaseModuleConfig._Home_work_Academic_Sections,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }


    /**
     * Delete Homework based on homeworkid
     * 
     * @param id 
     * @param authorization access token
     * @param schoolId SchoolId in Encrypted Form
     * @param instituteId InstituteId in Encrypted Form
     * @param userId UserId in Encrypted Form
     * @param academicSessionId AcademicSessionId in Encrypted Form 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteHomework(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteHomework(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteHomework(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteHomework(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteHomework.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('Id', <any>id);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}` + BaseModuleConfig._Home_work_Assignment,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }


     /**
     * Get Homework based on homeworkid
     * 
     * @param id 
     * @param authorization access token
     * @param schoolId SchoolId in Encrypted Form
     * @param instituteId InstituteId in Encrypted Form
     * @param userId UserId in Encrypted Form
     * @param academicSessionId AcademicSessionId in Encrypted Form 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getByHomeworks(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getByHomeworks(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getByHomeworks(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getByHomeworks(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getByHomeworks.');
        }

        
        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('Id', <any>id);
        }

        let headers = this.defaultHeaders;
        

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}` + BaseModuleConfig._Home_work_Assignments_By_Id,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update Homework based on homeworkid
     * 
     * @param authorization access token
     * @param classHomeworkIdModel 
     * @param schoolId SchoolId in Encrypted Form
     * @param instituteId InstituteId in Encrypted Form
     * @param userId UserId in Encrypted Form
     * @param academicSessionId AcademicSessionId in Encrypted Form 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateHomework(classHomeworkIdModel?: ClassHomeworkIdModel, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateHomework(classHomeworkIdModel?: ClassHomeworkIdModel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateHomework(classHomeworkIdModel?: ClassHomeworkIdModel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateHomework(classHomeworkIdModel?: ClassHomeworkIdModel, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        
        let headers = this.defaultHeaders;
       
        

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}` + BaseModuleConfig._Home_work_Assignment,
            classHomeworkIdModel,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }



    /**
     * Get All tests based on academicsessionid
     * 
     * @param id 
     * @param authorization access token
     * @param schoolId SchoolId in Encrypted Form
     * @param instituteId InstituteId in Encrypted Form
     * @param userId UserId in Encrypted Form
     * @param academicSessionId AcademicSessionId in Encrypted Form 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllTests(testTypeId: number, classSections:  Array<string>, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getAllTests(testTypeId: number,  classSections:  Array<string>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getAllTests(testTypeId: number,   classSections:  Array<string>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getAllTests(testTypeId: number,   classSections:  Array<string>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (testTypeId === null || testTypeId === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getAllTests.');
        }

       
        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
       
        queryParameters = this.commonComponent.setQueryParams(testTypeId, 'testTypeId', queryParameters);

        queryParameters = this.commonComponent.setQueryParams(classSections, 'SchoolAcademicSessionClassSectionIds', queryParameters);

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}` + BaseModuleConfig._Home_work_All_Tests,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
