/**
 * BaseWebAPI
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */




import { Observable } from 'rxjs';
import { HttpResponse, HttpEvent, HttpHeaders, HttpClient, HttpParams } from '@angular/common/http';
import { Injectable, Optional, Inject } from '@angular/core';
import { Configuration } from '../base/configuration';
import { BaseUrlConfig, ModuleConfig, BaseModuleConfig } from 'app/url.config';
import { BASE_PATH } from '../base/variables';
import { CustomHttpUrlEncodingCodec } from '../base/encoder';
import { StudentTransportView } from 'app/modules/transportation/routing/model/student-transport-view';
import { StudentTransportDataView } from 'app/modules/transportation/routing/model/student-transport-data-view';




@Injectable()
export class StudentTransportService {

    protected basePath = BaseUrlConfig.BasePath + ModuleConfig.Base;
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Add Transport Assignments
     * 
     * @param studentTransportView 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createTransportAssignments(studentTransportView?: StudentTransportView, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public createTransportAssignments(studentTransportView?: StudentTransportView, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public createTransportAssignments(studentTransportView?: StudentTransportView, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public createTransportAssignments(studentTransportView?: StudentTransportView, observe: any = 'body', reportProgress: boolean = false): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}` + BaseModuleConfig._Student_Transport_Assignment,
            studentTransportView,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get All Route Points Details
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public fetchRoutePoints(id?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public fetchRoutePoints(id?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public fetchRoutePoints(id?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public fetchRoutePoints(id?: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {


        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('Id', <any>id);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}` + BaseModuleConfig._Student_Transport_Route_Points,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Transport Assignment Details
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public fetchTransportAssignment(id?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public fetchTransportAssignment(id?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public fetchTransportAssignment(id?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public fetchTransportAssignment(id?: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {


        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('Id', <any>id);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}` + BaseModuleConfig._Student_Transport_Assignment,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get All Transport Routes Details
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public fetchTransportRoutes(id?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public fetchTransportRoutes(id?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public fetchTransportRoutes(id?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public fetchTransportRoutes(id?: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {


        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('Id', <any>id);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}` + BaseModuleConfig._Student_Transport_Routes,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get All Transport Schedules Details
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public fetchTransportSchedules(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public fetchTransportSchedules(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public fetchTransportSchedules(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public fetchTransportSchedules(observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}` + BaseModuleConfig._Student_Transport_Schedules,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
    * Update Transport Assignments
    * 
    * @param studentTransportDataView 
    * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
    * @param reportProgress flag to report request and response progress.
    */
    public updateTransportAssignments(studentTransportDataView?: StudentTransportDataView, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateTransportAssignments(studentTransportDataView?: StudentTransportDataView, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateTransportAssignments(studentTransportDataView?: StudentTransportDataView, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateTransportAssignments(studentTransportDataView?: StudentTransportDataView, observe: any = 'body', reportProgress: boolean = false): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}` + BaseModuleConfig._Student_Transport_Assignment,
            studentTransportDataView,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Transport Assignment Details by StudentID
     * 
     * @param authorization access token
     * @param id 
     * @param schoolId SchoolId in Encrypted Form
     * @param instituteId InstituteId in Encrypted Form
     * @param userId UserId in Encrypted Form
     * @param academicSessionId AcademicSessionId in Encrypted Form 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public fetchTransportAssignmentStudentId(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public fetchTransportAssignmentStudentId(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public fetchTransportAssignmentStudentId(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public fetchTransportAssignmentStudentId(observe: any = 'body', reportProgress: boolean = false ): Observable<any> { 
      
        let headers = this.defaultHeaders; 

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}` + BaseModuleConfig.__Trasport_Assignment_By_Id,
            {
               
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    // tracking

    /**
     * Get Route Trip Progress Details by StudentId
     * 
     * @param id 
     * @param authorization access token
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public fetchRouteTripProgressStudentId(transportRouteId: any, transportScheduleRouteId: any, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public fetchRouteTripProgressStudentId(transportRouteId: any, transportScheduleRouteId: any, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public fetchRouteTripProgressStudentId(transportRouteId: any, transportScheduleRouteId: any, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public fetchRouteTripProgressStudentId(transportRouteId: any, transportScheduleRouteId: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (transportRouteId !== undefined && transportRouteId !== null) {
            queryParameters = queryParameters.set('TransportRouteId', <any>transportRouteId);
        }
        if (transportScheduleRouteId !== undefined && transportScheduleRouteId !== null) {
            queryParameters = queryParameters.set('TransportScheduleRouteId', <any>transportScheduleRouteId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}` + BaseModuleConfig.__Student_Route_Tracking,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }
}
