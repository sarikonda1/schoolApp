import { Injectable, Optional, Inject } from '@angular/core';
import { BaseUrlConfig, ModuleConfig, CommunicationModuleConfig } from 'app/url.config';
import { HttpHeaders, HttpClient, HttpResponse, HttpParams, HttpEvent } from '@angular/common/http';
import { Configuration, BASE_PATH } from '../grading-service';
import { Observable } from 'rxjs';
import { CustomHttpUrlEncodingCodec } from '../base/encoder';
import { CommunicationTypeView } from 'app/modules/configuration/communication/model/communication-type-view';
import { CommunicationTypeDataView } from 'app/modules/configuration/communication/model/communication-type-data-view';
import { CommonComponent } from 'app/shared/common/common.component';
import { MobileNumberView } from 'app/modules/communication/model/mobile-number-view';
import { CommunicationFetchView } from 'app/models/academics/communication-fetch-view';

/**
 * Communication
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */




@Injectable()
export class CommunicationTypesService {

  //  protected basePath = 'http://localhost:8013';
     protected basePath = BaseUrlConfig.BasePath + ModuleConfig.Communication;
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string,
        @Optional() configuration: Configuration, private commonComponent: CommonComponent) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Get CommunicationTypes
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public communicationTypesDetails(id?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public communicationTypesDetails(id?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public communicationTypesDetails(id?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public communicationTypesDetails(id?: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {


        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('Id', <any>id);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}` + CommunicationModuleConfig._Communication_Types_Details,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Add Communication Types
     * 
     * @param communicationTypeView 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createCommunicationTypes(communicationTypeView?: CommunicationTypeView, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public createCommunicationTypes(communicationTypeView?: CommunicationTypeView, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public createCommunicationTypes(communicationTypeView?: CommunicationTypeView, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public createCommunicationTypes(communicationTypeView?: CommunicationTypeView, observe: any = 'body', reportProgress: boolean = false): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}` + CommunicationModuleConfig._Communication_Types,
            communicationTypeView,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
  * Delete Communication Types
  * 
  
  * @param id  
  * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
  * @param reportProgress flag to report request and response progress.
  */
    public deleteCommunicationTypes(id?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteCommunicationTypes(id?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteCommunicationTypes(id?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteCommunicationTypes(id?: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('Id', <any>id);
        }

        let headers = this.defaultHeaders;
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}` + CommunicationModuleConfig._Communication_Types,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get All CommunicationTypes
     * 
     * @param communicationTypeName Gets or sets  CommunicationTypeName
     * @param sortBy Gets or Sets SortBy
     * @param sortOrder Gets or Sets SortOrder
     * @param pageNumber 
     * @param pageSize 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCommunicationTypes(communicationTypeName?: Array<string>, sortBy?: string,
        sortOrder?: 0 | 1 | -1, pageNumber?: number, pageSize?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getCommunicationTypes(communicationTypeName?: Array<string>, sortBy?: string,
        sortOrder?: 0 | 1 | -1, pageNumber?: number, pageSize?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getCommunicationTypes(communicationTypeName?: Array<string>, sortBy?: string,
        sortOrder?: 0 | 1 | -1, pageNumber?: number, pageSize?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getCommunicationTypes(communicationTypeName?: Array<string>, sortBy?: string,
        sortOrder?: 0 | 1 | -1, pageNumber?: number, pageSize?: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {






        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });

        queryParameters = this.commonComponent.setQueryParams(communicationTypeName, 'CommunicationTypeName', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(sortOrder, 'SortOrder', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(sortBy, 'SortBy', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(pageNumber, 'PageNumber', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(pageSize, 'PageSize', queryParameters);

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}` + CommunicationModuleConfig._Communication_Types,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update Communication Types
     * 
     * @param communicationTypeDataView 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateCommunicationTypes(communicationTypeDataView?: CommunicationTypeDataView, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateCommunicationTypes(communicationTypeDataView?: CommunicationTypeDataView, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateCommunicationTypes(communicationTypeDataView?: CommunicationTypeDataView, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateCommunicationTypes(communicationTypeDataView?: CommunicationTypeDataView, observe: any = 'body', reportProgress: boolean = false): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}` + CommunicationModuleConfig._Communication_Types,
            communicationTypeDataView,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }
        
    
        /**
     * ResendOtp
     * 
     * @param mobileNumberView 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public resendOtp(mobileNumberView?: MobileNumberView, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public resendOtp(mobileNumberView?: MobileNumberView, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public resendOtp(mobileNumberView?: MobileNumberView, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public resendOtp(mobileNumberView?: MobileNumberView, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}` +  CommunicationModuleConfig._Resend_Otp,
            mobileNumberView,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        }


     /**
     * Communication Details
     * 
     * @param studentIds Gets And Sets StudentIds
     * @param studentNames Gets And Sets StudentIds
     * @param communicationTypeId Gets or sets CommunicationTypeId
     * @param schoolBoardId Gets or Sets ClassIds Encrypted Values
     * @param classIds Gets or Sets ClassIds Encrypted Values
     * @param sectionIds Gets or Sets SectionIds Encrypted Values
     * @param statusIds Gets or Sets StatusIds Encrypted Values
     * @param sender Gets or sets Sender
     * @param reciever Gets or sets Reciever
     * @param title Gets or sets Title
     * @param entryDateBegin Gets or sets EntryDateBegin
     * @param entryDateEnd Gets or sets EntryDateEnd
     * @param approvedBy Gets or sets ApprovedBy
     * @param approvedDateBegin Gets or sets ApprovedDateBegin
     * @param approvedDateEnd Gets or sets ApprovedDateEnd
     * @param status Gets or sets Status
     * @param sortOrder Gets or Sets SortOrder
     * @param sortBy Gets or Sets SortBy
     * @param pageNumber 
     * @param pageSize 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public communicationDetails(model: CommunicationFetchView, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public communicationDetails(model: CommunicationFetchView, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public communicationDetails(model: CommunicationFetchView, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public communicationDetails(model: CommunicationFetchView, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        queryParameters = this.commonComponent.setQueryParamsWithModel(model, queryParameters);
        let headers = this.defaultHeaders;
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}` + CommunicationModuleConfig._Communication_Search,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }


  
    /**
    * Get List of Communication Types
    * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
    * @param reportProgress flag to report request and response progress.
    */
   public getCommunicationType(observe?: 'body', reportProgress?: boolean): Observable<any>;
   public getCommunicationType(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
   public getCommunicationType(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
   public getCommunicationType(observe: any = 'body', reportProgress: boolean = false): Observable<any> {


       let headers = this.defaultHeaders;
       // to determine the Accept header
       const httpHeaderAccepts: string[] = [
       ];
       const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
       if (httpHeaderAcceptSelected !== undefined) {
           headers = headers.set('Accept', httpHeaderAcceptSelected);
       }

       // to determine the Content-Type header
       const consumes: string[] = [
       ];

       return this.httpClient.get<any>(`${this.basePath}` + CommunicationModuleConfig._Communication_Type,
           {
               withCredentials: this.configuration.withCredentials,
               headers: headers,
               observe: observe,
               reportProgress: reportProgress
           }
       );
   }


}
