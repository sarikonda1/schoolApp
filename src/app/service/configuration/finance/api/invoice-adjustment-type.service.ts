/**
 * Fee
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import {
    HttpClient, HttpHeaders, HttpParams,
    HttpResponse, HttpEvent
} from '@angular/common/http';

import { Observable } from 'rxjs/Observable';
import { BaseUrlConfig, ModuleConfig, FeeModuleConfig } from 'app/url.config';
import { Configuration, BASE_PATH } from 'app/service/academic-service';
import { InvoiceAdjustmentTypeView } from 'app/modules/configuration/finance/models/invoice-adjustment-type-view';
import { CustomHttpUrlEncodingCodec } from 'app/service/base/encoder';
import { InvoiceAdjustmentTypeUpdateView } from 'app/modules/configuration/finance/models/invoice-adjustment-type-update-view';
import { InvoiceAdjustmentTypeStatusView } from 'app/modules/configuration/finance/models/invoice-adjustment-type-status-view';
import { CommonComponent } from 'app/shared/common/common.component';



@Injectable()
export class InvoiceAdjustmentTypeService {

    protected basePath = BaseUrlConfig.BasePath + ModuleConfig.Fee;
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH)
    basePath: string, @Optional() configuration: Configuration, private commonComponent: CommonComponent) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * adds an invoice adjustment type, returns validation message
     * 
     * @param authorization access token
     * @param invoiceAdjType 
     * @param schoolId SchoolId in Encrypted Form
     * @param instituteId InstituteId in Encrypted Form
     * @param userId UserId in Encrypted Form
     * @param academicSessionId AcademicSessionId in Encrypted Form 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createInvoiceAdjustmentType(invoiceAdjType?: InvoiceAdjustmentTypeView, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public createInvoiceAdjustmentType(invoiceAdjType?: InvoiceAdjustmentTypeView, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public createInvoiceAdjustmentType(invoiceAdjType?: InvoiceAdjustmentTypeView, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public createInvoiceAdjustmentType(invoiceAdjType?: InvoiceAdjustmentTypeView, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}` + FeeModuleConfig._InvoiceAdjustmentType,
            invoiceAdjType,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
 * deletes invoice adjustment type, returns validation message
 * 
 * @param id 
 * @param authorization access token
 * @param schoolId SchoolId in Encrypted Form
 * @param instituteId InstituteId in Encrypted Form
 * @param userId UserId in Encrypted Form
 * @param academicSessionId AcademicSessionId in Encrypted Form 
 * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
 * @param reportProgress flag to report request and response progress.
 */
    public deleteInvoiceAdjustmentType(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteInvoiceAdjustmentType(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteInvoiceAdjustmentType(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteInvoiceAdjustmentType(id: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteInvoiceAdjustmentType.');
        }

        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('Id', <any>id);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/InvoiceAdjustmentType/invoice-adjustment-type`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Fetch details of an invoice adjustment details, returns Details on success else validation messsage
     * 
     * @param id 
     * @param authorization access token
     * @param schoolId SchoolId in Encrypted Form
     * @param instituteId InstituteId in Encrypted Form
     * @param userId UserId in Encrypted Form
     * @param academicSessionId AcademicSessionId in Encrypted Form 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public invoiceAdjustmentTypeDetails(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public invoiceAdjustmentTypeDetails(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public invoiceAdjustmentTypeDetails(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public invoiceAdjustmentTypeDetails(id: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling invoiceAdjustmentTypeDetails.');
        }

        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('Id', <any>id);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}` + FeeModuleConfig._InvoiceAdjustmentType,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * fetaches all invoice adjustment types based on filter aplied, returns list
     * 
     * @param authorization access token
     * @param names Gets or Sets Name
     * @param isPositiveAdjustment Gets or Sets IsPositiveAdjustment
     * @param inActive Gets or Sets InActive
     * @param sortBy Gets or Sets SortBy
     * @param sortOrder Gets or Sets SortOrder
     * @param pageNumber 
     * @param pageSize 
     * @param schoolId SchoolId in Encrypted Form
     * @param instituteId InstituteId in Encrypted Form
     * @param userId UserId in Encrypted Form
     * @param academicSessionId AcademicSessionId in Encrypted Form 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public invoiceAdjustmentTypesList(names?: Array<string>, isPositiveAdjustment?: Array<number>, 
        inActive?: Array<number>, inactiveDate?: string, inactiveDateBegin?: string, inactiveDateEnd?: string, 
        sortBy?: string, sortOrder?: number, pageNumber?: number, pageSize?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public invoiceAdjustmentTypesList(names?: Array<string>, isPositiveAdjustment?: Array<number>, 
        inActive?: Array<number>, inactiveDate?: string, inactiveDateBegin?: string, inactiveDateEnd?: string, 
        sortBy?: string, sortOrder?: number, pageNumber?: number, pageSize?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public invoiceAdjustmentTypesList(names?: Array<string>, isPositiveAdjustment?: Array<number>, 
        inActive?: Array<number>, inactiveDate?: string, inactiveDateBegin?: string, inactiveDateEnd?: string, 
        sortBy?: string, sortOrder?: number, pageNumber?: number, pageSize?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public invoiceAdjustmentTypesList(names?: Array<string>, isPositiveAdjustment?: Array<number>, 
        inActive?: Array<number>, inactiveDate?: string, inactiveDateBegin?: string, inactiveDateEnd?: string, 
        sortBy?: string, sortOrder?: number, pageNumber?: number, pageSize?: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });

        queryParameters = this.commonComponent.setQueryParams(names, 'Names', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(isPositiveAdjustment, 'IsPositiveAdjustment', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(inActive, 'InActive', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(inactiveDate, 'InActiveDate', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(inactiveDateBegin, 'InActiveDateBegin', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(inactiveDateEnd, 'InActiveDateEnd', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(sortBy, 'SortBy', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(sortOrder, 'SortOrder', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(pageNumber, 'PageNumber', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(pageSize, 'PageSize', queryParameters);

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}` + FeeModuleConfig._InvoiceAdjustmentTypes,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates an invoice adjustment type, returns validation message
     * 
     * @param authorization access token
     * @param invoiceAdjType 
     * @param schoolId SchoolId in Encrypted Form
     * @param instituteId InstituteId in Encrypted Form
     * @param userId UserId in Encrypted Form
     * @param academicSessionId AcademicSessionId in Encrypted Form 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateInvoiceAdjustmentType(invoiceAdjType?: InvoiceAdjustmentTypeUpdateView, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateInvoiceAdjustmentType(invoiceAdjType?: InvoiceAdjustmentTypeUpdateView, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateInvoiceAdjustmentType(invoiceAdjType?: InvoiceAdjustmentTypeUpdateView, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateInvoiceAdjustmentType(invoiceAdjType?: InvoiceAdjustmentTypeUpdateView, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}` + FeeModuleConfig._InvoiceAdjustmentType,
            invoiceAdjType,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * makes an invoice adjustment type active or in-active, returns validation message
     * 
     * @param authorization access token
     * @param statusView 
     * @param schoolId SchoolId in Encrypted Form
     * @param instituteId InstituteId in Encrypted Form
     * @param userId UserId in Encrypted Form
     * @param academicSessionId AcademicSessionId in Encrypted Form 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateInvoiceAdjustmentTypeStatus(statusView?: InvoiceAdjustmentTypeStatusView, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateInvoiceAdjustmentTypeStatus(statusView?: InvoiceAdjustmentTypeStatusView, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateInvoiceAdjustmentTypeStatus(statusView?: InvoiceAdjustmentTypeStatusView, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateInvoiceAdjustmentTypeStatus(statusView?: InvoiceAdjustmentTypeStatusView, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}` + FeeModuleConfig._InvoiceAdjustmentTypeStatusUpdate,
            statusView,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
