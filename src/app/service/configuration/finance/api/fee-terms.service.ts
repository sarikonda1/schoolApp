/**
 * Fee
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams, HttpResponse, HttpEvent } from '@angular/common/http';
import { Observable } from 'rxjs/Observable';
import { BaseUrlConfig, ModuleConfig, FeeModuleConfig } from 'app/url.config';
import { Configuration, BASE_PATH } from 'app/service/grading-service';
import { CustomHttpUrlEncodingCodec } from 'app/service/base/encoder';
import { FeeTermsDataViewModel } from 'app/modules/configuration/finance/models/fee-terms-data-view-model';
import { FeeTermsViewModel } from 'app/modules/configuration/finance/models/fee-terms-view-model';
import { CommonComponent } from 'app/shared/common/common.component';

@Injectable()
export class FeeTermsService {
    // protected basePath = 'http://localhost:8011';
    protected basePath = BaseUrlConfig.BasePath + ModuleConfig.Fee;
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, private commonComponent: CommonComponent,
        @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Add FeeTerms
     * 
     * @param feeTermsViewModel 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addFeeTerms(feeTermsViewModel?: FeeTermsDataViewModel, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public addFeeTerms(feeTermsViewModel?: FeeTermsDataViewModel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public addFeeTerms(feeTermsViewModel?: FeeTermsDataViewModel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public addFeeTerms(feeTermsViewModel?: FeeTermsDataViewModel, observe: any = 'body', reportProgress: boolean = false): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}` + FeeModuleConfig._FeeTerm_FeeTerm,
            feeTermsViewModel,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete Fee Term
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public dropFeeTerms(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public dropFeeTerms(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public dropFeeTerms(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public dropFeeTerms(id: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling dropFeeTerms.');
        }

        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('Id', <any>id);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}` + FeeModuleConfig._FeeTerm_FeeTerm,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update Fee Term
     * 
     * @param feeTermsViewModel 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public editFeeTerms(feeTermsViewModel?: FeeTermsViewModel, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public editFeeTerms(feeTermsViewModel?: FeeTermsViewModel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public editFeeTerms(feeTermsViewModel?: FeeTermsViewModel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public editFeeTerms(feeTermsViewModel?: FeeTermsViewModel, observe: any = 'body', reportProgress: boolean = false): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}` + FeeModuleConfig._FeeTerm_FeeTerm,
            feeTermsViewModel,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Fee-term details by id
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public feeTermById(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public feeTermById(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public feeTermById(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public feeTermById(id: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling feeTermById.');
        }

        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('Id', <any>id);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}` + FeeModuleConfig._FeeTerms_FeeTerm_By_Id,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Fetch details of fee-terms list
     * 
     * @param shortName Gets or Sets ShortName
     * @param displayName Gets or Sets DisplayName
     * @param code Gets or Sets Code
     * @param description Gets or Sets Description
     * @param sortBy Gets or Sets SortBy
     * @param sortOrder Gets or Sets SortOrder    
     * @param startDate Gets or Sets StartDate
     * @param endDate Gets or Sets EndDate
     * @param invoiceGenerationDate Gets or Sets InvoiceGenerationDate
     * @param invoiceIssueDate Gets or Sets InvoiceIssueDate
     * @param invoiceDueDate Gets or Sets InvoiceDueDate
     * @param pageNumber 
     * @param pageSize 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public feeTerms(shortName?: Array<string>, displayName?: Array<string>, code?: Array<string>, description?: Array<string>, sortBy?: string, sortOrder?: 0 | 1 | -1,
        startDate?: string, startDateBegin?: string, startDateEnd?: string, endDate?: string, endDateBegin?: string, endDateEnd?: string, invoiceGenerationDate?: string,
        invoiceGenerationDateBegin?: string, invoiceGenerationDateEnd?: string, invoiceIssueDate?: string, invoiceIssueDateBegin?: string, invoiceIssueDateEnd?: string,
        invoiceDueDate?: string, invoiceDueDateBegin?: string,
        invoiceDueDateEnd?: string, pageNumber?: number, pageSize?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public feeTerms(shortName?: Array<string>, displayName?: Array<string>, code?: Array<string>, description?: Array<string>, sortBy?: string, sortOrder?: 0 | 1 | -1,
        startDate?: string, startDateBegin?: string, startDateEnd?: string, endDate?: string, endDateBegin?: string, endDateEnd?: string, invoiceGenerationDate?: string,
        invoiceGenerationDateBegin?: string, invoiceGenerationDateEnd?: string, invoiceIssueDate?: string, invoiceIssueDateBegin?: string, invoiceIssueDateEnd?: string,
        invoiceDueDate?: string, invoiceDueDateBegin?: string, invoiceDueDateEnd?: string, pageNumber?: number, pageSize?: number, observe?: 'response',
        reportProgress?: boolean): Observable<HttpResponse<any>>;
    public feeTerms(shortName?: Array<string>, displayName?: Array<string>, code?: Array<string>, description?: Array<string>, sortBy?: string, sortOrder?: 0 | 1 | -1,
        startDate?: string, startDateBegin?: string, startDateEnd?: string, endDate?: string, endDateBegin?: string, endDateEnd?: string, invoiceGenerationDate?: string,
        invoiceGenerationDateBegin?: string, invoiceGenerationDateEnd?: string, invoiceIssueDate?: string, invoiceIssueDateBegin?: string, invoiceIssueDateEnd?: string,
        invoiceDueDate?: string, invoiceDueDateBegin?: string, invoiceDueDateEnd?: string, pageNumber?: number, pageSize?: number, observe?: 'events',
        reportProgress?: boolean): Observable<HttpEvent<any>>;
    public feeTerms(shortName?: Array<string>, displayName?: Array<string>, code?: Array<string>, description?: Array<string>, sortBy?: string, sortOrder?: 0 | 1 | -1,
        startDate?: string, startDateBegin?: string, startDateEnd?: string, endDate?: string, endDateBegin?: string, endDateEnd?: string, invoiceGenerationDate?: string,
        invoiceGenerationDateBegin?: string, invoiceGenerationDateEnd?: string, invoiceIssueDate?: string, invoiceIssueDateBegin?: string,
        invoiceIssueDateEnd?: string, invoiceDueDate?: string, invoiceDueDateBegin?: string, invoiceDueDateEnd?: string, pageNumber?: number,
        pageSize?: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });

        queryParameters = this.commonComponent.setQueryParams(shortName, 'ShortName', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(displayName, 'DisplayName', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(code, 'Code', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(description, 'Description', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(sortOrder, 'SortOrder', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(sortBy, 'SortBy', queryParameters);

        queryParameters = this.commonComponent.setQueryParams(startDate, 'StartDate', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(startDateBegin, 'StartDateBegin', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(startDateEnd, 'StartDateEnd', queryParameters);

        queryParameters = this.commonComponent.setQueryParams(endDate, 'EndDate', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(endDateBegin, 'EndDateBegin', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(endDateEnd, 'EndDateEnd', queryParameters);

        queryParameters = this.commonComponent.setQueryParams(invoiceGenerationDate, 'InvoiceGenerationDate', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(invoiceGenerationDateBegin, 'InvoiceGenerationDateBegin', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(invoiceGenerationDateEnd, 'InvoiceGenerationDateEnd', queryParameters);

        queryParameters = this.commonComponent.setQueryParams(invoiceIssueDate, 'InvoiceIssueDate', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(invoiceIssueDateBegin, 'InvoiceIssueDateBegin', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(invoiceIssueDateEnd, 'InvoiceIssueDateEnd', queryParameters);

        queryParameters = this.commonComponent.setQueryParams(invoiceDueDate, 'InvoiceDueDate', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(invoiceDueDateBegin, 'InvoiceDueDateBegin', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(invoiceDueDateEnd, 'InvoiceDueDateEnd', queryParameters);

        queryParameters = this.commonComponent.setQueryParams(pageNumber, 'PageNumber', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(pageSize, 'PageSize', queryParameters);

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}` + FeeModuleConfig._FeeTerm_FeeTerm,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
 * Get FeeTerms Based On Academic Session Id
 * 
 * @param id 
 * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
 * @param reportProgress flag to report request and response progress.
 */
    public getFeeTerms_1(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getFeeTerms_1(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getFeeTerms_1(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getFeeTerms_1(id: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getFeeTerms_1.');
        }

        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('Id', <any>id);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}` + FeeModuleConfig._FeeTerms_FeeTerm_By_Academicsession,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
