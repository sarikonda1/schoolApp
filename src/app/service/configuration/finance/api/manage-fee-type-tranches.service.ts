/**
 * Fee
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import {
    HttpClient, HttpHeaders, HttpParams,
    HttpResponse, HttpEvent
} from '@angular/common/http';
import { Observable } from 'rxjs/Observable';
import { Configuration, BASE_PATH } from 'app/service/grading-service';
import { CustomHttpUrlEncodingCodec } from 'app/service/base/encoder';
import { FeeTypeTranchesDataView } from 'app/modules/configuration/finance/models/fee-type-tranches-data-view';
import { ModuleConfig, BaseUrlConfig } from 'app/url.config';
import { SchoolFeeTranchView } from 'app/modules/configuration/finance/models/school-fee-tranch-view';
import { CommonComponent } from 'app/shared/common/common.component';


@Injectable()
export class ManageFeeTypeTranchesService {

    protected basePath = BaseUrlConfig.BasePath + ModuleConfig.Fee;
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient,
    @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration, private commonComponent: CommonComponent) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Get Fee-Types which having tranches
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public feeTypeTranches(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public feeTypeTranches(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public feeTypeTranches(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public feeTypeTranches(observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/ManageFeeTypeTranches/feetype-tranches`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get School Fees and all terms Based on Board/FeeType/Class
     * 
     * @param schoolBoardId Gets or Sets SchoolBoardId
     * @param classId Gets or Sets ClassId
     * @param feeTypeId Gets or Sets FeeTypeId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllSchoolFeeTrancheTerms(schoolBoardId?: number, classId?: number, feeTypeId?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getAllSchoolFeeTrancheTerms(schoolBoardId?: number, classId?: number, feeTypeId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getAllSchoolFeeTrancheTerms(schoolBoardId?: number, classId?: number, feeTypeId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getAllSchoolFeeTrancheTerms(schoolBoardId?: number, classId?: number, feeTypeId?: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        queryParameters = this.commonComponent.setQueryParams(schoolBoardId, 'SchoolBoardId', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(feeTypeId, 'FeeTypeId', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(classId, 'ClassId', queryParameters);

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/ManageFeeTypeTranches/school-fee-tranches-terms`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get School Fees Based on Board/FeeType/Class
     * 
     * @param schoolBoardId Gets or Sets SchoolBoardId
     * @param classId Gets or Sets ClassId
     * @param feeTypeId Gets or Sets FeeTypeId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSchoolFeeTranches(schoolBoardId?: number, classId?: number, feeTypeId?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getSchoolFeeTranches(schoolBoardId?: number, classId?: number, feeTypeId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getSchoolFeeTranches(schoolBoardId?: number, classId?: number, feeTypeId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getSchoolFeeTranches(schoolBoardId?: number, classId?: number, feeTypeId?: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        queryParameters = this.commonComponent.setQueryParams(schoolBoardId, 'SchoolBoardId', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(feeTypeId, 'FeeTypeId', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(classId, 'ClassId', queryParameters);
        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/ManageFeeTypeTranches/school-fee-tranches`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTranchesTermsByFeeType(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getTranchesTermsByFeeType(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getTranchesTermsByFeeType(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getTranchesTermsByFeeType(id: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getTranchesTermsByFeeType.');
        }

        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('Id', <any>id);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/ManageFeeTypeTranches/feetype-tranches-terms`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * add school fees of tranche types
     * 
     * @param model 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public schoolFeeTrancheConfiguration(model?: FeeTypeTranchesDataView, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public schoolFeeTrancheConfiguration(model?: FeeTypeTranchesDataView, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public schoolFeeTrancheConfiguration(model?: FeeTypeTranchesDataView, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public schoolFeeTrancheConfiguration(model?: FeeTypeTranchesDataView, observe: any = 'body', reportProgress: boolean = false): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/ManageFeeTypeTranches/manage-school-fee-type-tranches`,
            model,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * update UpdateSchoolFeeTranchesConfiguration
     * 
     * @param model 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateSchoolFeeTranchesConfiguration(model?: SchoolFeeTranchView, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateSchoolFeeTranchesConfiguration(model?: SchoolFeeTranchView, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateSchoolFeeTranchesConfiguration(model?: SchoolFeeTranchView, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateSchoolFeeTranchesConfiguration(model?: SchoolFeeTranchView, observe: any = 'body', reportProgress: boolean = false): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}/ManageFeeTypeTranches/manage-school-fee-type-tranches`,
            model,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

     /**
     * deletes all class/board school fees/ tranches if invoice not generated
     * 
     * @param schoolBoardId Gets or Sets SchoolBoardId
     * @param classId Gets or Sets ClassId
     * @param feeTypeId Gets or Sets FeeTypeId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteAllSchoolFeeTranches( schoolBoardId?: number, classId?: number, feeTypeId?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteAllSchoolFeeTranches( schoolBoardId?: number, classId?: number, feeTypeId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteAllSchoolFeeTranches( schoolBoardId?: number, classId?: number, feeTypeId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteAllSchoolFeeTranches( schoolBoardId?: number, classId?: number, feeTypeId?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (schoolBoardId !== undefined && schoolBoardId !== null) {
            queryParameters = queryParameters.set('SchoolBoardId', <any>schoolBoardId);
        }
        if (classId !== undefined && classId !== null) {
            queryParameters = queryParameters.set('ClassId', <any>classId);
        }
        if (feeTypeId !== undefined && feeTypeId !== null) {
            queryParameters = queryParameters.set('FeeTypeId', <any>feeTypeId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/ManageFeeTypeTranches/delete-all-school-fee-tranches`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
