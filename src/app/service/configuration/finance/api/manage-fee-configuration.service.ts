/**
 * Fee
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import {
    HttpClient, HttpHeaders, HttpParams,
    HttpResponse, HttpEvent
} from '@angular/common/http';
import { Observable } from 'rxjs/Observable';
import { Configuration, BASE_PATH } from 'app/service/grading-service';
import { BaseUrlConfig, ModuleConfig, FeeModuleConfig } from 'app/url.config';
import { CustomHttpUrlEncodingCodec } from 'app/service/base/encoder';
import { ManageFeeConfigurationView } from 'app/modules/configuration/finance/models/manage-fee-configuration-view';
import { CloneSchoolFeeView } from 'app/modules/configuration/finance/models/clone-school-fee-view';
import { SchoolFeeViewModel } from 'app/modules/configuration/finance/models/school-fee-view-model';


@Injectable()
export class ManageFeeConfigurationService {

    protected basePath = BaseUrlConfig.BasePath + ModuleConfig.Fee;
    // protected basePath = 'http://localhost:8011';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
 * Clone Fee Structure
 * 
 * @param model 
 * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
 * @param reportProgress flag to report request and response progress.
 */
    public cloneFeeStructure(model?: CloneSchoolFeeView, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public cloneFeeStructure(model?: CloneSchoolFeeView, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public cloneFeeStructure(model?: CloneSchoolFeeView, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public cloneFeeStructure(model?: CloneSchoolFeeView, observe: any = 'body', reportProgress: boolean = false): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}` + FeeModuleConfig._Clone_FeeStructure,
            model,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
    * Delete School Fee if it not used in invoice details
    * 
    * @param id 
    * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
    * @param reportProgress flag to report request and response progress.
    */
    public deleteSchoolFee(id?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteSchoolFee(id?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteSchoolFee(id?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteSchoolFee(id?: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {


        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('Id', <any>id);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}` + FeeModuleConfig._Delete_SchoolFee_Structure,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
    * FeeTypes and All FeeTerms of Fee types based on class id
    * 
    * @param schoolBoardId Gets or Sets SchoolBoardId
    * @param classId Gets or Sets ClassId
    * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
    * @param reportProgress flag to report request and response progress.
    */
    public getAllFeetermsByClass(schoolBoardId?: number, classId?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getAllFeetermsByClass(schoolBoardId?: number, classId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getAllFeetermsByClass(schoolBoardId?: number, classId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getAllFeetermsByClass(schoolBoardId?: number, classId?: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (schoolBoardId !== undefined && schoolBoardId !== null) {
            queryParameters = queryParameters.set('SchoolBoardId', <any>schoolBoardId);
        }
        if (classId !== undefined && classId !== null) {
            queryParameters = queryParameters.set('ClassId', <any>classId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}` + FeeModuleConfig._Get__All_FeeTypes_FeeTerms_By_Class,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
    * Get fee terms for a fee type
    * 
    * @param ids 
    * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
    * @param reportProgress flag to report request and response progress.
    */
    public getFeeTermsByFeeType(ids?: Array<number>, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getFeeTermsByFeeType(ids?: Array<number>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getFeeTermsByFeeType(ids?: Array<number>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getFeeTermsByFeeType(ids?: Array<number>, observe: any = 'body', reportProgress: boolean = false): Observable<any> {


        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (ids) {
            ids.forEach((element) => {
                queryParameters = queryParameters.append('Ids', <any>element);
            });
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}` + FeeModuleConfig._Get_FeeTerms_By_FeeTypes,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
    * Get Fee types and fee terms of academic session
    * 
    * @param schoolBoardId Gets or Sets SchoolBoardId
    * @param classId Gets or Sets ClassId
    * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
    * @param reportProgress flag to report request and response progress.
    */
    public getFeeTypeFeeTerms(schoolBoardId?: number, classId?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getFeeTypeFeeTerms(schoolBoardId?: number, classId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getFeeTypeFeeTerms(schoolBoardId?: number, classId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getFeeTypeFeeTerms(schoolBoardId?: number, classId?: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {



        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (schoolBoardId !== undefined && schoolBoardId !== null) {
            queryParameters = queryParameters.set('SchoolBoardId', <any>schoolBoardId);
        }
        if (classId !== undefined && classId !== null) {
            queryParameters = queryParameters.set('ClassId', <any>classId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}` + FeeModuleConfig._Get__FeeTypes_FeeTerms_By_ClassId,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
    * Fee types based on class, it&#39;ll return unassigned fee types for class
    * 
    * @param schoolBoardId Gets or Sets SchoolBoardId
    * @param classId Gets or Sets ClassId
    * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
    * @param reportProgress flag to report request and response progress.
    */
    public getFeeTypesByClass(schoolBoardId?: number, classId?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getFeeTypesByClass(schoolBoardId?: number, classId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getFeeTypesByClass(schoolBoardId?: number, classId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getFeeTypesByClass(schoolBoardId?: number, classId?: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {



        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (schoolBoardId !== undefined && schoolBoardId !== null) {
            queryParameters = queryParameters.set('SchoolBoardId', <any>schoolBoardId);
        }
        if (classId !== undefined && classId !== null) {
            queryParameters = queryParameters.set('ClassId', <any>classId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}` + FeeModuleConfig._Get_FeeTypes_By_Class,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
    * Get school fee UnAssigned classes based on school board
    * 
    * @param id 
    * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
    * @param reportProgress flag to report request and response progress.
    */
    public getUnAssignedClasses(id?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getUnAssignedClasses(id?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getUnAssignedClasses(id?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getUnAssignedClasses(id?: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {


        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('Id', <any>id);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}` + FeeModuleConfig._Get_Unassigned_Classes,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
    * School fees and school fee terms assisgnment
    * 
    * @param model 
    * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
    * @param reportProgress flag to report request and response progress.
    */
    public schoolFeeAssignment(model?: ManageFeeConfigurationView, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public schoolFeeAssignment(model?: ManageFeeConfigurationView, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public schoolFeeAssignment(model?: ManageFeeConfigurationView, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public schoolFeeAssignment(model?: ManageFeeConfigurationView, observe: any = 'body', reportProgress: boolean = false): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}` + FeeModuleConfig._Assign_SchoolFees,
            model,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
    * Update school fees
    * 
    * @param schoolFeesView 
    * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
    * @param reportProgress flag to report request and response progress.
    */
    public updateSchoolFees(schoolFeesView?: Array<SchoolFeeViewModel>, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateSchoolFees(schoolFeesView?: Array<SchoolFeeViewModel>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateSchoolFees(schoolFeesView?: Array<SchoolFeeViewModel>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateSchoolFees(schoolFeesView?: Array<SchoolFeeViewModel>, observe: any = 'body', reportProgress: boolean = false): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}` + FeeModuleConfig._Update_SchoolFees,
            schoolFeesView,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * deletes all class/board school fees/ tranches if invoice not generated
     * 
     * @param schoolBoardId Gets or Sets SchoolBoardId
     * @param classId Gets or Sets ClassId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteAllSchoolFees( schoolBoardId?: number, classId?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteAllSchoolFees(schoolBoardId?: number, classId?: number,  observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteAllSchoolFees( schoolBoardId?: number, classId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteAllSchoolFees( schoolBoardId?: number, classId?: number,  observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (schoolBoardId !== undefined && schoolBoardId !== null) {
            queryParameters = queryParameters.set('SchoolBoardId', <any>schoolBoardId);
        }
        if (classId !== undefined && classId !== null) {
            queryParameters = queryParameters.set('ClassId', <any>classId);
        }

        let headers = this.defaultHeaders;
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/ManageFeeConfiguration/delete-all-school-fees`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
