/**
 * Fee
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import {
    HttpClient, HttpHeaders, HttpParams,
    HttpResponse, HttpEvent
} from '@angular/common/http';

import { Observable } from 'rxjs/Observable';
import { Configuration, BASE_PATH } from 'app/service/grading-service';
import { FeeConcessionGroupViewModel } from 'app/modules/configuration/finance/models/fee-concession-group-viewmodel';
import { CustomHttpUrlEncodingCodec } from 'app/service/base/encoder';
import { BaseUrlConfig, ModuleConfig, FeeModuleConfig } from 'app/url.config';
import { CommonComponent } from 'app/shared/common/common.component';
import { FeeConcessionGroupsDataView } from 'app/modules/configuration/finance/models/fee-concession-group-data-view';


@Injectable()
export class FeeConcessionGroupService {

    protected basePath = BaseUrlConfig.BasePath + ModuleConfig.Fee;
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH)
    basePath: string, @Optional() configuration: Configuration, protected commonComponent: CommonComponent) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
 * 
 * 
 * @param feeConcessionGroupViewModel 
 * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
 * @param reportProgress flag to report request and response progress.
 */
    public createFeeConcessionGroup(feeConcessionGroupViewModel?: FeeConcessionGroupViewModel, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public createFeeConcessionGroup(feeConcessionGroupViewModel?: FeeConcessionGroupViewModel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public createFeeConcessionGroup(feeConcessionGroupViewModel?: FeeConcessionGroupViewModel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public createFeeConcessionGroup(feeConcessionGroupViewModel?: FeeConcessionGroupViewModel, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}` + FeeModuleConfig._FeeConcessionGroup_CreateFeeConcessionGroup,
            feeConcessionGroupViewModel,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * To delete FeeConcession Group Based on Id
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteFeeConcessionGroup(id?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteFeeConcessionGroup(id?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteFeeConcessionGroup(id?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteFeeConcessionGroup(id?: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {


        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('Id', <any>id);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header

        return this.httpClient.delete<any>(`${this.basePath}` + FeeModuleConfig._FeeConcessionGroup_FeeConcessionGroup,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get FeeConcessionGroup By Id and AcademicSessionId
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public fetchConcessionGroupById(id?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public fetchConcessionGroupById(id?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public fetchConcessionGroupById(id?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public fetchConcessionGroupById(id?: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {


        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('Id', <any>id);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header

        return this.httpClient.get<any>(`${this.basePath}` + FeeModuleConfig._FeeConcessionGroup_GetByID,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
    * Get FeeConcessionGroup By Id and AcademicSessionId
    * 
    * @param id 
    * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
    * @param reportProgress flag to report request and response progress.
    */
    public fetchFeeConcessionGroupById(id?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public fetchFeeConcessionGroupById(id?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public fetchFeeConcessionGroupById(id?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public fetchFeeConcessionGroupById(id?: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {


        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('Id', <any>id);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}` + FeeModuleConfig._FetchFeeConcessionGroup_GetByID,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
      * Get All FeeConcessionGroups
      * 
      * @param sortBy Gets or Sets of SortBy
      * @param sortOrder Gets or Sets of SortOrder
      * @param name Gets or Sets of GroupName
      * @param code Gets or Sets of Code
      * @param description Gets or Sets of Description
      * @param feeTypeIds Gets or Sets of FeeTypeIds
      * @param concessionType Gets or Sets of ConcessionPercentage
      * @param concession Gets or Sets of TermDiscountAmount
      * @param termIds Gets or Sets of TermIds
      * @param pageNumber 
      * @param pageSize 
      * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
      * @param reportProgress flag to report request and response progress.
      */
    public fetchFeeConcessionGroup(sortBy?: string, sortOrder?: 0 | 1 | -1, name?: Array<string>, code?: Array<string>, description?: Array<string>,
        feeTypeIds?: Array<string>, concessionType?: Array<string>, concession?: Array<string>, termIds?: Array<string>, pageNumber?: number,
        pageSize?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public fetchFeeConcessionGroup(sortBy?: string, sortOrder?: 0 | 1 | -1, name?: Array<string>, code?: Array<string>, description?: Array<string>,
        feeTypeIds?: Array<string>, concessionType?: Array<string>, concession?: Array<string>, termIds?: Array<string>, pageNumber?: number,
        pageSize?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public fetchFeeConcessionGroup(sortBy?: string, sortOrder?: 0 | 1 | -1, name?: Array<string>, code?: Array<string>, description?: Array<string>,
        feeTypeIds?: Array<string>, concessionType?: Array<string>, concession?: Array<string>, termIds?: Array<string>, pageNumber?: number,
        pageSize?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public fetchFeeConcessionGroup(sortBy?: string, sortOrder?: 0 | 1 | -1, name?: Array<string>, code?: Array<string>, description?: Array<string>,
        feeTypeIds?: Array<string>, concessionType?: Array<string>, concession?: Array<string>, termIds?: Array<string>, pageNumber?: number,
        pageSize?: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {



        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });

        queryParameters = this.commonComponent.setQueryParams(name, 'Name', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(code, 'Code', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(description, 'Description', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(feeTypeIds, 'FeeTypeIds', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(termIds, 'FeeTermIds', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(concession, 'Concession', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(concessionType, 'ConcessionType', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(sortOrder, 'SortOrder', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(sortBy, 'SortBy', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(pageNumber, 'PageNumber', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(pageSize, 'PageSize', queryParameters);


        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}` + FeeModuleConfig._FeeConcessionGroup_FeeConcessionGroup,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get All Fee types
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public fetchConcessionTypes(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public fetchConcessionTypes(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public fetchConcessionTypes(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public fetchConcessionTypes(observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}` + FeeModuleConfig._FeeConcessionGroup_GetFeeConcessionTypes,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
   * Get All Fee types
   * 
   * @param id 
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
    public fetchFeeTerms(id?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public fetchFeeTerms(id?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public fetchFeeTerms(id?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public fetchFeeTerms(id?: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        queryParameters = this.commonComponent.setQueryParams(id, 'Id', queryParameters);
        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header

        return this.httpClient.get<any>(`${this.basePath}` + FeeModuleConfig._FeeConcessionGroup_GetFeeTerms,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get All Fee types
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public fetchfeeTypes(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public fetchfeeTypes(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public fetchfeeTypes(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public fetchfeeTypes(observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return this.httpClient.get<any>(`${this.basePath}` + FeeModuleConfig._FeeConcessionGroup_GetFeeTypes,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * To update feeConcessionGroup by feeConcessionId
     * 
     * @param feeConcessionGroupView 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateFeeConcessionGroup(feeConcessionGroupView?: FeeConcessionGroupsDataView, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateFeeConcessionGroup(feeConcessionGroupView?: FeeConcessionGroupsDataView, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateFeeConcessionGroup(feeConcessionGroupView?: FeeConcessionGroupsDataView, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateFeeConcessionGroup(feeConcessionGroupView?: FeeConcessionGroupsDataView, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}` + FeeModuleConfig._FeeConcessionGroup_FeeConcessionGroup,
            feeConcessionGroupView,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
