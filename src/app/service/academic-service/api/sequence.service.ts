/**
 * BaseWebAPI
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import {
    HttpClient, HttpHeaders, HttpParams,
    HttpResponse, HttpEvent
} from '@angular/common/http';


import { Observable } from 'rxjs/Observable';
import { Configuration, BASE_PATH } from '.';
import { CustomHttpUrlEncodingCodec } from '../../base/encoder';
import { BaseUrlConfig, ModuleConfig, BaseModuleConfig } from 'app/url.config';
import { SchoolSequenceView } from 'app/models/academics/school-sequence-view';
import { SequenceStatusView } from 'app/models/academics/sequence-status-view';
import { SchoolSequenceViewModel } from 'app/models/academics/school-sequence-viewmodel';
import { SequencesView } from 'app/models/academics/sequences-view';




@Injectable()
export class SequenceService {
  
     protected basePath = BaseUrlConfig.BasePath + ModuleConfig.Base;

    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();


    constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }




    /**
     * Get all details of sequence  based on schoolId
     * 
     * @param authorization access token
     * @param sequenceCategoryTypeId Gets or Sets SequenceCategoryType_Id
     * @param sequence Gets or Sets Sequence
     * @param startingSequence Gets or Sets Starting_Sequence
     * @param currentSequence Gets or Sets Starting_Sequence
     * @param isActive Gets or Sets IsActive
     * @param sortBy Gets or Sets SortBy
     * @param sortOrder Gets or Sets SortOrder
     * @param pageNumber 
     * @param pageSize 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllSequence(schoolId: string, sequenceCategoryTypeId?: Array<string>, sequence?: Array<string>, startingSequence?: Array<number>,
        currentSequence?: Array<number>, isActive?: Array<number>, sortBy?: string, sortOrder?: 0 | 1 | -1, pageNumber?: number,
        pageSize?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getAllSequence(schoolId: string, sequenceCategoryTypeId?: Array<string>, sequence?: Array<string>, startingSequence?: Array<number>,
        currentSequence?: Array<number>, isActive?: Array<number>, sortBy?: string, sortOrder?: 0 | 1 | -1, pageNumber?: number,
        pageSize?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getAllSequence(schoolId: string, sequenceCategoryTypeId?: Array<string>, sequence?: Array<string>, startingSequence?: Array<number>,
        currentSequence?: Array<number>, isActive?: Array<number>, sortBy?: string, sortOrder?: 0 | 1 | -1, pageNumber?: number,
        pageSize?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getAllSequence(schoolId: string, sequenceCategoryTypeId?: Array<string>, sequence?: Array<string>, startingSequence?: Array<number>,
        currentSequence?: Array<number>, isActive?: Array<number>, sortBy?: string, sortOrder?: 0 | 1 | -1, pageNumber?: number,
        pageSize?: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (schoolId) {
                queryParameters = queryParameters.append('SchoolId', schoolId);
        }
        if (sequenceCategoryTypeId) {
            sequenceCategoryTypeId.forEach((element) => {
                queryParameters = queryParameters.append('SequenceCategoryTypeId', <any>element);
            });
        }
        if (sequence) {
            sequence.forEach((element) => {
                queryParameters = queryParameters.append('Sequence', <any>element);
            });
        }
        if (startingSequence) {
            startingSequence.forEach((element) => {
                queryParameters = queryParameters.append('StartingSequence', <any>element);
            });
        }
        if (currentSequence) {
            currentSequence.forEach((element) => {
                queryParameters = queryParameters.append('CurrentSequence', <any>element);
            });
        }
        if (isActive) {
            isActive.forEach((element) => {
                queryParameters = queryParameters.append('IsActive', <any>element);
            });
        }
        if (sortBy !== undefined && sortBy !== null) {
            queryParameters = queryParameters.set('SortBy', <any>sortBy);
        }
        if (sortOrder !== undefined && sortOrder !== null) {
            queryParameters = queryParameters.set('SortOrder', <any>sortOrder);
        }
        if (pageNumber !== undefined && pageNumber !== null) {
            queryParameters = queryParameters.set('PageNumber', <any>pageNumber);
        }
        if (pageSize !== undefined && pageSize !== null) {
            queryParameters = queryParameters.set('PageSize', <any>pageSize);
        }

        let headers = this.defaultHeaders;
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/Sequence/school-sequence`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get sequence catgeory Types of a school
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public sequenceCategoryTypes(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public sequenceCategoryTypes(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public sequenceCategoryTypes(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public sequenceCategoryTypes(observe: any = 'body', reportProgress: boolean = false): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/Sequence/sequence-category-list`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get sequence parameters Types of a school
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public sequenceParameters(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public sequenceParameters(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public sequenceParameters(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public sequenceParameters(observe: any = 'body', reportProgress: boolean = false): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/Sequence/sequence-parameters`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }



    /**
    * Delete Sequence By SequenceId
    * 
    * @param id 
    * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
    * @param reportProgress flag to report request and response progress.
    */
    public deleteSequence(schoolId: string, id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteSequence(schoolId: string, id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteSequence(schoolId: string, id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteSequence(schoolId: string, id: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteSequence.');
        }
        if (schoolId === null || schoolId === undefined) {
            throw new Error('Required parameter scoolId was null or undefined when calling deleteSequence.');
        }


        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('Id', <any>id);
        }
        if (schoolId !== undefined && schoolId !== null) {
            queryParameters = queryParameters.set('SchoolId', <any>schoolId);
        }

        let headers = this.defaultHeaders;


        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/Sequence/delete-sequence`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
    * Creating sequence for school based on schoolId
    * 
   
    * @param schoolSequenceView 
    * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
    * @param reportProgress flag to report request and response progress.
    */
    public createSchoolSequence(schoolSequenceView?: SchoolSequenceView, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public createSchoolSequence(schoolSequenceView?: SchoolSequenceView, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public createSchoolSequence(schoolSequenceView?: SchoolSequenceView, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public createSchoolSequence(schoolSequenceView?: SchoolSequenceView, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        let headers = this.defaultHeaders;
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/Sequence/school-sequence`,
            schoolSequenceView,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update sequence status as active/inactive
     * 
     * @param sequenceStatusView 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateStatus(sequenceStatusView?: SequenceStatusView, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateStatus(sequenceStatusView?: SequenceStatusView, reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateStatus(sequenceStatusView?: SequenceStatusView, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateStatus(sequenceStatusView?: SequenceStatusView, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        let headers = this.defaultHeaders;
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}/Sequence/school-sequence`,
            sequenceStatusView,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
    * Get  details of sequence  based on schoolId and sequenceCategoryTypeId
    * 
    * @param sequenceCategoryId Gets or Sets SequenceCategoryId
    * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
    * @param reportProgress flag to report request and response progress.
    */
    public getSequence(sequenceCategoryId: number, schoolId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getSequence(sequenceCategoryId: number, schoolId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getSequence(sequenceCategoryId: number, schoolId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getSequence(sequenceCategoryId: number, schoolId: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        if (sequenceCategoryId === null || sequenceCategoryId === undefined) {
            throw new Error('Required parameter sequenceCategoryId was null or undefined when calling getSequence.');
        }

        if (schoolId === null || schoolId === undefined) {
            throw new Error('Required parameter schoolId was null or undefined when calling getSequence.');
        }

        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (sequenceCategoryId !== undefined && sequenceCategoryId !== null) {
            queryParameters = queryParameters.set('SequenceCategoryId', <any>sequenceCategoryId);
        }
        if (schoolId !== undefined && schoolId !== null) {
            queryParameters = queryParameters.set('SchoolId', <any>schoolId);
        }

        let headers = this.defaultHeaders;
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/Sequence/check-sequence`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
    * Create new sequence format for school
    * 
    * @param model 
    * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
    * @param reportProgress flag to report request and response progress.
    */
    public createNewSequence(model?: SchoolSequenceViewModel, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public createNewSequence(model?: SchoolSequenceViewModel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public createNewSequence(model?: SchoolSequenceViewModel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public createNewSequence(model?: SchoolSequenceViewModel, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        let headers = this.defaultHeaders;
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/Sequence/new-school-sequence`,
            model,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }
    /**
    * Create multi sequence format for school
    * 
    * @param sequencesView 
    * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
    * @param reportProgress flag to report request and response progress.
    */
    public createMultiSequence(sequencesView?: SequencesView, observe?: 'body', reportProgress?: boolean): Observable<any> {

        let headers = this.defaultHeaders;


        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}` + BaseModuleConfig._Sequence_List_Post,
            sequencesView,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
