/**
 * BaseWebAPI
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import {
    HttpClient, HttpHeaders, HttpParams,
    HttpResponse, HttpEvent
} from '@angular/common/http';
import { CustomHttpUrlEncodingCodec } from '../../base/encoder';

import { Observable } from 'rxjs/Observable';



import { BASE_PATH } from '../../base/variables';
import { Configuration } from '../../base/configuration';
import { BaseUrlConfig, ModuleConfig, BaseModuleConfig } from '../../../url.config';
import { CommonComponent } from 'app/shared/common/common.component';
import { PostUserViewModel } from 'app/modules/lshp-admin/models/post-user-view-model';
import { UserDetailsEditView } from 'app/modules/lshp-admin/models/user-details-edit-view';
import { GeneratePasswordViewModel } from 'app/modules/lshp-admin/models/generate-password-view-model';
import { SchoolUserWithRolesViewModel } from 'app/modules/school-admin/models/school-user-with-roles-view-model';
import { SchoolEditUserViewModel } from 'app/modules/school-admin/models/school-edit-user-view-model';
import { InstituteUserViewModel } from 'app/models/user-management/institute-user-view';
import { CheckParentView } from 'app/modules/lshp-admin/models/check-parent-view';
import { ParentData } from 'app/modules/lshp-admin/models/parent-data';
import { OtpView } from 'app/modules/lshp-admin/models/otpView';
import { EmailResendModel } from 'app/modules/lshp-admin/models/emailResendModel';
import { EmailOtpVerificationModel } from 'app/modules/lshp-admin/models/email-otp-verification-model';
import { ParamsViewModel } from 'app/models/user-management/params-view-model';
import { StaffDataView } from 'app/modules/staff/staff-admissions/model/staff-data-view';



@Injectable()
export class UsersService {
    // protected basePath = 'http://localhost:8013';
    protected basePath = BaseUrlConfig.BasePath + ModuleConfig.Base;
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(private commmonComponent: CommonComponent, protected httpClient: HttpClient,
        @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            // this.configuration = configuration;
            this.basePath = basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    public canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }

    /**
       * Register InstituteAdmin
       * 
       * @param postUserViewModel 
       * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
       * @param reportProgress flag to report request and response progress.
       */
    public registerInstituteAdmin(postUserViewModel?: PostUserViewModel, observe: any = 'body', reportProgress: boolean = false): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}` + BaseModuleConfig.Institute_admin,
            postUserViewModel,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
    * Gets all the User Details of a given User AccessId
    * 
    * @param id  
    * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
    * @param reportProgress flag to report request and response progress.
    */
    public getUserDetails(id: string, instituteId: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getUserDetails.');
        }

        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        queryParameters = this.commmonComponent.setQueryParams(id, 'Id', queryParameters);
        queryParameters = this.commmonComponent.setQueryParams(instituteId, 'InstituteId', queryParameters);

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        // const consumes: string[] = [
        // ];

        return this.httpClient.get<any>(`${this.basePath}` + BaseModuleConfig._User_User_Details,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
  * UnLock User
  * 
  * @param id 
  * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
  * @param reportProgress flag to report request and response progress.
  */

    public unLockUser(id: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling unLockUser.');
        }


        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('Id', <any>id);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return this.httpClient.put<any>(`${this.basePath}` + BaseModuleConfig.USER_UNLOCK,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }



    /**
        * Lock User
        * 
        * @param id 
        * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
        * @param reportProgress flag to report request and response progress.
        */

    public lockUser(id: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling lockUser.');
        }

        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('Id', <any>id);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return this.httpClient.put<any>(`${this.basePath}` + BaseModuleConfig.USER_LOCK,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
       * User
       * 
       * @param userEditView 
       * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
       * @param reportProgress flag to report request and response progress.
       */
    public editUser(instituteUserView?: InstituteUserViewModel, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}` + BaseModuleConfig._Update_User,
            instituteUserView,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }
    /**
   * ConfirmUserandCreatePassword
   * 
   * @param generatePasswordViewModel 
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
    public confirmEmailandCreatePassword(generatePasswordViewModel?: GeneratePasswordViewModel, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        return this.httpClient.post<any>(`${this.basePath}/User/confirm-email-and-createpassword`,
            generatePasswordViewModel,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }


    /**
     *
     *
     * @param instituteId
     * @param schoolId
     * @param schoolName
     * @param instituteName
     * @param userName
     * @param firstName
     * @param lastname
     * @param status
     * @param pageNumber
     * @param pageSize
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public userAdminsGet(instituteId?: number | string, schoolId?: number | string, schoolName?: string,
        instituteName?: string, userName?: string, firstName?: string,
        lastname?: string, status?: string, pageNumber?: number, pageSize?: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (instituteId !== undefined) {
            queryParameters = queryParameters.set('InstituteId', <any>instituteId);
        }
        if (schoolId !== undefined) {
            queryParameters = queryParameters.set('SchoolId', <any>schoolId);
        }
        if (schoolName !== undefined) {
            queryParameters = queryParameters.set('SchoolName', <any>schoolName);
        }
        if (instituteName !== undefined) {
            queryParameters = queryParameters.set('InstituteName', <any>instituteName);
        }
        if (userName !== undefined) {
            queryParameters = queryParameters.set('UserName', <any>userName);
        }
        if (firstName !== undefined) {
            queryParameters = queryParameters.set('FirstName', <any>firstName);
        }
        if (lastname !== undefined) {
            queryParameters = queryParameters.set('Lastname', <any>lastname);
        }
        if (status !== undefined) {
            queryParameters = queryParameters.set('Status', <any>status);
        }
        if (pageNumber !== undefined) {
            queryParameters = queryParameters.set('PageNumber', <any>pageNumber);
        }
        if (pageSize !== undefined) {
            queryParameters = queryParameters.set('PageSize', <any>pageSize);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        // let consumes: string[] = [
        // ];

        return this.httpClient.get<any>(`${this.basePath}` + BaseModuleConfig._User_Admins,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }


    /**
         * Gets all the Users of a Institute or a School based on Selected Institute or School
         * 
         * @param userName Gets or sets
         * @param firstName Gets or sets
         * @param lastname Gets or sets
         * @param status Gets or sets
         * @param sortBy Gets or Sets SortBy
         * @param sortOrder Gets or Sets SortOrder
         * @param pageNumber 
         * @param pageSize 
         * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
         * @param reportProgress flag to report request and response progress.
         */
    public getAllUsers(instituteId?: string, userName?: Array<string>, firstName?: Array<string>, lastname?: Array<string>,
        status?: Array<string>, sortBy?: string, sortOrder?: number, pageNumber?: number, pageSize?: number,
        observe: any = 'body', reportProgress: boolean = false): Observable<any> {
        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });

        queryParameters = this.commmonComponent.setQueryParams(instituteId, 'InstituteId', queryParameters);
        queryParameters = this.commmonComponent.setQueryParams(sortBy, 'SortBy', queryParameters);
        queryParameters = this.commmonComponent.setQueryParams(userName, 'UserName', queryParameters);
        queryParameters = this.commmonComponent.setQueryParams(sortOrder, 'SortOrder', queryParameters);
        queryParameters = this.commmonComponent.setQueryParams(firstName, 'FirstName', queryParameters);
        queryParameters = this.commmonComponent.setQueryParams(lastname, 'Lastname', queryParameters);
        queryParameters = this.commmonComponent.setQueryParams(status, 'Status', queryParameters);

        queryParameters = this.commmonComponent.setQueryParams(pageNumber, 'PageNumber', queryParameters);
        queryParameters = this.commmonComponent.setQueryParams(pageSize, 'PageSize', queryParameters);

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return this.httpClient.get<any>(`${this.basePath}` + BaseModuleConfig._User_all_users,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }


    /**
     *
     *
     * @param authorization access token
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public userCheckUserAccessGet(observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        // let consumes: string[] = [
        // ];
        this.basePath = BaseUrlConfig.BasePath + ModuleConfig.Base;
        return this.httpClient.get<any>(`${this.basePath}` + BaseModuleConfig._User_CheckUserAccess,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }


    /// user-creation


    /**
       * Gets all the User Details of a given User AccessId 
       * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
       * @param reportProgress flag to report request and response progress.
       */

    public getRolesList(observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}` + BaseModuleConfig._USER_ROLES,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }


    /**
      * Gets all the User Details of a given User AccessId
      * 
      * @param id 
      * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
      * @param reportProgress flag to report request and response progress.
      */
    public getSchoolList(id?: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('Id', <any>id);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/User/schools`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }


    /**
    * Gets all the User Details of a given User AccessId
    * 
    * @param id 
    * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
    * @param reportProgress flag to report request and response progress.
    */
    public getSchoolUserDetail(id: string, schoolId: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        queryParameters = this.commmonComponent.setQueryParams(id, 'Id', queryParameters);
        queryParameters = this.commmonComponent.setQueryParams(schoolId, 'SchoolId', queryParameters);

        let headers = this.defaultHeaders;


        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}` + BaseModuleConfig._USER_USER_SCHOOL_DETAILS,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }


    /**
    * Register InstituteAdmin
    * 
    * @param schoolUserWithRolesViewModel 
    * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
    * @param reportProgress flag to report request and response progress.
    */

    public registerSchoolUser(schoolUserWithRolesViewModel?: SchoolUserWithRolesViewModel, observe: any = 'body', reportProgress: boolean = false): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}` + BaseModuleConfig._USER_SCHOOL_ADMIN,
            schoolUserWithRolesViewModel,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }


    /**
    * EditUser
    * 
    * @param userEditView 
    * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
    * @param reportProgress flag to report request and response progress.
    */
    public editSchoolUsers(userEditView?: SchoolEditUserViewModel, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        let headers = this.defaultHeaders;


        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}` + BaseModuleConfig._USER_UPDATE_SCHOOL_USER,
            userEditView,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
    * Gets all the Users of a Institute or a School based on Selected Institute or School
    * 
    * @param userName Gets or sets
    * @param firstName Gets or sets
    * @param lastname Gets or sets
    * @param status Gets or sets
    * @param sortBy Gets or Sets SortBy
    * @param sortOrder Gets or Sets SortOrder
    * @param pageNumber 
    * @param pageSize 
    * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
    * @param reportProgress flag to report request and response progress.
    */
    public getAllSchoolUser(schoolId?: string, userName?: Array<string>, firstName?: Array<string>,
        lastname?: Array<string>, status?: Array<string>, sortBy?: string, sortOrder?: number, pageNumber?: number,
        pageSize?: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });

        queryParameters = this.commmonComponent.setQueryParams(schoolId, 'SchoolId', queryParameters);
        queryParameters = this.commmonComponent.setQueryParams(sortBy, 'SortBy', queryParameters);
        queryParameters = this.commmonComponent.setQueryParams(userName, 'UserName', queryParameters);
        queryParameters = this.commmonComponent.setQueryParams(sortOrder, 'SortOrder', queryParameters);
        queryParameters = this.commmonComponent.setQueryParams(firstName, 'FirstName', queryParameters);
        queryParameters = this.commmonComponent.setQueryParams(lastname, 'Lastname', queryParameters);
        queryParameters = this.commmonComponent.setQueryParams(status, 'Status', queryParameters);

        queryParameters = this.commmonComponent.setQueryParams(pageNumber, 'PageNumber', queryParameters);
        queryParameters = this.commmonComponent.setQueryParams(pageSize, 'PageSize', queryParameters);
        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}` + BaseModuleConfig._USER_ALL_SCHOOL_USERS,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete User
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteUser(id: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteUser.');
        }
        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('Id', <any>id);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/User/delete-user`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
    * Resets user Password
    * 
    * @param generatePasswordView 
    * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
    * @param reportProgress flag to report request and response progress.
    */
    public resetPassword(generatePasswordView?: GeneratePasswordViewModel, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public resetPassword(generatePasswordView?: GeneratePasswordViewModel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public resetPassword(generatePasswordView?: GeneratePasswordViewModel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public resetPassword(generatePasswordView?: GeneratePasswordViewModel, observe: any = 'body', reportProgress: boolean = false): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        this.basePath = BaseUrlConfig.BasePath + ModuleConfig.Base;
        return this.httpClient.post<any>(`${this.basePath}/User/reset-password`,
            generatePasswordView,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * User
     * 
     * @param parentData 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public registerParent(parentData?: ParentData, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public registerParent(parentData?: ParentData, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public registerParent(parentData?: ParentData, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public registerParent(parentData?: ParentData, observe: any = 'body', reportProgress: boolean = false): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}` + BaseModuleConfig._REGISTER_PARENT,
            parentData,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * User
     * 
     * @param checkParentView 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public verifyParentCredentials(checkParentView?: CheckParentView, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public verifyParentCredentials(checkParentView?: CheckParentView, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public verifyParentCredentials(checkParentView?: CheckParentView, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public verifyParentCredentials(checkParentView?: CheckParentView, observe: any = 'body', reportProgress: boolean = false): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}` + BaseModuleConfig._VERIFY_PARENT,
            checkParentView,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
    * ProcessOtpVefication
    * 
    * @param otpView 
    * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
    * @param reportProgress flag to report request and response progress.
    */
    public processOtpVefication(otpView?: OtpView, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public processOtpVefication(otpView?: OtpView, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public processOtpVefication(otpView?: OtpView, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public processOtpVefication(otpView?: OtpView, observe: any = 'body', reportProgress: boolean = false): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}` + BaseModuleConfig._PROCESS_OTP_VERIFICATION,
            otpView,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * ReSending otp to Email
     * 
     * @param emailResendModel 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public putEmailOtp(emailResendModel?: EmailResendModel, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public putEmailOtp(emailResendModel?: EmailResendModel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public putEmailOtp(emailResendModel?: EmailResendModel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public putEmailOtp(emailResendModel?: EmailResendModel, observe: any = 'body', reportProgress: boolean = false): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}` + BaseModuleConfig._EMAIL_OTP,
            emailResendModel,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Verifing otp
     * 
     * @param emailOtpVerificationModel 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public emailOtpVerification(emailOtpVerificationModel?: EmailOtpVerificationModel, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public emailOtpVerification(emailOtpVerificationModel?: EmailOtpVerificationModel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public emailOtpVerification(emailOtpVerificationModel?: EmailOtpVerificationModel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public emailOtpVerification(emailOtpVerificationModel?: EmailOtpVerificationModel, observe: any = 'body', reportProgress: boolean = false): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/User/email-otp-verification`,
            emailOtpVerificationModel,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }



    /**
     * Change CustomClaims to Token
     * 
     * @param authorization access token
     * @param paramsView 
     * @param schoolId SchoolId in Encrypted Form
     * @param instituteId InstituteId in Encrypted Form
     * @param userId UserId in Encrypted Form
     * @param academicSessionId AcademicSessionId in Encrypted Form 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public changeparam(paramsView?: ParamsViewModel,
        observe?: 'body', reportProgress?: boolean): Observable<any>;
    public changeparam(paramsView?: ParamsViewModel,
        observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public changeparam(paramsView?: ParamsViewModel,
        observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public changeparam(paramsView?: ParamsViewModel,
        observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/User/user-preference`,
            paramsView,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
    * StaffDetails
    * 
    * @param authorization access token
    * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
    * @param reportProgress flag to report request and response progress.
    */
    public staffDetails(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public staffDetails(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public staffDetails(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public staffDetails(observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        let headers = this.defaultHeaders;
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/User/staff-details`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * RegisterStaff
     * 
     * @param staffDataView 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public registerStaff(staffDataView?: StaffDataView, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public registerStaff(staffDataView?: StaffDataView, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public registerStaff(staffDataView?: StaffDataView, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public registerStaff(staffDataView?: StaffDataView, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/User/register-staff`,
            staffDataView,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * VerifiesStaffCredentials
     * 
     * @param schoolRegCode Gets or Sets SchoolRegCode
     * @param staffCode Gets or Sets StaffCode
     * @param mobileNumber Gets or Sets MobileNumber
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public verifyStaffCredentials(schoolRegCode?: string, staffCode?: string, mobileNumber?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public verifyStaffCredentials(schoolRegCode?: string, staffCode?: string, mobileNumber?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public verifyStaffCredentials(schoolRegCode?: string, staffCode?: string, mobileNumber?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public verifyStaffCredentials(schoolRegCode?: string, staffCode?: string, mobileNumber?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (schoolRegCode !== undefined && schoolRegCode !== null) {
            queryParameters = queryParameters.set('SchoolRegCode', <any>schoolRegCode);
        }
        if (staffCode !== undefined && staffCode !== null) {
            queryParameters = queryParameters.set('StaffCode', <any>staffCode);
        }
        if (mobileNumber !== undefined && mobileNumber !== null) {
            queryParameters = queryParameters.set('MobileNumber', <any>mobileNumber);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/User/verify-staff`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
