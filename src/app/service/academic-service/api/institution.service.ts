/**
 * BaseWebAPI
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import {
    HttpClient, HttpHeaders, HttpParams,
    HttpResponse, HttpEvent
} from '@angular/common/http';
import { CustomHttpUrlEncodingCodec } from '../../base/encoder';

import { Observable } from 'rxjs/Observable';



import { BASE_PATH } from '../../base/variables';
import { Configuration } from '../../base/configuration';
import { BaseUrlConfig, BaseModuleConfig, ModuleConfig } from '../../../url.config';

import { InstitutionDetailsView } from '../../../modules/lshp-admin/models/institution-details-view';
import { InstitutionView } from 'app/modules/lshp-admin/models/institution-view';

@Injectable()
export class InstitutionService {
    protected basePath = BaseUrlConfig.BasePath + ModuleConfig.Base;
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    public canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


     /**
     * Gets all institutions
     * 
     * @param authorization access token
     * @param id 
     * @param schoolId SchoolId in Encrypted Form
     * @param instituteId InstituteId in Encrypted Form
     * @param userId UserId in Encrypted Form
     * @param academicSessionId AcademicSessionId in Encrypted Form 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */

    public getInstitutions( id?: string,  observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('Id', <any>id);
        }
        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/Institution/institutions`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }
    /**
     *
     *
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public institutionSetUpBillingCyclesGet(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public institutionSetUpBillingCyclesGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public institutionSetUpBillingCyclesGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public institutionSetUpBillingCyclesGet(observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        // let consumes: string[] = [
        // ];

        return this.httpClient.get<any>(`${this.basePath}` + BaseModuleConfig._api_InstitutionSetUp_BillingCycles,
            // /InstitutionSetUp/BillingCycles`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param instituteViewModel
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public institutionSetUpConfirmInstitutePut(instituteViewModel?: InstitutionView, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public institutionSetUpConfirmInstitutePut(instituteViewModel?: InstitutionView, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public institutionSetUpConfirmInstitutePut(instituteViewModel?: InstitutionView, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public institutionSetUpConfirmInstitutePut(instituteViewModel?: InstitutionView, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<any>(
            // 'http://localhost:8013/InstitutionSetUp/ConfirmInstitute',
            `${this.basePath}` + BaseModuleConfig._InstitutionSetUp_ConfirmInstitute,
            // InstitutionSetUp/ConfirmInstitute`,
            instituteViewModel,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param instituteId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public institutionSetUpInstituteDetailsGet(instituteId?: number | string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public institutionSetUpInstituteDetailsGet(instituteId?: number | string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public institutionSetUpInstituteDetailsGet(instituteId?: number | string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public institutionSetUpInstituteDetailsGet(instituteId?: number | string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (instituteId !== undefined) {
            queryParameters = queryParameters.set('instituteId', <any>instituteId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        // let consumes: string[] = [
        // ];

        return this.httpClient.get<any>(`${this.basePath}` + BaseModuleConfig._InstitutionSetUp_InstituteDetails,
            // return this.httpClient.get<any>(`${this.BasePath}/InstitutionSetUp/InstituteDetails`,
            /// InstitutionSetUp/InstituteDetails`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param instituteId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public institutionSetUpInstitutePreviewDetailsGet(instituteId?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public institutionSetUpInstitutePreviewDetailsGet(instituteId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public institutionSetUpInstitutePreviewDetailsGet(instituteId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public institutionSetUpInstitutePreviewDetailsGet(instituteId?: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (instituteId !== undefined) {
            queryParameters = queryParameters.set('instituteId', <any>instituteId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        // let consumes: string[] = [
        // ];

        return this.httpClient.get<any>(`${this.basePath}` + BaseModuleConfig._InstitutionSetUp_InstitutePreviewDetails,
            // '/InstitutionSetUp/InstitutePreviewDetails',
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

      /**
     * 
     * 
     * @param id 
     * @param schoolId SchoolId in Encrypted Form
     * @param instituteId InstituteId in Encrypted Form
     * @param userId UserId in Encrypted Form
     * @param academicSessionId AcademicSessionId in Encrypted Form 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public institutionDetails(id: string,  schoolId?: string, instituteId?: string,
         userId?: string, academicSessionId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling institutionDetails.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('Id', <any>id);
        }

        let headers = this.defaultHeaders;
     
        if (schoolId !== undefined && schoolId !== null) {
            headers = headers.set('SchoolId', String(schoolId));
        }
        if (instituteId !== undefined && instituteId !== null) {
            headers = headers.set('InstituteId', String(instituteId));
        }
        if (userId !== undefined && userId !== null) {
            headers = headers.set('UserId', String(userId));
        }
        if (academicSessionId !== undefined && academicSessionId !== null) {
            headers = headers.set('AcademicSessionId', String(academicSessionId));
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}` + BaseModuleConfig.Institute_institution,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public institutionSetUpInstitutesGet(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public institutionSetUpInstitutesGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public institutionSetUpInstitutesGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public institutionSetUpInstitutesGet(observe: any = 'body', reportProgress: boolean = false): Observable<any> {
        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        // let consumes: string[] = [
        // ];

        return this.httpClient.get<any>(`${this.basePath}` + BaseModuleConfig._InstitutionSetUp_Institutes,

            // return this.httpClient.get<any>(`${this.BasePath}/InstitutionSetUp/Institutes`,
            /// InstitutionSetUp/Institutes`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param institutionViewModel
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public institutionSetUpInstitutionPost(institutionViewModel?: InstitutionView, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public institutionSetUpInstitutionPost(institutionViewModel?: InstitutionView, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public institutionSetUpInstitutionPost(institutionViewModel?: InstitutionView, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public institutionSetUpInstitutionPost(institutionViewModel?: InstitutionView, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}` + BaseModuleConfig._api_InstitutionSetUp_Institution,
            // +BaseModuleConfig._api_InstitutionSetUp_Institution,
            // 'http://localhost:5000/InstitutionSetUp/Institution',
            institutionViewModel,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param instituteId
     * @param userId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public institutionSetUpPut(instituteId?: number, userId?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public institutionSetUpPut(instituteId?: number, userId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public institutionSetUpPut(instituteId?: number, userId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public institutionSetUpPut(instituteId?: number, userId?: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (instituteId !== undefined) {
            queryParameters = queryParameters.set('InstituteId', <any>instituteId);
        }
        if (userId !== undefined) {
            queryParameters = queryParameters.set('UserId', <any>userId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        // let consumes: string[] = [
        // ];InstitutionSetUp

        return this.httpClient.put<any>(`${this.basePath}` + BaseModuleConfig._InstitutionSetUp,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
    *
    *
    * @param id
    * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
    * @param reportProgress flag to report request and response progress.
    */
    public institutionSetUpInstitutionlicensesByInstIdGet(id?: number | string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public institutionSetUpInstitutionlicensesByInstIdGet(id?: number | string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public institutionSetUpInstitutionlicensesByInstIdGet(id?: number | string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public institutionSetUpInstitutionlicensesByInstIdGet(id?: number | string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (id !== undefined) {
            queryParameters = queryParameters.set('Id', <any>id);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        // let consumes: string[] = [
        // ];/InstitutionSetUp/InstitutionlicensesByInstId

        return this.httpClient.get<any>(`${this.basePath}` + BaseModuleConfig._InstitutionSetUp_InstitutionlicensesByInstId,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }


    /**
     *
     *
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public institutionSetUpUiThemesGet(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public institutionSetUpUiThemesGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public institutionSetUpUiThemesGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public institutionSetUpUiThemesGet(observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        // let consumes: string[] = [
        // ];

        return this.httpClient.get<any>(`${this.basePath}` + BaseModuleConfig._api_InstitutionSetUp_UiThemes,
            // return this.httpClient.get<any>('http://localhost:5000/InstitutionSetUp/UiThemes',
            //  /InstitutionSetUp/UiThemes`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param institutionId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public institutionSetUpLicensesGet(institutionId?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public institutionSetUpLicensesGet(institutionId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public institutionSetUpLicensesGet(institutionId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public institutionSetUpLicensesGet(institutionId?: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (institutionId !== undefined) {
            queryParameters = queryParameters.set('institutionId', <any>institutionId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        // let consumes: string[] = [
        // ];/InstitutionSetUp/Licenses

        return this.httpClient.get<any>(`${this.basePath}` + BaseModuleConfig._InstitutionSetUp_Licenses,
            // return this.httpClient.get<any>('http://localhost:5000/InstitutionSetUp/Licenses',
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
         *
         *
         * @param instituteViewModel
         * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
         * @param reportProgress flag to report request and response progress.
         */
    public institutionSetUpEditInstitutedetailsPut(instituteViewModel?: InstitutionDetailsView, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public institutionSetUpEditInstitutedetailsPut(instituteViewModel?: InstitutionDetailsView, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public institutionSetUpEditInstitutedetailsPut(instituteViewModel?: InstitutionDetailsView, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public institutionSetUpEditInstitutedetailsPut(instituteViewModel?: InstitutionDetailsView, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}` + BaseModuleConfig._InstitutionSetUp_EditInstitutedetails,
            instituteViewModel,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
