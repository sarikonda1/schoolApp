/**
 * BaseWebAPI
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import {
    HttpClient, HttpHeaders, HttpParams,
    HttpResponse, HttpEvent
} from '@angular/common/http';
import { Observable } from 'rxjs/Observable';
import { Configuration } from 'app/service/base/configuration';
import { BASE_PATH } from 'app/service/base/variables';
import { LeaveRequestViewModel } from 'app/modules/academics/attendance/model/leave-request-view-model';
import { CustomHttpUrlEncodingCodec } from 'app/service/base/encoder';
import { CommonComponent } from 'app/shared/common/common.component';
import { BaseUrlConfig, ModuleConfig, BaseModuleConfig } from 'app/url.config';
import { LeaveStatusChangeViewModel } from 'app/modules/academics/attendance/model/leave-status-change-view-model';

@Injectable()
export class LeaveRequestService {   
    protected basePath = BaseUrlConfig.BasePath + ModuleConfig.Base;
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration,
        private commonComponent: CommonComponent) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * AddStudentLeaveRequest
     * 
     * @param leaveRequestViewModel 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addStudentLeaveRequest(leaveRequestViewModel?: LeaveRequestViewModel, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public addStudentLeaveRequest(leaveRequestViewModel?: LeaveRequestViewModel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public addStudentLeaveRequest(leaveRequestViewModel?: LeaveRequestViewModel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public addStudentLeaveRequest(leaveRequestViewModel?: LeaveRequestViewModel, observe: any = 'body', reportProgress: boolean = false): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}` + BaseModuleConfig._Student_Leave_Request,
            leaveRequestViewModel,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get the List of Filtered Leave Requests
     * 
     * @param studentNames Gets or Sets StudentNames
     * @param classIds Gets or Sets ClassIds
     * @param sectionIds Gets or Sets SectionIds
     * @param admissionNumbers Gets or Sets AdmissionNumbers
     * @param fromDateBegin Gets or Sets FromDate for Date
     * @param fromDateEnd Gets or Sets FromDate for Date
     * @param toDateBegin Gets or Sets ToDate for Date
     * @param toDateEnd Gets or Sets ToDate for Date
     * @param reasons Gets or Sets Reasons
     * @param statusIds Gets or Sets StatusIds
     * @param sortOrder Gets or Sets SortColumn
     * @param sortBy Gets or Sets SortBy-\&quot;StudentName AdmissionNumber Class Status Date Reason\&quot;
     * @param pageNumber 
     * @param pageSize
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public get(studentNames?: Array<string>, ClassIds?: Array<string>, sectionIds?: Array<string>, admissionNumbers?: Array<string>, fromDateBegin?: Date | string,
        fromDateEnd?: Date | string, toDateBegin?: Date | string, toDateEnd?: Date | string, reasons?: Array<string>, statusIds?: Array<string>, sortOrder?: 0 | 1 | -1,
        sortBy?: string, pageNumber?: number, pageSize?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;

    public get(studentNames?: Array<string>, ClassIds?: Array<string>, sectionIds?: Array<string>, admissionNumbers?: Array<string>, fromDateBegin?: Date | string,
        fromDateEnd?: Date | string, toDateBegin?: Date | string, toDateEnd?: Date | string, reasons?: Array<string>, statusIds?: Array<string>, sortOrder?: 0 | 1 | -1,
        sortBy?: string, pageNumber?: number, pageSize?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;

    public get(studentNames?: Array<string>, ClassIds?: Array<string>, sectionIds?: Array<string>, admissionNumbers?: Array<string>, fromDateBegin?: Date | string,
        fromDateEnd?: Date | string, toDateBegin?: Date | string, toDateEnd?: Date | string, reasons?: Array<string>, statusIds?: Array<string>, sortOrder?: 0 | 1 | -1,
        sortBy?: string, pageNumber?: number, pageSize?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;

    public get(studentNames?: Array<string>, ClassIds?: Array<string>, sectionIds?: Array<string>, admissionNumbers?: Array<string>, fromDateBegin?: Date | string,
        fromDateEnd?: Date | string, toDateBegin?: Date | string, toDateEnd?: Date | string, reasons?: Array<string>, statusIds?: Array<string>, sortOrder?: 0 | 1 | -1,
        sortBy?: string, pageNumber?: number, pageSize?: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });

        queryParameters = this.commonComponent.setQueryParams(studentNames, 'StudentNames', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(ClassIds, 'ClassIds', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(sectionIds, 'SectionIds', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(admissionNumbers, 'AdmissionNumbers', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(statusIds, 'StatusIds', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(reasons, 'Reasons', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(fromDateBegin, 'FromDateBegin', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(fromDateEnd, 'FromDateEnd', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(toDateBegin, 'ToDateBegin', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(toDateEnd, 'ToDateEnd', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(sortOrder, 'SortOrder', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(sortBy, 'SortBy', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(pageNumber, 'PageNumber', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(pageSize, 'PageSize', queryParameters);

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}` + BaseModuleConfig._Student_Leave_Request_Filtered_Leaves,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * StudentNames of Current(Active) Academic Session
     * 
     * @param name Gets or Sets NameViewModel
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public studentNames(name?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public studentNames(name?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public studentNames(name?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public studentNames(name?: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {


        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (name !== undefined && name !== null) {
            queryParameters = queryParameters.set('Name', <any>name);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}` + BaseModuleConfig._Student_Leave_Request_Active,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * UpdateLeaveRequest Status
     * 
     * @param model 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateLeaveRequest(model?: LeaveStatusChangeViewModel, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateLeaveRequest(model?: LeaveStatusChangeViewModel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateLeaveRequest(model?: LeaveStatusChangeViewModel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateLeaveRequest(model?: LeaveStatusChangeViewModel, observe: any = 'body', reportProgress: boolean = false): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}` + BaseModuleConfig._Student_Leave_Request_Change_Leave_Request,
            model,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }


    /**
     * Get the List of Filtered Leave Requests
     *
     * @param studentNames Gets or Sets StudentNames
     * @param classIds Gets or Sets ClassIds
     * @param sectionIds Gets or Sets SectionIds
     * @param admissionNumbers Gets or Sets AdmissionNumbers
     * @param fromDateBegin Gets or Sets FromDate for Date
     * @param fromDateEnd Gets or Sets FromDate for Date
     * @param toDateBegin Gets or Sets ToDate for Date
     * @param toDateEnd Gets or Sets ToDate for Date
     * @param reasons Gets or Sets Reasons
     * @param statusIds Gets or Sets StatusIds
     * @param sortOrder Gets or Sets SortColumn
     * @param sortBy Gets or Sets SortBy-\&quot;StudentName AdmissionNumber Class Status Date Reason\&quot;
     * @param pageNumber 
     * @param pageSize 
     * @param studentId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getLeave(studentNames?: Array<string>, classIds?: Array<string>, sectionIds?: Array<string>, 
        admissionNumbers?: Array<string>, fromDateBegin?: Date, fromDateEnd?: Date, toDateBegin?: Date, 
        toDateEnd?: Date, reasons?: Array<string>, statusIds?: Array<string>, sortOrder?: 0 | 1 | -1, 
        sortBy?: string, pageNumber?: number, pageSize?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getLeave(studentNames?: Array<string>, classIds?: Array<string>, sectionIds?: Array<string>,
         admissionNumbers?: Array<string>, fromDateBegin?: Date, fromDateEnd?: Date, toDateBegin?: Date, 
         toDateEnd?: Date, reasons?: Array<string>, statusIds?: Array<string>, sortOrder?: 0 | 1 | -1,
          sortBy?: string, pageNumber?: number, pageSize?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getLeave(studentNames?: Array<string>, classIds?: Array<string>, sectionIds?: Array<string>, 
        admissionNumbers?: Array<string>, fromDateBegin?: Date, fromDateEnd?: Date, toDateBegin?: Date,
         toDateEnd?: Date, reasons?: Array<string>, statusIds?: Array<string>, sortOrder?: 0 | 1 | -1, 
         sortBy?: string, pageNumber?: number, pageSize?: number,  observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getLeave(studentNames?: Array<string>, classIds?: Array<string>, sectionIds?: Array<string>,
         admissionNumbers?: Array<string>, fromDateBegin?: Date, fromDateEnd?: Date, toDateBegin?: Date,
          toDateEnd?: Date, reasons?: Array<string>, statusIds?: Array<string>, sortOrder?: 0 | 1 | -1, 
          sortBy?: string, pageNumber?: number, pageSize?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        queryParameters = this.commonComponent.setQueryParams(studentNames, 'StudentNames', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(classIds, 'ClassIds', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(sectionIds, 'SectionIds', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(admissionNumbers, 'AdmissionNumbers', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(statusIds, 'StatusIds', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(reasons, 'Reasons', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(fromDateBegin, 'FromDateBegin', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(fromDateEnd, 'FromDateEnd', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(toDateBegin, 'ToDateBegin', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(toDateEnd, 'ToDateEnd', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(sortOrder, 'SortOrder', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(sortBy, 'SortBy', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(pageNumber, 'PageNumber', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(pageSize, 'PageSize', queryParameters);

       
        let headers = this.defaultHeaders;
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}` + BaseModuleConfig.__Student_Leave_Request,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }
}
