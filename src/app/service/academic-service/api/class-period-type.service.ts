/**
 * BaseWebAPI
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import {
    HttpClient, HttpHeaders, HttpParams,
    HttpResponse, HttpEvent
} from '@angular/common/http';

import { Observable } from 'rxjs/Observable';
import { Configuration, BASE_PATH } from '.';
import { CustomHttpUrlEncodingCodec } from 'app/service/base/encoder';
import { ClassPeriodTypeDataView } from 'app/modules/configuration/general/models/class-period-type-data-view';
import { ClassPeriodTypesView } from 'app/modules/configuration/general/models/class-period-types-view';
import { CommonComponent } from 'app/shared/common/common.component';
import { BaseUrlConfig, ModuleConfig, BaseModuleConfig } from 'app/url.config';
import { basename } from 'path';




@Injectable()
export class ClassPeriodTypeService {

    protected basePath = BaseUrlConfig.BasePath + ModuleConfig.Base;

    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, private commonComponent: CommonComponent,
        @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    public canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Get ClassPeriodType Based On ClassPeriodType Id
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public classPeriodType(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public classPeriodType(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public classPeriodType(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public classPeriodType(id: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling classPeriodType.');
        }

        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('Id', <any>id);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}` + BaseModuleConfig._Class_PeriodType_GetById,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get ClassPeriodTypes Based On SchoolId
     * 
     * @param name Gets or sets Name
     * @param isBreak Gets or sets IsBreak
     * @param hasMultipleAssignments Gets or sets HasMultipleAssignments
     * @param hasAssignments Gets or sets HasAssignments
     * @param sortBy Gets or sets SortBy
     * @param sortOrder Gets or sets SortOrder
     * @param pageNumber 
     * @param pageSize 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public classPeriodTypes(name?: Array<string>, isBreak?: Array<number>, hasMultipleAssignments?: Array<number>, hasAssignments?: Array<number>, 
        sortBy?: string, sortOrder?: 0 | 1 | -1, pageNumber?: number, pageSize?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public classPeriodTypes(name?: Array<string>, isBreak?: Array<number>, hasMultipleAssignments?: Array<number>, hasAssignments?: Array<number>, 
        sortBy?: string, sortOrder?: 0 | 1 | -1, pageNumber?: number, pageSize?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public classPeriodTypes(name?: Array<string>, isBreak?: Array<number>, hasMultipleAssignments?: Array<number>, hasAssignments?: Array<number>, 
        sortBy?: string, sortOrder?: 0 | 1 | -1, pageNumber?: number, pageSize?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public classPeriodTypes(name?: Array<string>, isBreak?: Array<number>, hasMultipleAssignments?: Array<number>, hasAssignments?: Array<number>, 
        sortBy?: string, sortOrder?: 0 | 1 | -1, pageNumber?: number, pageSize?: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        queryParameters = this.commonComponent.setQueryParams(name, 'Name', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(isBreak, 'IsBreak', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(hasMultipleAssignments, 'HasMultipleAssignments', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(hasAssignments, 'HasAssignments', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(sortBy, 'SortBy', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(sortOrder, 'SortOrder', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(pageNumber, 'PageNumber', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(pageSize, 'PageSize', queryParameters);


        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        return this.httpClient.get<any>(`${this.basePath}` + BaseModuleConfig._Class_PeriodTypeList,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Add classPeriodType
     * 
     * @param classPeriodTypeDataView 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createClassPeriodType(classPeriodTypeDataView?: ClassPeriodTypeDataView, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public createClassPeriodType(classPeriodTypeDataView?: ClassPeriodTypeDataView, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public createClassPeriodType(classPeriodTypeDataView?: ClassPeriodTypeDataView, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public createClassPeriodType(classPeriodTypeDataView?: ClassPeriodTypeDataView, observe: any = 'body', reportProgress: boolean = false): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}` + BaseModuleConfig._Class_PeriodType_Create,
            classPeriodTypeDataView,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete ClassPeriodType based on ClassPeriodTypeId
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteClassPeriodType(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteClassPeriodType(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteClassPeriodType(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteClassPeriodType(id: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteClassPeriodType.');
        }

        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('Id', <any>id);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}` + BaseModuleConfig._Class_PeriodType_Delete,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update ClassPeriodType
     * 
     * @param classPeriodTypesView 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateClassPeriodType(classPeriodTypesView?: ClassPeriodTypesView, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateClassPeriodType(classPeriodTypesView?: ClassPeriodTypesView, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateClassPeriodType(classPeriodTypesView?: ClassPeriodTypesView, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateClassPeriodType(classPeriodTypesView?: ClassPeriodTypesView, observe: any = 'body', reportProgress: boolean = false): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}` + BaseModuleConfig._Class_PeriodType_Update,
            classPeriodTypesView,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
