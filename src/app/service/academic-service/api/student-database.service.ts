/**
 * BaseWebAPI
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import {
    HttpClient, HttpHeaders, HttpParams,
    HttpResponse, HttpEvent
} from '@angular/common/http';
import { CustomHttpUrlEncodingCodec } from '../../base/encoder';

import { Observable } from 'rxjs/Observable';


import { BASE_PATH } from '../../base/variables';
import { Configuration } from '../../base/configuration';

import { BaseModuleConfig, BaseUrlConfig, ModuleConfig } from '../../../url.config';

import { CommonComponent } from 'app/shared/common/common.component';



@Injectable()
export class StudentDatabaseService {

    protected basePath = BaseUrlConfig.BasePath + ModuleConfig.Base;
    // "http://localhost:5000";


    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, private commonComponent: CommonComponent,
        @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    public canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }



    /**
     *
     *
     * @param studentName
     * @param parentName
     * @param admissionNumber
     * @param currentClass
     * @param statusName
     * @param schoolAcademicSessionId
     * @param sortBy
     * @param sortOrder
     * @param pageNumber
     * @param pageSize
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public studentDatabaseAllSearchStudentsGet(studentName?: string, parentName?: string, admissionNumber?: string,
        currentClass?: string, statusName?: string, schoolAcademicSessionId?: number, sortBy?: string, sortOrder?: number,
        pageNumber?: number, pageSize?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public studentDatabaseAllSearchStudentsGet(studentName?: string, parentName?: string, admissionNumber?: string,
        currentClass?: string, statusName?: string, schoolAcademicSessionId?: number, sortBy?: string, sortOrder?: number,
        pageNumber?: number, pageSize?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public studentDatabaseAllSearchStudentsGet(studentName?: string, parentName?: string, admissionNumber?: string,
        currentClass?: string, statusName?: string, schoolAcademicSessionId?: number, sortBy?: string, sortOrder?: number,
        pageNumber?: number, pageSize?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public studentDatabaseAllSearchStudentsGet(studentName?: string, parentName?: string, admissionNumber?: string,
        currentClass?: string, statusName?: string, schoolAcademicSessionId?: number, sortBy?: string, sortOrder?: number,
        pageNumber?: number, pageSize?: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (studentName !== undefined) {
            queryParameters = queryParameters.set('StudentName', <any>studentName);
        }
        if (parentName !== undefined) {
            queryParameters = queryParameters.set('ParentName', <any>parentName);
        }
        if (admissionNumber !== undefined) {
            queryParameters = queryParameters.set('AdmissionNumber', <any>admissionNumber);
        }
        if (currentClass !== undefined) {
            queryParameters = queryParameters.set('CurrentClass', <any>currentClass);
        }
        if (statusName !== undefined) {
            queryParameters = queryParameters.set('statusName', <any>statusName);
        }
        if (schoolAcademicSessionId !== undefined) {
            queryParameters = queryParameters.set('SchoolAcademicSessionId', <any>schoolAcademicSessionId);
        }
        if (sortBy !== undefined) {
            queryParameters = queryParameters.set('SortBy', <any>sortBy);
        }
        if (sortOrder !== undefined) {
            queryParameters = queryParameters.set('SortOrder', <any>sortOrder);
        }
        if (pageNumber !== undefined) {
            queryParameters = queryParameters.set('PageNumber', <any>pageNumber);
        }
        if (pageSize !== undefined) {
            queryParameters = queryParameters.set('PageSize', <any>pageSize);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        return this.httpClient.get<any>(`${this.basePath}` + BaseModuleConfig._StudentDatabase_AllSearchStudents,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
        * GetStudentNames based on the matched Student Name (Type Ahead) based on Academic Session,ClassId,Student Id as optional
        * 
        * @param schoolAcademicSessionId Gets or sets SchoolAcademicSessionId
        * @param schoolBoardId Gets or sets School Board ID
        * @param classId Gets or sets ClassId
        * @param sectionId Gets or sets ClassId
        * @param name Gets or Sets NameViewModel
        * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
        * @param reportProgress flag to report request and response progress.
        */
    public studentNamesBaseOnAcademicSession(schoolAcademicSessionId?: number, schoolBoardId?: number, classId?: number,
        sectionId?: number, name?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public studentNamesBaseOnAcademicSession(schoolAcademicSessionId?: number, schoolBoardId?: number, classId?: number,
        sectionId?: number, name?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public studentNamesBaseOnAcademicSession(schoolAcademicSessionId?: number, schoolBoardId?: number, classId?: number,
        sectionId?: number, name?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public studentNamesBaseOnAcademicSession(schoolAcademicSessionId?: number, schoolBoardId?: number, classId?: number,
        sectionId?: number, name?: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        queryParameters = this.commonComponent.setQueryParams(schoolAcademicSessionId, 'SchoolAcademicSessionId', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(schoolBoardId, 'SchoolBoardId', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(classId, 'ClassId', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(sectionId, 'SectionId', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(name, 'Name', queryParameters);

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}` + BaseModuleConfig._StudentDatabase_GetStudentsBasedOnAcademicSession,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
