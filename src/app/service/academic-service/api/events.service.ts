/**
 * BaseWebAPI
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import {
    HttpClient, HttpHeaders, HttpParams,
    HttpResponse, HttpEvent
} from '@angular/common/http';
import { Observable } from 'rxjs/Observable';
import { Configuration, BASE_PATH } from 'app/service/grading-service';
import { CustomHttpUrlEncodingCodec } from 'app/service/base/encoder';
import { EventView } from 'app/modules/academics/events/model/event-view-model';
import { EventDataView } from 'app/modules/academics/events/model/event-data-view';
import { BaseUrlConfig, ModuleConfig, BaseModuleConfig } from 'app/url.config';
import { EventParticipantView } from 'app/modules/academics/events/model/event-participant-view';
import { CommonComponent } from 'app/shared/common/common.component';



@Injectable()
export class EventsService {
    protected basePath = BaseUrlConfig.BasePath + ModuleConfig.Base;
// protected basePath = 'http://localhost:8013';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration, 
    private commonComponent: CommonComponent) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Create Events
     * 
     * @param eventView 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createEvents(eventView?: EventView, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public createEvents(eventView?: EventView, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public createEvents(eventView?: EventView, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public createEvents(eventView?: EventView, observe: any = 'body', reportProgress: boolean = false): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}` + BaseModuleConfig._Events_Create_Events,
            eventView,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get All Event Statuses
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getEventStatus(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getEventStatus(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getEventStatus(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getEventStatus(observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}` + BaseModuleConfig._Events_Event_Statuses,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }


    /**
     * Get All Events Types Resp by School Id
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getEventsTypes(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getEventsTypes(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getEventsTypes(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getEventsTypes(observe: any = 'body', reportProgress: boolean = false): Observable<any> {
        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}` + BaseModuleConfig._Events_Event_Types,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get All Events
     * 
     * @param announcedDateBegin Gets or sets of EndDateBegin
     * @param announcedDateEnd Gets or sets of EndDateEnd
     * @param fromDateBegin Gets or sets of OnlineApplicationStartDateBegin
     * @param fromDateEnd Gets or sets of OnlineApplicationStartDateEnd
     * @param toDateBegin Gets or sets of OnlineApplicationEndDateBegin
     * @param toDateEnd Gets or sets of OnlineApplicationEndDateEnd
     * @param eventDescription Gets or Sets ClassName
     * @param classIds Gets or Sets ClassName
     * @param sectionIds Gets or Sets ClassName
     * @param statusIds Gets or Sets Status
     * @param eventTypes Gets or Sets eventTypes
     * @param sortOrder Gets or Sets SortOrder
     * @param sortBy Gets or Sets SortBy
     * @param pageNumber 
     * @param pageSize 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getEvents(announcedDateBegin?: Date, announcedDateEnd?: Date,
         fromDateBegin?: Date, fromDateEnd?: Date, toDateBegin?: Date,
          toDateEnd?: Date, eventDescription?: string, classIds?: Array<string>, 
          sectionIds?: Array<string>, statusIds?: Array<string>, eventTypes?: Array<string>, sortOrder?: 0 | 1 | -1,
           sortBy?: string, pageNumber?: number, pageSize?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});

        queryParameters = this.commonComponent.setQueryParams(announcedDateBegin, 'AnnouncedDateBegin', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(announcedDateEnd, 'AnnouncedDateEnd', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(fromDateBegin, 'FromDateBegin', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(fromDateEnd, 'FromDateEnd', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(toDateBegin, 'ToDateBegin', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(toDateEnd, 'ToDateEnd', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(eventDescription, 'EventDescription', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(classIds, 'ClassIds', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(sectionIds, 'SectionIds', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(statusIds, 'StatusIds', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(eventTypes, 'eventTypeIds', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(sortBy, 'SortBy', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(sortOrder, 'SortOrder', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(pageNumber, 'PageNumber', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(pageSize, 'PageSize', queryParameters);

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}` + BaseModuleConfig._Events_Get_All_Events,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }


    /**
     * Get Event By Id
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getByEvents(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getByEvents(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getByEvents(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getByEvents(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getByEvents.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('Id', <any>id);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}` + BaseModuleConfig._Events_Event_Details,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

       /**
     * Get Students
     * 
     * @param eventId Gets or Sets EventId
     * @param admissionNumber Gets or Sets AdmissionNumber
     * @param studentName Gets or Sets StudentName
     * @param classIds Gets or Sets ClassIds
     * @param sectionIds Gets or Sets SectionIds
     * @param studentGroupIds Gets or Sets StudentGroupIds
     * @param sortOrder Gets or Sets SortOrder
     * @param sortBy Gets or Sets SortBy
     * @param pageNumber 
     * @param pageSize 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getStudentsDetails(eventId?: string, 
        admissionNumber?: string, studentName?: string, 
        classIds?: Array<string>, sectionIds?: Array<string>, 
        studentGroupIds?: Array<string>, sortOrder?: 0 | 1 | -1,
         sortBy?: string, pageNumber?: number, pageSize?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (eventId !== undefined && eventId !== null) {
            queryParameters = queryParameters.set('EventId', <any>eventId);
        }
        if (admissionNumber !== undefined && admissionNumber !== null) {
            queryParameters = queryParameters.set('AdmissionNumber', <any>admissionNumber);
        }
        if (studentName !== undefined && studentName !== null) {
            queryParameters = queryParameters.set('StudentName', <any>studentName);
        }
        if (classIds) {
            classIds.forEach((element) => {
                queryParameters = queryParameters.append('ClassIds', <any>element);
            });
        }
        if (sectionIds) {
            sectionIds.forEach((element) => {
                queryParameters = queryParameters.append('SectionIds', <any>element);
            });
        }
        if (studentGroupIds) {
            studentGroupIds.forEach((element) => {
                queryParameters = queryParameters.append('StudentGroupIds', <any>element);
            });
        }
        if (sortOrder !== undefined && sortOrder !== null) {
            queryParameters = queryParameters.set('SortOrder', <any>sortOrder);
        }
        if (sortBy !== undefined && sortBy !== null) {
            queryParameters = queryParameters.set('SortBy', <any>sortBy);
        }
        if (pageNumber !== undefined && pageNumber !== null) {
            queryParameters = queryParameters.set('PageNumber', <any>pageNumber);
        }
        if (pageSize !== undefined && pageSize !== null) {
            queryParameters = queryParameters.set('PageSize', <any>pageSize);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}` + BaseModuleConfig._Events_Get_Students,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

/**
     * Update Event
     * 
     * @param eventDataView 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateEvents(eventDataView?: EventDataView, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateEvents(eventDataView?: EventDataView, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateEvents(eventDataView?: EventDataView, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateEvents(eventDataView?: EventDataView, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}` + BaseModuleConfig._Events_Update_Event,
            eventDataView,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Create Events
     * 
     * @param eventParticipantView 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createParticipants(eventParticipantView?: Array<EventParticipantView>, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public createParticipants(eventParticipantView?: Array<EventParticipantView>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public createParticipants(eventParticipantView?: Array<EventParticipantView>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public createParticipants(eventParticipantView?: Array<EventParticipantView>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}` + BaseModuleConfig._Events_Create_Participants,
            eventParticipantView,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }


    /**
     * Multi Participants Delete
     * 
     * @param ids 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteParticipants(ids: Array<string>, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteParticipants(ids: Array<string>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteParticipants(ids: Array<string>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteParticipants(ids: Array<string>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (ids === null || ids === undefined) {
            throw new Error('Required parameter ids was null or undefined when calling deleteParticipants.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (ids) {
            ids.forEach((element) => {
                queryParameters = queryParameters.append('Ids', <any>element);
            });
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}` + BaseModuleConfig._Events_Delete_Participants,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }  


    /**
     * Get Event By Id
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAwards(announcedDate?: Date, description?: string, pageNumber?: number, pageSize?: number, observe?: 'body', reportProgress?: boolean): Observable<any> { 

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});

        if (announcedDate !== undefined && announcedDate !== null) {
            queryParameters = queryParameters.set('AnnouncedDate', <any>announcedDate.toISOString());
        }
        if (description !== undefined && description !== null) {
            queryParameters = queryParameters.set('Description', <any>description);
        }
        if (pageNumber !== undefined && pageNumber !== null) {
            queryParameters = queryParameters.set('PageNumber', <any>pageNumber);
        }
        if (pageSize !== undefined && pageSize !== null) {
            queryParameters = queryParameters.set('PageSize', <any>pageSize);
        }

        let headers = this.defaultHeaders; 

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/Events/student-awards`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }
}
