/**
 * BaseWebAPI
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import {
    HttpClient, HttpHeaders, HttpParams,
    HttpResponse, HttpEvent
} from '@angular/common/http';


import { Observable } from 'rxjs/Observable';


import { CustomHttpUrlEncodingCodec } from 'app/service/base/encoder';
import { Configuration, BASE_PATH } from '.';
import { BaseUrlConfig, ModuleConfig, BaseModuleConfig } from 'app/url.config';
import { CommonComponent } from 'app/shared/common/common.component';
import { InstitutionLicenseView } from 'app/modules/lshp-admin/models/institution-license-view';
import { InstituteLicenceView } from 'app/modules/lshp-admin/models/institute-licence-view';


@Injectable()
export class InstituteLicenceService {

     protected basePath = BaseUrlConfig.BasePath + ModuleConfig.Base;
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(private commonComponent: CommonComponent, protected httpClient: HttpClient,
        @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Get Billing Types of a Institute
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public billingCycleTypes(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public billingCycleTypes(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public billingCycleTypes(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public billingCycleTypes(observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        let headers = this.defaultHeaders;
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return this.httpClient.get<any>(`${this.basePath}` + BaseModuleConfig._InstituteLicense_BillingCycleList,
            // return this.httpClient.get<any>(`${this.basePath}/InstituteLicence/billing-cycle-list`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Add licence with respect to perticular institute based on institutionId
     * 
     * @param licenceViewModel 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public create(licenceViewModel?: InstitutionLicenseView, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public create(licenceViewModel?: InstitutionLicenseView, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public create(licenceViewModel?: InstitutionLicenseView, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public create(licenceViewModel?: InstitutionLicenseView, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        let headers = this.defaultHeaders;
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        return this.httpClient.post<any>(`${this.basePath}` + BaseModuleConfig._InstituteLicense_CreateInstituteLicense,
            // return this.httpClient.post<any>(`${this.basePath}/InstituteLicence/institution-licence`,
            licenceViewModel,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get all selected institution details
     * 
     * @param billingCycleId Gets or sets BillingCycleId
     * @param numberOfSchools Gets or Sets NumberOfSchools
     * @param billingAmount Gets or Sets BillingAmount
     * @param billingStartDate Gets or Sets BillingStartDate
    * @param billingDateBegin Gets or Sets BillingDateBegin
    * @param billingDateBegin Gets or Sets BillingDateEnd
     * @param statusId Gets or Sets SortBy
     * @param sortBy Gets or Sets SortBy
     * @param sortOrder Gets or Sets SortOrder
     * @param pageNumber 
     * @param pageSize 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllInstituteLicense(id?: string, billingCycleId?: Array<string>, numberOfSchools?: Array<string>, billingAmount?: Array<string>, billingStartDate?: Date, 
        billingDateBegin?: string, billingDateEnd?: string,
        statusId?: Array<number>, statusCode?: Array<string>, sortBy?: string, sortOrder?: 0 | 1 | -1, pageNumber?: number, pageSize?: number,
        observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getAllInstituteLicense(id?: string, billingCycleId?: Array<string>, numberOfSchools?: Array<string>, billingAmount?: Array<string>, billingStartDate?: Date,
         billingDateBegin?: string, billingDateEnd?: string,
        statusId?: Array<number>, statusCode?: Array<string>, sortBy?: string, sortOrder?: 0 | 1 | -1, pageNumber?: number, pageSize?: number,
        observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getAllInstituteLicense(id?: string, billingCycleId?: Array<string>, numberOfSchools?: Array<string>, billingAmount?: Array<string>, billingStartDate?: Date, 
        billingDateBegin?: string, billingDateEnd?: string,
        statusId?: Array<number>, statusCode?: Array<string>, sortBy?: string, sortOrder?: 0 | 1 | -1, pageNumber?: number, pageSize?: number,
        observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getAllInstituteLicense(id?: string, billingCycleId?: Array<string>, numberOfSchools?: Array<string>, billingAmount?: Array<string>, billingStartDate?: Date,
         billingDateBegin?: string, billingDateEnd?: string,
        statusId?: Array<number>, statusCode?: Array<string>, sortBy?: string, sortOrder?: 0 | 1 | -1, pageNumber?: number, pageSize?: number,
        observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        queryParameters = this.commonComponent.setQueryParams(id, 'Id', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(billingCycleId, 'BillingCycleId', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(numberOfSchools, 'NumberOfSchools', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(billingAmount, 'BillingAmount', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(billingStartDate, 'BillingStartDate', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(billingDateBegin, 'BillingDateBegin', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(billingDateEnd, 'BillingDateEnd', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(statusId, 'StatusId', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(statusCode, 'StatusCode', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(sortBy, 'SortBy', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(sortOrder, 'SortOrder', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(pageNumber, 'PageNumber', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(pageSize, 'PageSize', queryParameters);

        let headers = this.defaultHeaders;
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return this.httpClient.get<any>(`${this.basePath}` + BaseModuleConfig._InstituteLicense_InstituteLicenseDetails,
            // return this.httpClient.get<any>(`${this.basePath}/InstituteLicence/institutelicense-details`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update institute licence status as active/inactive
     * 
     * @param instituteLicenceView 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateInstitutionLicenceStatus(instituteLicenceView?: InstituteLicenceView, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateInstitutionLicenceStatus(instituteLicenceView?: InstituteLicenceView, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateInstitutionLicenceStatus(instituteLicenceView?: InstituteLicenceView, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateInstitutionLicenceStatus(instituteLicenceView?: InstituteLicenceView, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
        let headers = this.defaultHeaders;
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        return this.httpClient.put<any>(`${this.basePath}` + BaseModuleConfig._InstituteLicense_UpdateInstituteLicense,
            // return this.httpClient.put<any>(`${this.basePath}/InstituteLicence/institution-licence`,
            instituteLicenceView,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }
}

