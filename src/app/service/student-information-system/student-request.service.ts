/**
 * BaseWebAPI
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import {
    HttpClient, HttpHeaders, HttpParams,
    HttpResponse, HttpEvent
} from '@angular/common/http';

import { Observable } from 'rxjs/Observable';

import { BaseUrlConfig, ModuleConfig, BaseModuleConfig } from 'app/url.config';
import { StudentRequestIdView } from 'app/modules/academics/student-information-system/model/student-request-id-view';
import { StudentRequestView } from 'app/modules/academics/student-information-system/model/student-request-view';
import { Configuration } from '../base/configuration';
import { BASE_PATH } from '../base/variables';
import { CustomHttpUrlEncodingCodec } from '../base/encoder';
import { CommonComponent } from 'app/shared/common/common.component';
import { ApproveStudentRequestView } from 'app/modules/academics/student-information-system/model/approve-Student-Request';


@Injectable()
export class StudentRequestService {

    protected basePath = BaseUrlConfig.BasePath + ModuleConfig.Base;
    // protected basePath = "http://localhost:8013";

    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH)
    basePath: string, @Optional() configuration: Configuration, private commonComponent: CommonComponent) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }

    /**
     * Approve Student Request
     * 
     * @param authorization access token
     * @param approveStudent 
     * @param schoolId SchoolId in Encrypted Form
     * @param instituteId InstituteId in Encrypted Form
     * @param userId UserId in Encrypted Form
     * @param academicSessionId AcademicSessionId in Encrypted Form 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public approveStudentRequest(approveStudent?: StudentRequestIdView, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public approveStudentRequest(approveStudent?: StudentRequestIdView, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public approveStudentRequest(approveStudent?: StudentRequestIdView, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public approveStudentRequest(approveStudent?: StudentRequestIdView, observe: any = 'body', reportProgress: boolean = false): Observable<any> {



        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        // BaseModuleConfig._Approve_Student_Application
        return this.httpClient.put<any>(`${this.basePath}` + BaseModuleConfig._Student_Request_Approve,
            approveStudent,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Create Student Request
     * 
     * @param authorization access token
     * @param studentRequestView 
     * @param schoolId SchoolId in Encrypted Form
     * @param instituteId InstituteId in Encrypted Form
     * @param userId UserId in Encrypted Form
     * @param academicSessionId AcademicSessionId in Encrypted Form 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createStudentRequest(studentRequestView?: StudentRequestView, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public createStudentRequest(studentRequestView?: StudentRequestView, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public createStudentRequest(studentRequestView?: StudentRequestView, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public createStudentRequest(studentRequestView?: StudentRequestView, observe: any = 'body', reportProgress: boolean = false): Observable<any> {



        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}` + BaseModuleConfig._Student_Request_Create,
            studentRequestView,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets Generic List of Student Request Types
     * 
     * @param authorization access token
     * @param schoolId SchoolId in Encrypted Form
     * @param instituteId InstituteId in Encrypted Form
     * @param userId UserId in Encrypted Form
     * @param academicSessionId AcademicSessionId in Encrypted Form 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getStudentRequestTypes(schoolId?: string, instituteId?: string, userId?: string, academicSessionId?: string,
        observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getStudentRequestTypes(schoolId?: string, instituteId?: string, userId?: string, academicSessionId?: string,
        observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getStudentRequestTypes(schoolId?: string, instituteId?: string, userId?: string, academicSessionId?: string,
        observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getStudentRequestTypes(schoolId?: string, instituteId?: string, userId?: string, academicSessionId?: string,
        observe: any = 'body', reportProgress: boolean = false): Observable<any> {


        let headers = this.defaultHeaders;
        if (schoolId !== undefined && schoolId !== null) {
            headers = headers.set('SchoolId', String(schoolId));
        }
        if (instituteId !== undefined && instituteId !== null) {
            headers = headers.set('InstituteId', String(instituteId));
        }
        if (userId !== undefined && userId !== null) {
            headers = headers.set('UserId', String(userId));
        }
        if (academicSessionId !== undefined && academicSessionId !== null) {
            headers = headers.set('AcademicSessionId', String(academicSessionId));
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}` + BaseModuleConfig._Student_Request_Types,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Reject Student Request
     * 
     * @param authorization access token
     * @param rejectStudent 
     * @param schoolId SchoolId in Encrypted Form
     * @param instituteId InstituteId in Encrypted Form
     * @param userId UserId in Encrypted Form
     * @param academicSessionId AcademicSessionId in Encrypted Form 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public rejectStudentRequest(rejectStudent?: StudentRequestIdView, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public rejectStudentRequest(rejectStudent?: StudentRequestIdView, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public rejectStudentRequest(rejectStudent?: StudentRequestIdView, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public rejectStudentRequest(rejectStudent?: StudentRequestIdView, observe: any = 'body', reportProgress: boolean = false): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}` + BaseModuleConfig._Student_Request_Reject,
            rejectStudent,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Student Request Grid
     * 
     * @param authorization access token
     * @param studentRequestTypeIds Gets or Sets StudentRequestTypeIds
     * @param studentName Gets or Sets StudentName
     * @param status Gets or Sets Status
     * @param admissionNumber Gets or Sets AdmissionNumber
     * @param requestNotes Gets or Sets RequestNotes
     * @param requestDateBegin Gets or Sets RequestDateBegin
     * @param requestDateEnd Gets or Sets RequestDateEnd
     * @param sortOrder Gets or Sets SortColumn
     * @param sortBy Gets or Sets SortBy- \&quot;ClassReference Name Code Description\&quot;
     * @param failedRecords Gets or Sets FailedRecords
     * @param pageNumber 
     * @param pageSize 
     * @param schoolId SchoolId in Encrypted Form
     * @param instituteId InstituteId in Encrypted Form
     * @param userId UserId in Encrypted Form
     * @param academicSessionId A
     * ademicSessionId in Encrypted Form 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public studentRequestGrid(studentRequestTypeIds?: Array<string>, studentName?: Array<string>,
        statusIds?: Array<string>, admissionNumber?: Array<string>, requestNotes?: Array<string>, requestDateBegin?: Date, requestDateEnd?: Date, sortOrder?: 0 | 1 | -1,
        sortBy?: string, failedRecords?: Array<string>, pageNumber?: number, pageSize?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public studentRequestGrid(studentRequestTypeIds?: Array<string>, studentName?: Array<string>,
        statusIds?: Array<string>, admissionNumber?: Array<string>, requestNotes?: Array<string>, requestDateBegin?: Date, requestDateEnd?: Date, sortOrder?: 0 | 1 | -1,
        sortBy?: string, failedRecords?: Array<string>, pageNumber?: number, pageSize?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public studentRequestGrid(studentRequestTypeIds?: Array<string>, studentName?: Array<string>,
        statusIds?: Array<string>, admissionNumber?: Array<string>, requestNotes?: Array<string>, requestDateBegin?: Date, requestDateEnd?: Date, sortOrder?: 0 | 1 | -1,
        sortBy?: string, failedRecords?: Array<string>, pageNumber?: number, pageSize?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public studentRequestGrid(studentRequestTypeIds?: Array<string>, studentName?: Array<string>,
        statusIds?: Array<string>, admissionNumber?: Array<string>, requestNotes?: Array<string>, requestDateBegin?: Date, requestDateEnd?: Date, sortOrder?: 0 | 1 | -1,
        sortBy?: string, failedRecords?: Array<string>, pageNumber?: number, pageSize?: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {





        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        queryParameters = this.commonComponent.setQueryParams(studentRequestTypeIds, 'StudentRequestTypeIds', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(studentName, 'StudentName', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(statusIds, 'StatusIds', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(admissionNumber, 'AdmissionNumber', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(requestNotes, 'RequestNotes', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(requestDateBegin, 'RequestDateBegin', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(requestDateEnd, 'RequestDateEnd', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(sortOrder, 'SortOrder', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(sortBy, 'SortBy', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(failedRecords, 'FailedRecords', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(pageNumber, 'PageNumber', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(pageSize, 'PageSize', queryParameters);

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}` + BaseModuleConfig._Student_Request_Grid,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }


    /**
     * Approve Student Request and Generate Certificate
     * 
     * @param approveStudentRequestView 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public approveRequest(approveStudentRequestView?: ApproveStudentRequestView, observe?: 'body', reportProgress?: boolean): Observable<any>;
    // tslint:disable-next-line: max-line-length
    public approveRequest(approveStudentRequestView?: ApproveStudentRequestView, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public approveRequest(approveStudentRequestView?: ApproveStudentRequestView, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public approveRequest(approveStudentRequestView?: ApproveStudentRequestView, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [        ];

        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}` + BaseModuleConfig._Student_Request_Approve1,
            approveStudentRequestView,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
