/**
 * BaseWebAPI
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import {
    HttpClient, HttpHeaders, HttpParams,
    HttpResponse, HttpEvent
} from '@angular/common/http';

import { Observable } from 'rxjs/Observable';


import { Configuration } from '../base/configuration';
import { BASE_PATH } from '../base/variables';
import { CustomHttpUrlEncodingCodec } from '../base/encoder';
import { BaseUrlConfig, ModuleConfig, BaseModuleConfig } from 'app/url.config';
import { StudentActionView } from 'app/modules/academics/student-information-system/model/student-action-view';
import { CommonComponent } from 'app/shared/common/common.component';


@Injectable()
export class StudentActionService {

   // protected basePath = 'http://localhost:8013';
    protected basePath = BaseUrlConfig.BasePath + ModuleConfig.Base;
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH)
    basePath: string, @Optional() configuration: Configuration, private commonComponent: CommonComponent) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Create Student Action
     * 
     * @param authorization access token
     * @param studentActionView 
     * @param schoolId SchoolId in Encrypted Form
     * @param instituteId InstituteId in Encrypted Form
     * @param userId UserId in Encrypted Form
     * @param academicSessionId AcademicSessionId in Encrypted Form 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createStudentRequest(studentActionView?: StudentActionView, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public createStudentRequest(studentActionView?: StudentActionView, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public createStudentRequest(studentActionView?: StudentActionView, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public createStudentRequest(studentActionView?: StudentActionView, observe: any = 'body', reportProgress: boolean = false): Observable<any> {


        let headers = this.defaultHeaders;
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}` + BaseModuleConfig._Student_Action_Create,
            studentActionView,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets Generic List of Student Action Types
     * 
     * @param authorization access token
     * @param schoolId SchoolId in Encrypted Form
     * @param instituteId InstituteId in Encrypted Form
     * @param userId UserId in Encrypted Form
     * @param academicSessionId AcademicSessionId in Encrypted Form 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getStudentRequestTypes(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getStudentRequestTypes(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getStudentRequestTypes(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getStudentRequestTypes(observe: any = 'body', reportProgress: boolean = false): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}` + BaseModuleConfig._Student_Action_Types,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Student Action Grid
     * 
     * @param authorization access token
     * @param studentActionTypeIds Gets or Sets StudentRequestTypeIds
     * @param classIds Gets or Sets Class
     * @param classNames Gets or Sets ClassName
     * @param studentName Gets or Sets StudentName
     * @param admissionNumber Gets or Sets AdmissionNumber
     * @param details Gets or Sets Details
     * @param sortOrder Gets or Sets SortColumn
     * @param sortBy Gets or Sets SortBy- \&quot;ClassReference Name Code Description\&quot;
     * @param failedRecords Gets or Sets FailedRecords
     * @param pageNumber 
     * @param pageSize 
     * @param schoolId SchoolId in Encrypted Form
     * @param instituteId InstituteId in Encrypted Form
     * 
     * @param userId UserId in Encrypted Form
     * @param academicSessionId AcademicSessionId in Encrypted Form 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public studentActionGrid(studentActionTypeIds?: Array<string>, academicSessions?: Array<string>, classIds?: Array<string>, classNames?: Array<string>, 
        studentName?: Array<string>,
        admissionNumber?: Array<string>, details?: Array<string>, sortOrder?: 0 | 1 | -1, sortBy?: string, failedRecords?: Array<string>, pageNumber?: number,
        pageSize?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public studentActionGrid(studentActionTypeIds?: Array<string>,
         academicSessions?: Array<string>, classIds?: Array<string>, classNames?: Array<string>, studentName?: Array<string>,
        admissionNumber?: Array<string>, details?: Array<string>, sortOrder?: 0 | 1 | -1, sortBy?: string, failedRecords?: Array<string>, pageNumber?: number,
        pageSize?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public studentActionGrid(studentActionTypeIds?: Array<string>, academicSessions?: Array<string>,
         classIds?: Array<string>, classNames?: Array<string>, studentName?: Array<string>,
        admissionNumber?: Array<string>, details?: Array<string>, sortOrder?: 0 | 1 | -1, sortBy?: string, failedRecords?: Array<string>, pageNumber?: number,
        pageSize?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public studentActionGrid(studentActionTypeIds?: Array<string>, academicSessions?: Array<string>, classIds?: Array<string>, classNames?: Array<string>, 
        studentName?:  Array<string>,
        admissionNumber?: Array<string>, details?: Array<string>, sortOrder?: 0 | 1 | -1, sortBy?: string, failedRecords?: Array<string>, pageNumber?: number,
        pageSize?: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {


        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        queryParameters = this.commonComponent.setQueryParams(studentActionTypeIds, 'StudentActionTypeIds', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(academicSessions, 'AcademicSessions', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(classIds, 'ClassIds', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(classNames, 'ClassNames', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(studentName, 'studentName', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(admissionNumber, 'AdmissionNumber', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(details, 'Details', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(sortOrder, 'SortOrder', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(sortBy, 'SortBy', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(failedRecords, 'FailedRecords', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(pageNumber, 'PageNumber', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(pageSize, 'PageSize', queryParameters);


        let headers = this.defaultHeaders;
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}` + BaseModuleConfig._Student_Action_Grid,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
