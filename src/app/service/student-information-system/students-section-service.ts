/**
 * BaseWebAPI
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import {
    HttpClient, HttpHeaders, HttpParams,
    HttpResponse, HttpEvent
} from '@angular/common/http';


import { Observable } from 'rxjs/Observable';
import { Configuration, BASE_PATH } from '../grading-service';
import { CustomHttpUrlEncodingCodec } from '../base/encoder';
import { BaseUrlConfig, ModuleConfig } from 'app/url.config';
import { StudentSectionAssignView } from 'app/modules/academics/student-information-system/model/students-section-assign-view';



@Injectable()
export class StudentSectionsService {

    protected basePath = BaseUrlConfig.BasePath + ModuleConfig.Base;
    //  protected basePath = 'http://localhost:8013';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Student Data list
     * 
     * @param sortBy Gets or Sets SortBy
     * @param classId Gets or sets column ClassId
     * @param schoolBoardId Gets or sets column SchoolBoardId
     * @param classIds Gets or sets column ClassIds
     * @param sectionIds Gets or sets column SectionIds
     * @param studentNames Gets or sets column StudentNames
     * @param admissionNumbers Gets or sets column AdmissionNumbers
     * @param sortOrder Gets or Sets SortOrder
     * @param pageNumber 
     * @param pageSize 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public studentData(sortBy?: string, classId?: number, schoolBoardId?: number,
        classIds?: Array<string>, sectionIds?: Array<string>,
        studentNames?: Array<string>, admissionNumbers?: Array<string>,
        sortOrder?: 0 | 1 | -1, pageNumber?: number, pageSize?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public studentData(sortBy?: string, classId?: number, schoolBoardId?: number,
        classIds?: Array<string>, sectionIds?: Array<string>,
        studentNames?: Array<string>, admissionNumbers?: Array<string>,
        sortOrder?: 0 | 1 | -1, pageNumber?: number, pageSize?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public studentData(sortBy?: string, classId?: number, schoolBoardId?: number,
        classIds?: Array<string>, sectionIds?: Array<string>,
        studentNames?: Array<string>, admissionNumbers?: Array<string>,
        sortOrder?: 0 | 1 | -1, pageNumber?: number, pageSize?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public studentData(sortBy?: string, classId?: number, schoolBoardId?: number,
        classIds?: Array<string>, sectionIds?: Array<string>,
        studentNames?: Array<string>, admissionNumbers?: Array<string>,
        sortOrder?: 0 | 1 | -1, pageNumber?: number, pageSize?: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (sortBy !== undefined && sortBy !== null) {
            queryParameters = queryParameters.set('SortBy', <any>sortBy);
        }
        if (classId !== undefined && classId !== null) {
            queryParameters = queryParameters.set('ClassId', <any>classId);
        }
        if (schoolBoardId !== undefined && schoolBoardId !== null) {
            queryParameters = queryParameters.set('SchoolBoardId', <any>schoolBoardId);
        }
        if (classIds) {
            classIds.forEach((element) => {
                queryParameters = queryParameters.append('ClassIds', <any>element);
            });
        }
        if (sectionIds) {
            sectionIds.forEach((element) => {
                queryParameters = queryParameters.append('SectionIds', <any>element);
            });
        }
        if (studentNames) {
            studentNames.forEach((element) => {
                queryParameters = queryParameters.append('StudentNames', <any>element);
            });
        }
        if (admissionNumbers) {
            admissionNumbers.forEach((element) => {
                queryParameters = queryParameters.append('AdmissionNumbers', <any>element);
            });
        }
        if (sortOrder !== undefined && sortOrder !== null) {
            queryParameters = queryParameters.set('SortOrder', <any>sortOrder);
        }
        if (pageNumber !== undefined && pageNumber !== null) {
            queryParameters = queryParameters.set('PageNumber', <any>pageNumber);
        }
        if (pageSize !== undefined && pageSize !== null) {
            queryParameters = queryParameters.set('PageSize', <any>pageSize);
        }

        let headers = this.defaultHeaders;


        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/StudentSections/student-list`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

     /**
     * StudentsSectionAssignment
     * 
     * @param authorization access token
     * @param studentSectionAssignView 
     * @param schoolId SchoolId in Encrypted Form
     * @param instituteId InstituteId in Encrypted Form
     * @param userId UserId in Encrypted Form
     * @param academicSessionId AcademicSessionId in Encrypted Form 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public studentsSectionAssignment( studentSectionAssignView?: StudentSectionAssignView,  observe?: 'body', reportProgress?: boolean): Observable<any>;
    public studentsSectionAssignment( studentSectionAssignView?: StudentSectionAssignView,  observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public studentsSectionAssignment( studentSectionAssignView?: StudentSectionAssignView,  observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public studentsSectionAssignment( studentSectionAssignView?: StudentSectionAssignView,  observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;
     

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}/StudentSections/students-section-assignment`,
            studentSectionAssignView,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }
 }
