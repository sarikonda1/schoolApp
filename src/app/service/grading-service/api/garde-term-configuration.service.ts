/**
 * Course
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import {
    HttpClient, HttpHeaders, HttpParams,
    HttpResponse, HttpEvent
} from '@angular/common/http';
import { Observable } from 'rxjs/Observable';
import { Configuration, BASE_PATH } from '.';
import { GradingTermDataViewModel } from 'app/models/grading/grading-term-data-view';
import { BaseUrlConfig, ModuleConfig, BaseModuleConfig, CourseModuleConfig } from '../../../url.config';
import { CommonComponent } from 'app/shared/common/common.component';
import { CustomHttpUrlEncodingCodec } from 'app/service/base/encoder';
import { GradingTermDataModel } from 'app/models/grading/grading-term-data-model';
import { GradingTermCloneViewModel } from 'app/models/grading/grading-term-clone-view-model';


@Injectable()
export class GardeTermConfigurationService {

    protected basePath = BaseUrlConfig.BasePath + ModuleConfig.Course; 
    
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected commonComponent: CommonComponent,
        protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }

    /**
     * Get List of School Boards Based On SchoolId
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public evaluationTypes(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public evaluationTypes(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public evaluationTypes(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public evaluationTypes(observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}` + CourseModuleConfig._GradeTerm_Evaluationtypes,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get List of School Boards Based On SchoolId
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public fetchMarksGroupCriteria(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public fetchMarksGroupCriteria(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public fetchMarksGroupCriteria(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public fetchMarksGroupCriteria(observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return this.httpClient.get<any>(`${this.basePath}` + CourseModuleConfig._GradeTerm_MarksCriteria,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get List of School Boards Based On SchoolId
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public fetchPriorGradingTerms(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public fetchPriorGradingTerms(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public fetchPriorGradingTerms(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public fetchPriorGradingTerms(observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}` + CourseModuleConfig._GradeTerm_PriorGradingTerms,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get List of School Boards Based On SchoolId
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public fetchTestTypes(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public fetchTestTypes(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public fetchTestTypes(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public fetchTestTypes(observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return this.httpClient.get<any>(`${this.basePath}` + CourseModuleConfig._GradeTerm_TestTypes,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
    * Get
    * 
    * @param sortBy Gets or Sets of SortBy
    * @param sortOrder Gets or Sets of SortOrder
    * @param names Gets or Sets of Name
    * @param classes Gets or Sets of Sections
    * @param sections Gets or Sets of Classes
    * @param evaluationTypeId Gets or Sets of EvaluationTypes
    * @param codes Gets or Sets of Code
    * @param termStartDateBegin Gets or Sets of TermStartDateBegin
    * @param termStartDateEnd Gets or Sets of TermStartDateEnd
    * @param termEndDateBegin Gets or Sets of TermEndDateBegin
    * @param termEndDateEnd Gets or Sets of TermEndDateEnd
    * @param generateReportCard Gets or Sets of GenerateReportCard
    * @param generateOverallGrade Gets or Sets of GenerateOverallGrade
    * @param overallGradeDisplayNames Gets or Sets of OverallGradeDisplayNames
    * @param pageNumber 
    * @param pageSize 
    * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
    * @param reportProgress flag to report request and response progress.
    */
    public fetchGradingTermsList(sortBy?: string, sortOrder?: 0 | 1 | -1, names?: Array<string>, classes?: Array<string>
        , sections?: Array<string>, evaluationTypeId?: Array<string>, codes?: Array<string>, termStartDatesBegin?: string
        , termStartDatesEnd?: string, termEndDatesBegin?: string, termEndDatesEnd?: string,
        generateReportCard?: Array<string>, generateOverallGrade?: Array<string>, overallGradeDisplayNames?: Array<string>
        , pageNumber?: number, pageSize?: number, schoolId?: string, instituteId?: string, userId?: string
        , academicSessionId?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public fetchGradingTermsList(sortBy?: string, sortOrder?: 0 | 1 | -1, names?: Array<string>, classes?: Array<string>
        , sections?: Array<string>, evaluationTypeId?: Array<string>, codes?: Array<string>, termStartDatesBegin?: string
        , termStartDatesEnd?: string, termEndDatesBegin?: string, termEndDatesEnd?: string,
        generateReportCard?: Array<string>, generateOverallGrade?: Array<string>, overallGradeDisplayNames?: Array<string>
        , pageNumber?: number, pageSize?: number, schoolId?: string, instituteId?: string, userId?: string
        , academicSessionId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public fetchGradingTermsList(sortBy?: string, sortOrder?: 0 | 1 | -1, names?: Array<string>, classes?: Array<string>
        , sections?: Array<string>, evaluationTypeId?: Array<string>, codes?: Array<string>, termStartDatesBegin?: string
        , termStartDatesEnd?: string, termEndDatesBegin?: string, termEndDatesEnd?: string,
        generateReportCard?: Array<string>, generateOverallGrade?: Array<string>, overallGradeDisplayNames?:
            Array<string>, pageNumber?: number, pageSize?: number, schoolId?: string, instituteId?: string, userId?: string
        , academicSessionId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public fetchGradingTermsList(sortBy?: string, sortOrder?: 0 | 1 | -1, names?: Array<string>, classes?: Array<string>
        , sections?: Array<string>, evaluationTypeId?: Array<string>, codes?: Array<string>, termStartDatesBegin?: string
        , termStartDatesEnd?: string, termEndDatesBegin?: string, termEndDatesEnd?: string,
        generateReportCard?: Array<string>, generateOverallGrade?: Array<string>, overallGradeDisplayNames?:
            Array<string>, pageNumber?: number, pageSize?: number, schoolId?: string, instituteId?: string, userId?:
            string, academicSessionId?: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });

        queryParameters = this.commonComponent.setQueryParams(sortBy, 'SortBy', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(sortOrder, 'SortOrder', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(names, 'Names', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(classes, 'Classes', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(sections, 'Sections', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(evaluationTypeId, 'EvaluationTypeId', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(codes, 'Codes', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(generateReportCard, 'GenerateReportCard', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(generateOverallGrade, 'GenerateOverallGrade', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(overallGradeDisplayNames, 'OverallGradeDisplayNames', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(pageNumber, 'PageNumber', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(pageSize, 'PageSize', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(termStartDatesBegin, 'TermStartDatesBegin', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(termStartDatesEnd, 'TermStartDatesEnd', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(termEndDatesBegin, 'TermEndDatesBegin', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(termEndDatesEnd, 'TermEndDatesEnd', queryParameters);

        let headers = this.defaultHeaders;
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}` + CourseModuleConfig._GradeTerm_Terms,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get
     * 
     * @param authorization access token
     * @param gradeTermConfigurationViewModel 
     * @param schoolId SchoolId in Encrypted Form
     * @param instituteId InstituteId in Encrypted Form
     * @param userId UserId in Encrypted Form
     * @param academicSessionId AcademicSessionId in Encrypted Form 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public gardeTermConfigurationCreateGradingTermPost(gradeTermConfigurationViewModel?: GradingTermDataViewModel, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public gardeTermConfigurationCreateGradingTermPost(gradeTermConfigurationViewModel?: GradingTermDataViewModel,
        observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public gardeTermConfigurationCreateGradingTermPost(gradeTermConfigurationViewModel?: GradingTermDataViewModel,
        observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public gardeTermConfigurationCreateGradingTermPost(gradeTermConfigurationViewModel?: GradingTermDataViewModel,
        observe: any = 'body', reportProgress: boolean = false): Observable<any> {
        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}` + CourseModuleConfig._GradeTerm_CreateTerm,
            gradeTermConfigurationViewModel,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
   * Removing Grading Terms
   * 
   * @param ids 
   * @param authorization access token
   * @param schoolId SchoolId in Encrypted Form
   * @param instituteId InstituteId in Encrypted Form
   * @param userId UserId in Encrypted Form
   * @param academicSessionId AcademicSessionId in Encrypted Form 
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
    public removeGradingTerm(ids: Array<string>, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public removeGradingTerm(ids: Array<string>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public removeGradingTerm(ids: Array<string>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public removeGradingTerm(ids: Array<string>, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        if (ids === null || ids === undefined) {
            throw new Error('Required parameter ids was null or undefined when calling removeGradingTerm.');
        }

        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (ids) {
            ids.forEach((element) => {
                queryParameters = queryParameters.append('Ids', <any>element);
            });
        }

        let headers = this.defaultHeaders;


        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.delete<any>(`${this.basePath}` + CourseModuleConfig._GradeTerm_RemoveAll,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }


    /**
     * used to get Type Categories by CategoryById
     * 
     * @param typeCategoryId 
     * @param authorization access token
     * @param schoolId SchoolId in Encrypted Form
     * @param instituteId InstituteId in Encrypted Form
     * @param userId UserId in Encrypted Form
     * @param academicSessionId AcademicSessionId in Encrypted Form 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public fetchTypeCategories(typeCategoryId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public fetchTypeCategories(typeCategoryId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public fetchTypeCategories(typeCategoryId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public fetchTypeCategories(typeCategoryId: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        if (typeCategoryId === null || typeCategoryId === undefined) {
            throw new Error('Required parameter typeCategoryId was null or undefined when calling fetchTypeCategories.');
        }

        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (typeCategoryId !== undefined && typeCategoryId !== null) {
            queryParameters = queryParameters.set('typeCategoryId', <any>typeCategoryId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        return this.httpClient.get<any>(`${this.basePath}` + CourseModuleConfig._Grade_Type_Category,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
    * Get GradingTerm Configuration details by Id
    * 
    * @param id 
    * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
    * @param reportProgress flag to report request and response progress.
    */
    public gradingTermConfigurationGradeTermGet(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public gradingTermConfigurationGradeTermGet(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public gradingTermConfigurationGradeTermGet(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public gradingTermConfigurationGradeTermGet(id: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling gradingTermConfigurationGradeTermGet.');
        }

        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('Id', <any>id);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header

        return this.httpClient.get<any>(`${this.basePath}` + CourseModuleConfig._GradeTerm_GetById,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
    * Update GradingTerm by Id
    * 
    * @param gradingTermDataViewModel 
    * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
    * @param reportProgress flag to report request and response progress.
    */
    public gradingTermConfigurationGradingTermPut(gradingTermDataViewModel?: GradingTermDataModel, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public gradingTermConfigurationGradingTermPut(gradingTermDataViewModel?: GradingTermDataModel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public gradingTermConfigurationGradingTermPut(gradingTermDataViewModel?: GradingTermDataModel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public gradingTermConfigurationGradingTermPut(gradingTermDataViewModel?: GradingTermDataModel, observe: any = 'body', reportProgress: boolean = false): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}` + CourseModuleConfig._GradeTerm_PUT,
            gradingTermDataViewModel,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get List of Sections based on Class Id and Grading TermId
     * 
     * @param classId Gets or sets of ClassId
     * @param gradingTermId Gets or sets of GradingTermId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public gradingTermConfigurationFetchSectionsByClassidAndGradingtermidGet(classId?: number, gradingTermId?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public gradingTermConfigurationFetchSectionsByClassidAndGradingtermidGet(
        classId?: number, gradingTermId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public gradingTermConfigurationFetchSectionsByClassidAndGradingtermidGet(
        classId?: number, gradingTermId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public gradingTermConfigurationFetchSectionsByClassidAndGradingtermidGet(
        classId?: number, gradingTermId?: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {


        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (classId !== undefined && classId !== null) {
            queryParameters = queryParameters.set('ClassId', <any>classId);
        }
        if (gradingTermId !== undefined && gradingTermId !== null) {
            queryParameters = queryParameters.set('GradingTermId', gradingTermId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        return this.httpClient.get<any>(`${this.basePath}` + CourseModuleConfig._GradingTermconfiguration_Sections,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }



    /**
     * clone grading term
     * @param gradingTermCloneViewModel 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public gradingTermConfigurationCloneGradingTermPost(gradingTermCloneViewModel?: GradingTermCloneViewModel, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public gradingTermConfigurationCloneGradingTermPost(
        gradingTermCloneViewModel?: GradingTermCloneViewModel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public gradingTermConfigurationCloneGradingTermPost(
        gradingTermCloneViewModel?: GradingTermCloneViewModel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public gradingTermConfigurationCloneGradingTermPost(
        gradingTermCloneViewModel?: GradingTermCloneViewModel, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}` + CourseModuleConfig._GradingTermconfiguration_cloneGradingTerm,
            gradingTermCloneViewModel,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get List of classes Based On GradingTermId
     * 
     * @param id 
     * @param authorization access token
     * @param schoolId SchoolId in Encrypted Form
     * @param instituteId InstituteId in Encrypted Form
     * @param userId UserId in Encrypted Form
     * @param academicSessionId AcademicSessionId in Encrypted Form 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public gradingTermConfigurationFetchClassesByGradingtermidGet(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public gradingTermConfigurationFetchClassesByGradingtermidGet(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public gradingTermConfigurationFetchClassesByGradingtermidGet(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public gradingTermConfigurationFetchClassesByGradingtermidGet(id: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling gradingTermConfigurationFetchClassesByGradingtermidGet.');
        }

        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('Id', <any>id);
        }

        let headers = this.defaultHeaders;
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        return this.httpClient.get<any>(`${this.basePath}` + CourseModuleConfig._GradingTermconfiguration_classSections,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }
    /**
     * Get Greading terms Based On SchoolBoardId
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public gradingTermConfigurationGradingTermsByBoardIdGet(id?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public gradingTermConfigurationGradingTermsByBoardIdGet(id?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public gradingTermConfigurationGradingTermsByBoardIdGet(id?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public gradingTermConfigurationGradingTermsByBoardIdGet(id?: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {


        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('boardId', <any>id);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/GradingTermConfiguration/grading-terms-by-boardId`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
    * fetching grading terms by class and section combination.
    * 
    * @param classId Gets or sets ClassId
    * @param sectionId Gets or sets SectionId
    * @param pageNumber 
    * @param pageSize  
    * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
    * @param reportProgress flag to report request and response progress.
    */
    public gradingTermConfigurationGradingTermsByClassSectionGet(boardId: number, classId: number, sectionId: Array<number>,
        pageNumber?: number, pageSize?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public gradingTermConfigurationGradingTermsByClassSectionGet(boardId: number, classId: number, sectionId: Array<number>,
        pageNumber?: number, pageSize?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public gradingTermConfigurationGradingTermsByClassSectionGet(boardId: number, classId: number, sectionId: Array<number>,
        pageNumber?: number, pageSize?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public gradingTermConfigurationGradingTermsByClassSectionGet(boardId: number, classId: number, sectionId: Array<number>,
        pageNumber?: number, pageSize?: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        if (boardId === null || boardId === undefined) {
            throw new Error('Required parameter boardId was null or undefined when calling gradingTermConfigurationGradingTermsByClassSectionGet.');
        }

        if (classId === null || classId === undefined) {
            throw new Error('Required parameter classId was null or undefined when calling gradingTermConfigurationGradingTermsByClassSectionGet.');
        }

        if (sectionId === null || sectionId === undefined) {
            throw new Error('Required parameter sectionId was null or undefined when calling gradingTermConfigurationGradingTermsByClassSectionGet.');
        }


        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });

        queryParameters = this.commonComponent.setQueryParams(boardId, 'boardId', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(classId, 'ClassId', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(sectionId, 'SectionId', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(pageNumber, 'PageNumber', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(pageSize, 'PageSize', queryParameters);


        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return this.httpClient.get<any>(`${this.basePath}` + CourseModuleConfig._GradeTerm_ClassSection,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * fetching grading terms by class and section combination.
     *
     * @param classId Gets or sets ClassId
     * @param sectionId Gets or sets SectionId
     * @param pageNumber
     * @param pageSize
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public gradingTermsDropdownByClassSectionGet(classId: number, sectionId: number,
        observe?: 'body', reportProgress?: boolean): Observable<any>;
    public gradingTermsDropdownByClassSectionGet(classId: number, sectionId: number,
        observe?:
            'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public gradingTermsDropdownByClassSectionGet(classId: number, sectionId: number,
        observe?: 'events',
        reportProgress?: boolean): Observable<HttpEvent<any>>;
    public gradingTermsDropdownByClassSectionGet(classId: number, sectionId: number,
        observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        if (classId === null || classId === undefined) {
            throw new Error('Required parameter classId was null or undefined when calling gradingTermConfigurationGradingTermsByClassSectionGet.');
        }

        if (sectionId === null || sectionId === undefined) {
            throw new Error('Required parameter sectionId was null or undefined when calling gradingTermConfigurationGradingTermsByClassSectionGet.');
        }


        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });

        queryParameters = this.commonComponent.setQueryParams(classId, 'ClassId', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(sectionId, 'SectionId', queryParameters);


        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return this.httpClient.get<any>(`${this.basePath}` + CourseModuleConfig._GradeTerm_Dropdown_ClassSection,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get List of School Boards Based On SchoolId
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public fetchGradingTermsByBoardId(boardId?: any, classId?: any, sectionId?: any, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public fetchGradingTermsByBoardId(boardId?: any, classId?: any, sectionId?: any, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public fetchGradingTermsByBoardId(boardId?: any, classId?: any, sectionId?: any, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public fetchGradingTermsByBoardId(boardId?: any, classId?: any, sectionId?: any, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        let headers = this.defaultHeaders;
        if (boardId === null || boardId === undefined) {
            throw new Error('Required parameter id was null or undefined when calling gradingTermConfigurationFetchClassesByGradingtermidGet.');
        }

        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        
        queryParameters = this.commonComponent.setQueryParams(boardId, 'boardId', queryParameters);

        queryParameters = this.commonComponent.setQueryParams(classId, 'classId', queryParameters);

        queryParameters = this.commonComponent.setQueryParams(sectionId, 'sectionId', queryParameters);
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return this.httpClient.get<any>(`${this.basePath}` + BaseModuleConfig._Grading_Terms_By_Board,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }


    /**
     * Get List of classes Based On GradingTermId
     * 
     * @param id 
     * @param authorization access token
     * @param schoolId SchoolId in Encrypted Form
     * @param instituteId InstituteId in Encrypted Form
     * @param userId UserId in Encrypted Form
     * @param academicSessionId AcademicSessionId in Encrypted Form 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public gradingTermConfigurationFetchClassesByGradingtermid(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public gradingTermConfigurationFetchClassesByGradingtermid(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public gradingTermConfigurationFetchClassesByGradingtermid(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public gradingTermConfigurationFetchClassesByGradingtermid(id: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling gradingTermConfigurationFetchClassesByGradingtermidGet.');
        }

        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('Id', <any>id);
        }

        let headers = this.defaultHeaders;
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        return this.httpClient.get<any>(`${this.basePath}` + CourseModuleConfig._GradingTermconfiguration_classes,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }


     /**
     * Get Greading Terms by Class,Section and SchollBoardId
     * 
     * @param authorization access token
     * @param classId Gets or sets ClassId
     * @param sectionId Gets or sets SectionId
     * @param schoolBoardId Gets or sets SchoolBoardId
     * @param schoolId SchoolId in Encrypted Form
     * @param instituteId InstituteId in Encrypted Form
     * @param userId UserId in Encrypted Form
     * @param academicSessionId AcademicSessionId in Encrypted Form 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public gradingTermConfigurationGradingTermsByClassidAndSectionidAndBoardidGet(classId?: number, sectionId?: Array<number>, 
        schoolBoardId?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public gradingTermConfigurationGradingTermsByClassidAndSectionidAndBoardidGet(classId?: number, sectionId?: Array<number>,
         schoolBoardId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public gradingTermConfigurationGradingTermsByClassidAndSectionidAndBoardidGet(classId?: number, sectionId?: Array<number>,
         schoolBoardId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public gradingTermConfigurationGradingTermsByClassidAndSectionidAndBoardidGet(classId?: number, sectionId?: Array<number>,
         schoolBoardId?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

       
        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (classId !== undefined && classId !== null) {
            queryParameters = queryParameters.set('ClassId', <any>classId);
        }
        if (sectionId) {
            sectionId.forEach((element) => {
                queryParameters = queryParameters.append('SectionId', <any>element);
            });
        }
        if (schoolBoardId !== undefined && schoolBoardId !== null) {
            queryParameters = queryParameters.set('SchoolBoardId', <any>schoolBoardId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}` + CourseModuleConfig._GradingTerms_basedon_board_class_sections,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
    * Get List of School Boards Based On SchoolId
    * 
    * @param authorization access token
    * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
    * @param reportProgress flag to report request and response progress.
    */
    public gradingTermConfigurationPrintTemplateGet(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public gradingTermConfigurationPrintTemplateGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public gradingTermConfigurationPrintTemplateGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public gradingTermConfigurationPrintTemplateGet(observe: any = 'body', reportProgress: boolean = false): Observable<any> {



        let headers = this.defaultHeaders;


        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}` + CourseModuleConfig._GradingTerms_Print_Template,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }
    
        /**
     * Method to get All Grading terms based on Board Id 
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public gradingTermConfigurationGradingTermsByStaffGet(id?: number, observe?: 'body', reportProgress?: boolean): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('Id', <any>id);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/GradingTermConfiguration/grading-terms-by-staff`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }
}
