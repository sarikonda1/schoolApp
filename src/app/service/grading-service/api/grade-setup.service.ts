/**
 * BaseWebAPI
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import {
    HttpClient, HttpHeaders, HttpParams,
    HttpResponse, HttpEvent
} from '@angular/common/http';

import { Observable } from 'rxjs/Observable';

import { AcademicGradeView } from '../../../models/grading/academic-grade-view';
import { GradeConfigurationView } from '../../../models/grading/grade-configuration-view';
import { Configuration, BASE_PATH, AssessmentGradeView, AssessmentGradeConfigurationView } from '.';
import { CustomHttpUrlEncodingCodec } from '../../base/encoder';
import { BaseUrlConfig, ModuleConfig, CourseModuleConfig } from '../../../url.config';
import { CommonComponent } from '../../../shared/common/common.component';


@Injectable()
export class GradeSetupService {

    protected basePath = BaseUrlConfig.BasePath + ModuleConfig.Course;
    // protected basePath = 'http://localhost:8012';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient,
        private commonComponent: CommonComponent, @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }

    /**
    * Delete AcademicGrades By Id Grade Id
    * 
    * @param id 
    * @param schoolId SchoolId in Encrypted Form
    * @param instituteId InstituteId in Encrypted Form
    * @param userId UserId in Encrypted Form
    * @param academicSessionId AcademicSessionId in Encrypted Form 
    * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
    * @param reportProgress flag to report request and response progress.
    */
    public deleteAcademicGrades(id: string, schoolId?: string, instituteId?: string, userId?: string,
        academicSessionId?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteAcademicGrades(id: string, schoolId?: string, instituteId?: string, userId?: string,
        academicSessionId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteAcademicGrades(id: string, schoolId?: string, instituteId?: string, userId?: string,
        academicSessionId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteAcademicGrades(id: string, schoolId?: string, instituteId?: string, userId?: string,
        academicSessionId?: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteAcademicGrades.');
        }

        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('Id', <any>id);
        }

        let headers = this.defaultHeaders;

        if (schoolId !== undefined && schoolId !== null) {
            headers = headers.set('SchoolId', String(schoolId));
        }
        if (instituteId !== undefined && instituteId !== null) {
            headers = headers.set('InstituteId', String(instituteId));
        }
        if (userId !== undefined && userId !== null) {
            headers = headers.set('UserId', String(userId));
        }
        if (academicSessionId !== undefined && academicSessionId !== null) {
            headers = headers.set('AcademicSessionId', String(academicSessionId));
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}` + CourseModuleConfig._GradeSetup_academicgrades,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get AcademicGrades By Academic Session Id
     * 
     * @param gradeIndicator Gets or sets GradeIndicator
     * @param highMark Gets or sets HighMark
     * @param lowMark Gets or sets LowMark
     * @param evaluation Gets or sets Evaluation
     * @param classId Gets or sets ClassId
     * @param sectionId Gets or sets SectionId
     * @param schoolBoardId Gets or sets SchoolBoardId
     * @param sortBy Gets or Sets SortBy
     * @param sortOrder Gets or Sets SortOrder
     * @param pageNumber 
     * @param pageSize 
     * @param schoolId SchoolId in Encrypted Form
     * @param instituteId InstituteId in Encrypted Form
     * @param userId UserId in Encrypted Form
     * @param academicSessionId AcademicSessionId in Encrypted Form 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public academicGrades(gradeIndicator?: Array<string>, highMark?: Array<number>, lowMark?: Array<number>,
        evaluation?: Array<string>, classId?: Array<string>, sectionId?: Array<string>, schoolBoardId?: Array<string>,
        sortBy?: string, sortOrder?: 0 | 1 | -1, pageNumber?: number, pageSize?: number, schoolId?: string, instituteId?: string,
        userId?: string, academicSessionId?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public academicGrades(gradeIndicator?: Array<string>, highMark?: Array<number>, lowMark?: Array<number>,
        evaluation?: Array<string>, classId?: Array<string>, sectionId?: Array<string>, schoolBoardId?: Array<string>,
        sortBy?: string, sortOrder?: 0 | 1 | -1, pageNumber?: number, pageSize?: number, schoolId?: string, instituteId?: string,
        userId?: string, academicSessionId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public academicGrades(gradeIndicator?: Array<string>, highMark?: Array<number>, lowMark?: Array<number>,
        evaluation?: Array<string>, classId?: Array<string>, sectionId?: Array<string>, schoolBoardId?: Array<string>,
        sortBy?: string, sortOrder?: 0 | 1 | -1, pageNumber?: number, pageSize?: number, schoolId?: string, instituteId?: string,
        userId?: string, academicSessionId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public academicGrades(gradeIndicator?: Array<string>, highMark?: Array<number>, lowMark?: Array<number>,
        evaluation?: Array<string>, classId?: Array<string>, sectionId?: Array<string>, schoolBoardId?: Array<string>,
        sortBy?: string, sortOrder?: 0 | 1 | -1, pageNumber?: number, pageSize?: number, schoolId?: string, instituteId?: string,
        userId?: string, academicSessionId?: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });

        queryParameters = this.commonComponent.setQueryParams(gradeIndicator, 'GradeIndicator', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(highMark, 'HighMark', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(lowMark, 'LowMark', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(evaluation, 'Evaluation', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(classId, 'ClassId', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(sectionId, 'SectionId', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(schoolBoardId, 'SchoolBoardId', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(sortBy, 'SortBy', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(sortOrder, 'SortOrder', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(pageNumber, 'PageNumber', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(pageSize, 'PageSize', queryParameters);

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return this.httpClient.get<any>(`${this.basePath}` + CourseModuleConfig._GradeSetup_academicgrades,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
    * Get AcademicGrades By Grade Id
    * 
    * @param id 
    * @param schoolId SchoolId in Encrypted Form
    * @param instituteId InstituteId in Encrypted Form
    * @param userId UserId in Encrypted Form
    * @param academicSessionId AcademicSessionId in Encrypted Form 
    * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
    * @param reportProgress flag to report request and response progress.
    */
    public academicGradesById(id: string, schoolId?: string, instituteId?: string, userId?: string, academicSessionId?: string,
        observe?: 'body', reportProgress?: boolean): Observable<any>;
    public academicGradesById(id: string, schoolId?: string, instituteId?: string, userId?: string, academicSessionId?: string,
        observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public academicGradesById(id: string, schoolId?: string, instituteId?: string, userId?: string, academicSessionId?: string,
        observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public academicGradesById(id: string, schoolId?: string, instituteId?: string, userId?: string, academicSessionId?: string,
        observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling academicGradesById.');
        }

        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('Id', <any>id);
        }

        let headers = this.defaultHeaders;
        if (schoolId !== undefined && schoolId !== null) {
            headers = headers.set('SchoolId', String(schoolId));
        }
        if (instituteId !== undefined && instituteId !== null) {
            headers = headers.set('InstituteId', String(instituteId));
        }
        if (userId !== undefined && userId !== null) {
            headers = headers.set('UserId', String(userId));
        }
        if (academicSessionId !== undefined && academicSessionId !== null) {
            headers = headers.set('AcademicSessionId', String(academicSessionId));
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}` + CourseModuleConfig._GradeSetup_academicgradesbyid,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * To store the AcademicGrades data to class and section
     * 
     * @param gradeConfiguration 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createAcademicGrades(gradeConfiguration?: GradeConfigurationView, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public createAcademicGrades(gradeConfiguration?: GradeConfigurationView, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public createAcademicGrades(gradeConfiguration?: GradeConfigurationView, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public createAcademicGrades(gradeConfiguration?: GradeConfigurationView, observe: any = 'body', reportProgress: boolean = false): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        return this.httpClient.post<any>(`${this.basePath}` + CourseModuleConfig._GradeSetup_academicgrades,
            gradeConfiguration,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get List of SchoolAcademicClassSections based on AcademicId,BoardId(Nullable) and ClassId
     * 
     * @param schoolBoardId Gets or sets School Board ID
     * @param classId Gets or sets ClassId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public schoolAcademicClassSections(schoolBoardId?: number, classId?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public schoolAcademicClassSections(schoolBoardId?: number, classId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public schoolAcademicClassSections(schoolBoardId?: number, classId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public schoolAcademicClassSections(schoolBoardId?: number, classId?: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (schoolBoardId !== undefined && schoolBoardId !== null) {
            queryParameters = queryParameters.set('SchoolBoardId', <any>schoolBoardId);
        }
        if (classId !== undefined && classId !== null) {
            queryParameters = queryParameters.set('ClassId', <any>classId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return this.httpClient.get<any>(`${this.basePath}` + CourseModuleConfig._GradeSetup_schoolacademicclasssections,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get List of SchoolAcademicClasses based on AcademicId and BoardId(Nullable)
     * 
     * @param schoolBoardId Gets or sets School Board ID
     * @param classId Gets or sets ClassId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public schoolAcademicClasses(schoolBoardId?: number, classId?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public schoolAcademicClasses(schoolBoardId?: number, classId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public schoolAcademicClasses(schoolBoardId?: number, classId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public schoolAcademicClasses(schoolBoardId?: number, classId?: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {



        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (schoolBoardId !== undefined && schoolBoardId !== null) {
            queryParameters = queryParameters.set('SchoolBoardId', <any>schoolBoardId);
        }
        if (classId !== undefined && classId !== null) {
            queryParameters = queryParameters.set('ClassId', <any>classId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return this.httpClient.get<any>(`${this.basePath}` + CourseModuleConfig._GradeSetup_schoolacademicclasses,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }


    /**
     * Get List of School Boards Based On SchoolId from Token
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public schoolBoards(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public schoolBoards(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public schoolBoards(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public schoolBoards(observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return this.httpClient.get<any>(`${this.basePath}` + CourseModuleConfig._GradeSetup_schoolBoards,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get List of School Boards Based On SchoolAcademicSessionId from Token
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public schoolAcademicBoards(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public schoolAcademicBoards(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public schoolAcademicBoards(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public schoolAcademicBoards(observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}` + CourseModuleConfig._GradeSetup_school_Academic_Boards,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * To Update the AcademicGrades data of clasAssessmentGradesComponent and section
     * 
     * @param academicGradeView 
     * @param observe set whether or not to retuAssessmentGradesComponentn the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateAcademicGrades(academicGradeView?: AcademicGradeView, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateAcademicGrades(academicGradeView?: AcademicGradeView, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateAcademicGrades(academicGradeView?: AcademicGradeView, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateAcademicGrades(academicGradeView?: AcademicGradeView, observe: any = 'body', reportProgress: boolean = false): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        return this.httpClient.put<any>(`${this.basePath}` + CourseModuleConfig._GradeSetup_academicgrades,
            academicGradeView,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
       * Get All Assessment Grades
       * 
       * @param gradeIndicator Gets or sets GradeIndicator
       * @param evaluation Gets or sets Evaluation
       * @param sortBy Gets or Sets SortBy
       * @param sortOrder Gets or Sets SortOrder
       * @param pageNumber 
       * @param pageSize 
       * @param schoolId SchoolId in Encrypted Form
       * @param instituteId InstituteId in Encrypted Form
       * @param userId UserId in Encrypted Form
       * @param academicSessionId AcademicSessionId in Encrypted Form 
       * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
       * @param reportProgress flag to report request and response progress.
       */
    public assessmentGrades(gradeIndicator?: Array<string>, evaluation?: Array<string>,
        sortBy?: string, sortOrder?: 0 | 1 | -1, pageNumber?: number, pageSize?: number, schoolId?: string,
        instituteId?: string, userId?: string, academicSessionId?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public assessmentGrades(gradeIndicator?: Array<string>, evaluation?: Array<string>,
        sortBy?: string, sortOrder?: 0 | 1 | -1, pageNumber?: number, pageSize?: number, schoolId?: string,
        instituteId?: string, userId?: string, academicSessionId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public assessmentGrades(gradeIndicator?: Array<string>, evaluation?: Array<string>,
        sortBy?: string, sortOrder?: 0 | 1 | -1, pageNumber?: number, pageSize?: number, schoolId?: string,
        instituteId?: string, userId?: string, academicSessionId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public assessmentGrades(gradeIndicator?: Array<string>, evaluation?: Array<string>,
        sortBy?: string, sortOrder?: 0 | 1 | -1, pageNumber?: number, pageSize?: number, schoolId?: string,
        instituteId?: string, userId?: string, academicSessionId?: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        queryParameters = this.commonComponent.setQueryParams(gradeIndicator, 'GradeIndicator', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(evaluation, 'Evaluation', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(sortBy, 'SortBy', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(sortOrder, 'SortOrder', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(pageNumber, 'PageNumber', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(pageSize, 'PageSize', queryParameters);
        let headers = this.defaultHeaders;

        if (schoolId !== undefined && schoolId !== null) {
            headers = headers.set('SchoolId', String(schoolId));
        }
        if (instituteId !== undefined && instituteId !== null) {
            headers = headers.set('InstituteId', String(instituteId));
        }
        if (userId !== undefined && userId !== null) {
            headers = headers.set('UserId', String(userId));
        }
        if (academicSessionId !== undefined && academicSessionId !== null) {
            headers = headers.set('AcademicSessionId', String(academicSessionId));
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return this.httpClient.get<any>(`${this.basePath}` + CourseModuleConfig._GradeSetup_assessmentgrades,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get AssessmentGrades By Id
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public assessmentGradesById(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public assessmentGradesById(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public assessmentGradesById(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public assessmentGradesById(id: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling assessmentGradesById.');
        }

        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('Id', <any>id);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}` + CourseModuleConfig._GradeSetup_assessmentgradesbyid,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
    * To store the CreateAssessmentGrades data
    * 
    * @param assessmentGradeView 
    * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
    * @param reportProgress flag to report request and response progress.
    */
    public createAssessmentGrades(assessmentGradeView?: AssessmentGradeView, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public createAssessmentGrades(assessmentGradeView?: AssessmentGradeView, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public createAssessmentGrades(assessmentGradeView?: AssessmentGradeView, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public createAssessmentGrades(assessmentGradeView?: AssessmentGradeView, observe: any = 'body', reportProgress: boolean = false): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}` + CourseModuleConfig._GradeSetup_assessmentgrades,
            assessmentGradeView,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
    * Delete AssessmentGrades By Id
    * 
    * @param id 
    * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
    * @param reportProgress flag to report request and response progress.
    */
    public deleteAssessmentGrades(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteAssessmentGrades(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteAssessmentGrades(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteAssessmentGrades(id: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteAssessmentGrades.');
        }

        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('Id', <any>id);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}` + CourseModuleConfig._GradeSetup_assessmentgrades,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
    * To Update AssessmentGrades data
    * 
    * @param assessmentGradeConfigurationView 
    * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
    * @param reportProgress flag to report request and response progress.
    */
    public updateAssessmentGrades(assessmentGradeConfigurationView?: AssessmentGradeConfigurationView, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateAssessmentGrades(assessmentGradeConfigurationView?: AssessmentGradeConfigurationView,
        observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateAssessmentGrades(assessmentGradeConfigurationView?: AssessmentGradeConfigurationView, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateAssessmentGrades(assessmentGradeConfigurationView?: AssessmentGradeConfigurationView, observe: any = 'body', reportProgress: boolean = false): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}` + CourseModuleConfig._GradeSetup_assessmentgrades,
            assessmentGradeConfigurationView,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
