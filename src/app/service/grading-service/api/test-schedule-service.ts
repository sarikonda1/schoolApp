/**
 * BaseWebAPI
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import {
    HttpClient, HttpHeaders, HttpParams,
    HttpResponse, HttpEvent
} from '@angular/common/http';

import { Observable } from 'rxjs/Observable';

import { AcademicGradeView } from '../../../models/grading/academic-grade-view';
import { GradeConfigurationView } from '../../../models/grading/grade-configuration-view';
import { Configuration, BASE_PATH } from '.';
import { CustomHttpUrlEncodingCodec } from '../../base/encoder';
import { BaseUrlConfig, ModuleConfig, BaseModuleConfig } from '../../../url.config';
import { CommonComponent } from '../../../shared/common/common.component';
import { TestView } from 'app/modules/academics/grading/models/test-view';
import { TestDataView } from 'app/modules/academics/grading/models/test-data-view';


@Injectable()
export class TestScheduleService {

    protected basePath = BaseUrlConfig.BasePath + ModuleConfig.Base;
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration,
        private commonComponent: CommonComponent) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Method to get All Test Schedules based on SchoolAcademicSessionId,school board id
     * 
     * @param sortBy Gets or Sets of SortBy
     * @param sortOrder Gets or Sets of SortOrder
     * @param terms Gets or Sets of Terms
     * @param testTypes Gets or Sets of TestTypes
     * @param testNames Gets or Sets of TestNames
     * @param testStartDatesBegin Gets or Sets of TestStartDatesBegin
     * @param testStartDatesEnd Gets or Sets of TestStartDatesEnd
     * @param testEndDateBegin Gets or Sets of TestEndDateBegin
     * @param testEndDateEnd Gets or Sets of TestEndDateEnd
     * @param isPostToCalendar Gets or Sets of IsPostToCalendar
     * @param classes Gets or Sets of Classes
     * @param sections Gets or Sets of Sections
     * @param statuses Gets or Sets of Statuses
     * @param courses Gets or Sets of Courses
     * @param testScheduleDateBegin Gets or Sets of TestScheduleDateBegin
     * @param testScheduleDateEnd Gets or Sets of TestScheduleDateEnd
     * @param pageNumber 
     * @param pageSize 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllTestSchedules(sortBy?: string, sortOrder?: 0 | 1 | -1, terms?: Array<string>, testTypes?: Array<string>,
        testNames?: Array<string>, testStartDatesBegin?: string, testStartDatesEnd?: string, testEndDateBegin?: string, testEndDateEnd?: string,
        isPostToCalendar?: Array<string>, classes?: Array<string>, sections?: Array<string>, statuses?: Array<string>, courses?: Array<string>,
        testScheduleDateBegin?: string, testScheduleDateEnd?: string, pageNumber?: number, pageSize?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getAllTestSchedules(sortBy?: string, sortOrder?: 0 | 1 | -1, terms?: Array<string>, testTypes?: Array<string>, testNames?: Array<string>,
        testStartDatesBegin?: string, testStartDatesEnd?: string, testEndDateBegin?: string, testEndDateEnd?: string, isPostToCalendar?: Array<string>, classes?: Array<string>,
        sections?: Array<string>, statuses?: Array<string>, courses?: Array<string>, testScheduleDateBegin?: string, testScheduleDateEnd?: string, pageNumber?: number,
        pageSize?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getAllTestSchedules(sortBy?: string, sortOrder?: 0 | 1 | -1, terms?: Array<string>, testTypes?: Array<string>, testNames?: Array<string>,
        testStartDatesBegin?: string, testStartDatesEnd?: string, testEndDateBegin?: string, testEndDateEnd?: string, isPostToCalendar?: Array<string>,
        classes?: Array<string>, sections?: Array<string>, statuses?: Array<string>, courses?: Array<string>, testScheduleDateBegin?: string,
        testScheduleDateEnd?: string, pageNumber?: number, pageSize?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getAllTestSchedules(sortBy?: string, sortOrder?: 0 | 1 | -1, terms?: Array<string>, testTypes?: Array<string>,
        testNames?: Array<string>, testStartDatesBegin?: string, testStartDatesEnd?: string, testEndDateBegin?: string, testEndDateEnd?: string, isPostToCalendar?: Array<string>,
        classes?: Array<string>, sections?: Array<string>, statuses?: Array<string>, courses?: Array<string>, testScheduleDateBegin?: string, testScheduleDateEnd?: string,
        pageNumber?: number, pageSize?: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });

        queryParameters = this.commonComponent.setQueryParams(terms, 'Terms', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(testTypes, 'TestTypes', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(testNames, 'TestNames', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(testStartDatesBegin, 'TestStartDatesBegin', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(testStartDatesEnd, 'TestStartDatesEnd', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(testEndDateBegin, 'TestEndDateBegin', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(testEndDateEnd, 'TestEndDateEnd', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(isPostToCalendar, 'IsPostToCalendar', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(classes, 'Classes', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(sections, 'Sections', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(courses, 'Courses', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(statuses, 'Statuses', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(testScheduleDateBegin, 'TestScheduleDateBegin', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(testScheduleDateEnd, 'TestScheduleDateEnd', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(sortBy, 'SortBy', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(sortOrder, 'SortOrder', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(pageNumber, 'PageNumber', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(pageSize, 'PageSize', queryParameters);

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/TestSchedule/test-schedules`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }


    /**
 * Method to get All Test Schedules based on SchoolAcademicSessionId,school board id
 * 
 * @param sortBy Gets or Sets of SortBy
 * @param sortOrder Gets or Sets of SortOrder
 * @param testId Gets or Sets of TestId
 * @param classes Gets or Sets of Classes
 * @param sections Gets or Sets of Sections
 * @param statuses Gets or Sets of Statuses
 * @param courses Gets or Sets of Courses
 * @param testScheduleDateBegin Gets or Sets of TestScheduleDateBegin
 * @param testScheduleDateEnd Gets or Sets of TestScheduleDateEnd
 * @param pageNumber 
 * @param pageSize 
 * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
 * @param reportProgress flag to report request and response progress.
 */
    public getAllTestClassSections(sortBy?: string, sortOrder?: 0 | 1 | -1, testId?: string, classes?: Array<string>, sections?: Array<string>,
        statuses?: Array<string>, courses?: Array<string>, testScheduleDateBegin?: string, testScheduleDateEnd?: string, pageNumber?: number,
        pageSize?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getAllTestClassSections(sortBy?: string, sortOrder?: 0 | 1 | -1, testId?: string, classes?: Array<string>, sections?: Array<string>,
        statuses?: Array<string>, courses?: Array<string>, testScheduleDateBegin?: string, testScheduleDateEnd?: string, pageNumber?: number,
        pageSize?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getAllTestClassSections(sortBy?: string, sortOrder?: 0 | 1 | -1, testId?: string, classes?: Array<string>, sections?: Array<string>,
        statuses?: Array<string>, courses?: Array<string>, testScheduleDateBegin?: string, testScheduleDateEnd?: string, pageNumber?: number,
        pageSize?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getAllTestClassSections(sortBy?: string, sortOrder?: 0 | 1 | -1, testId?: string, classes?: Array<string>, sections?: Array<string>,
        statuses?: Array<string>, courses?: Array<string>, testScheduleDateBegin?: string, testScheduleDateEnd?: string, pageNumber?: number,
        pageSize?: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });

        queryParameters = this.commonComponent.setQueryParams(testId, 'TestId', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(classes, 'Classes', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(sections, 'Sections', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(courses, 'Courses', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(statuses, 'Statuses', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(testScheduleDateBegin, 'TestScheduleDateBegin', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(testScheduleDateEnd, 'TestScheduleDateEnd', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(sortBy, 'SortBy', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(sortOrder, 'SortOrder', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(pageNumber, 'PageNumber', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(pageSize, 'PageSize', queryParameters);

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/TestSchedule/test-class-sections`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Method to get All Test Schedules based on SchoolAcademicSessionId,school board id
     * 
     * @param id 
     * @param isFromCompleteAction gets and sets
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public completeOrCancelSchedule(id: string, isFromCompleteAction?: boolean, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public completeOrCancelSchedule(id: string, isFromCompleteAction?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public completeOrCancelSchedule(id: string, isFromCompleteAction?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public completeOrCancelSchedule(id: string, isFromCompleteAction?: boolean, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (isFromCompleteAction !== undefined && isFromCompleteAction !== null) {
            queryParameters = queryParameters.set('isFromCompleteAction', <any>isFromCompleteAction);
        }
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('Id', <any>id);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.put<any>(`${this.basePath}/TestSchedule/test-class-sections`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }
    /**
       * Create Test and TestSchedule
       * 
       * @param testView 
       * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
       * @param reportProgress flag to report request and response progress.
       */
    public createTest(testView?: TestView, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public createTest(testView?: TestView, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public createTest(testView?: TestView, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public createTest(testView?: TestView, observe: any = 'body', reportProgress: boolean = false): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/TestSchedule/create-test-and-schedule`,
            testView,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Method to get All Sections Details based on SchoolAcademicSessionId,school board id
     * 
     * @param schoolBoardId Gets or sets School Board ID
     * @param classId Gets or sets ClassId
     * @param gardingTermId flag to report request and response progress.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllDetails(schoolBoardId: number, classId: number, gardingTermId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getAllDetails(schoolBoardId: number, classId: number, gardingTermId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getAllDetails(schoolBoardId: number, classId: number, gardingTermId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getAllDetails(schoolBoardId: number, classId: number, gardingTermId: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {



        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (schoolBoardId !== undefined && schoolBoardId !== null) {
            queryParameters = queryParameters.set('SchoolBoardId', <any>schoolBoardId);
        }
        if (classId !== undefined && classId !== null) {
            queryParameters = queryParameters.set('ClassId', <any>classId);
        }
        if (gardingTermId !== undefined && gardingTermId !== null) {
            queryParameters = queryParameters.set('GradingTermId', <any>gardingTermId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/TestSchedule/academic-sections`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * get Test details By TestId
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getByTest(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getByTest(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getByTest(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getByTest(id: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getByTest.');
        }

        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('Id', <any>id);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/TestSchedule/get-by-testId`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Create Test and TestSchedule
     * 
     * @param testDataView 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateTest(testDataView?: TestDataView, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateTest(testDataView?: TestDataView, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateTest(testDataView?: TestDataView, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateTest(testDataView?: TestDataView, observe: any = 'body', reportProgress: boolean = false): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}/TestSchedule/update-test-and-testSchedule`,
            testDataView,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Method to get All Test Schedules
     *
     * @param authorization access token
     * @param sortBy Gets or Sets of SortBy
     * @param sortOrder Gets or Sets of SortOrder
     * @param terms Gets or Sets of Terms
     * @param boards Gets or Sets of Terms     * 
     * @param testTypes Gets or Sets of TestTypes
     * @param testNames Gets or Sets of TestNames
     * @param testStartDatesBegin Gets or Sets of TestStartDatesBegin
     * @param testStartDatesEnd Gets or Sets of TestStartDatesEnd
     * @param testEndDateBegin Gets or Sets of TestEndDateBegin
     * @param testEndDateEnd Gets or Sets of TestEndDateEnd
     * @param isPostToCalendar Gets or Sets of IsPostToCalendar
     * @param classes Gets or Sets of Classes
     * @param sections Gets or Sets of Sections
     * @param statuses Gets or Sets of Statuses
     * @param courses Gets or Sets of Courses
     * @param testScheduleDateBegin Gets or Sets of TestScheduleDateBegin
     * @param testScheduleDateEnd Gets or Sets of TestScheduleDateEnd
     * @param pageNumber
     * @param pageSize
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */

    public getTestSchedules(sortBy?: string, sortOrder?: 0 | 1 | -1,
                            terms?: Array<string>, boards?: Array<string>, testTypes?: Array<string>, testNames?: Array<string>,
                            testStartDatesBegin?: string, testStartDatesEnd?: string, testEndDateBegin?: string, testEndDateEnd?: string,
                            isPostToCalendar?: Array<string>, classes?: Array<string>, sections?: Array<string>,
                            statuses?: Array<string>, courses?: Array<string>, testScheduleDateBegin?: string,
                            testScheduleDateEnd?: string, pageNumber?: number, pageSize?: number, observe: any = 'body',
                            reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sortBy !== undefined && sortBy !== null) {
            queryParameters = queryParameters.set('SortBy', <any>sortBy);
        }
        if (sortOrder !== undefined && sortOrder !== null) {
            queryParameters = queryParameters.set('SortOrder', <any>sortOrder);
        }
        if (terms) {
            terms.forEach((element) => {
                queryParameters = queryParameters.append('Terms', <any>element);
            });
        }
        if (boards) {
            boards.forEach((element) => {
                queryParameters = queryParameters.append('Boards', <any>element);
            });
        }
        if (testTypes) {
            testTypes.forEach((element) => {
                queryParameters = queryParameters.append('TestTypes', <any>element);
            });
        }
        if (testNames) {
            testNames.forEach((element) => {
                queryParameters = queryParameters.append('TestNames', <any>element);
            });
        }
        if (testStartDatesBegin !== undefined && testStartDatesBegin !== null) {
            queryParameters = queryParameters.set('TestStartDatesBegin', <any>testStartDatesBegin);
        }
        if (testStartDatesEnd !== undefined && testStartDatesEnd !== null) {
            queryParameters = queryParameters.set('TestStartDatesEnd', <any>testStartDatesEnd);
        }
        if (testEndDateBegin !== undefined && testEndDateBegin !== null) {
            queryParameters = queryParameters.set('TestEndDateBegin', <any>testEndDateBegin);
        }
        if (testEndDateEnd !== undefined && testEndDateEnd !== null) {
            queryParameters = queryParameters.set('TestEndDateEnd', <any>testEndDateEnd);
        }
        if (isPostToCalendar) {
            isPostToCalendar.forEach((element) => {
                queryParameters = queryParameters.append('IsPostToCalendar', <any>element);
            });
        }
        if (classes) {
            classes.forEach((element) => {
                queryParameters = queryParameters.append('Classes', <any>element);
            });
        }
        if (sections) {
            sections.forEach((element) => {
                queryParameters = queryParameters.append('Sections', <any>element);
            });
        }
        if (statuses) {
            statuses.forEach((element) => {
                queryParameters = queryParameters.append('Statuses', <any>element);
            });
        }
        if (courses) {
            courses.forEach((element) => {
                queryParameters = queryParameters.append('Courses', <any>element);
            });
        }
        if (testScheduleDateBegin !== undefined && testScheduleDateBegin !== null) {
            queryParameters = queryParameters.set('TestScheduleDateBegin', <any>testScheduleDateBegin);
        }
        if (testScheduleDateEnd !== undefined && testScheduleDateEnd !== null) {
            queryParameters = queryParameters.set('TestScheduleDateEnd', <any>testScheduleDateEnd);
        }
        if (pageNumber !== undefined && pageNumber !== null) {
            queryParameters = queryParameters.set('PageNumber', <any>pageNumber);
        }
        if (pageSize !== undefined && pageSize !== null) {
            queryParameters = queryParameters.set('PageSize', <any>pageSize);
        }

        let headers = this.defaultHeaders;


        // to determine the Accept header
        const httpHeaderAccepts: string[] = [];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/TestSchedule/all-test-schedules`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}

