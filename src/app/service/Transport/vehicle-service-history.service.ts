/**
 * Transport
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent } from '@angular/common/http';
import { Observable } from 'rxjs/Observable';

import { Configuration, BASE_PATH } from '../grading-service';
import { CustomHttpUrlEncodingCodec } from '../base/encoder';
import { ServiceVehicleView } from '../../modules/transportation/models/service-vehicle-view';
import { VehicleServiceView } from '../../modules/transportation/models/vehicle-service-view';
import { CommonComponent } from 'app/shared/common/common.component';
import { BaseUrlConfig, ModuleConfig, TransportModuleConfig } from 'app/url.config';




@Injectable()
export class VehicleServiceHistroyService {

    protected basePath = BaseUrlConfig.BasePath + ModuleConfig.Transport;
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(private commonComponent: CommonComponent,
        protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
       if (basePath) {
           this.basePath = basePath;
       }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * create vehicle service history for school
     * 
     * @param authorization access token
     * @param vehicleServiceView 
     * @param schoolId SchoolId in Encrypted Form
     * @param instituteId InstituteId in Encrypted Form
     * @param userId UserId in Encrypted Form
     * @param academicSessionId AcademicSessionId in Encrypted Form 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createVehicleServiceHistory(vehicleServiceView?: VehicleServiceView, schoolId?: string, instituteId?: string, 
        userId?: string, academicSessionId?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public createVehicleServiceHistory(vehicleServiceView?: VehicleServiceView, schoolId?: string, instituteId?: string,
         userId?: string, academicSessionId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public createVehicleServiceHistory(vehicleServiceView?: VehicleServiceView, schoolId?: string, instituteId?: string, 
        userId?: string, academicSessionId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public createVehicleServiceHistory(vehicleServiceView?: VehicleServiceView, schoolId?: string, instituteId?: string,
         userId?: string, academicSessionId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

    
        let headers = this.defaultHeaders;
        if (schoolId !== undefined && schoolId !== null) {
            headers = headers.set('SchoolId', String(schoolId));
        }
        if (instituteId !== undefined && instituteId !== null) {
            headers = headers.set('InstituteId', String(instituteId));
        }
        if (userId !== undefined && userId !== null) {
            headers = headers.set('UserId', String(userId));
        }
        if (academicSessionId !== undefined && academicSessionId !== null) {
            headers = headers.set('AcademicSessionId', String(academicSessionId));
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}` + TransportModuleConfig._VehicleServiceHistroy_Create,
            vehicleServiceView,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete vehicle service
     * 
     * @param authorization access token
     * @param id 
     * @param schoolId SchoolId in Encrypted Form
     * @param instituteId InstituteId in Encrypted Form
     * @param userId UserId in Encrypted Form
     * @param academicSessionId AcademicSessionId in Encrypted Form 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteVehicleService(id?: string, schoolId?: string, instituteId?: string, userId?: string, academicSessionId?: string,
         observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteVehicleService(id?: string, schoolId?: string, instituteId?: string, userId?: string, academicSessionId?: string,
         observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteVehicleService(id?: string, schoolId?: string, instituteId?: string, userId?: string, academicSessionId?: string,
         observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteVehicleService(id?: string, schoolId?: string, instituteId?: string, userId?: string, academicSessionId?: string,
         observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('Id', <any>id);
        }

        let headers = this.defaultHeaders;
      
        if (schoolId !== undefined && schoolId !== null) {
            headers = headers.set('SchoolId', String(schoolId));
        }
        if (instituteId !== undefined && instituteId !== null) {
            headers = headers.set('InstituteId', String(instituteId));
        }
        if (userId !== undefined && userId !== null) {
            headers = headers.set('UserId', String(userId));
        }
        if (academicSessionId !== undefined && academicSessionId !== null) {
            headers = headers.set('AcademicSessionId', String(academicSessionId));
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}` + TransportModuleConfig._VehicleServiceHistroy_Delete,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * get all details of vehicle service history
     * 
     * @param vehicleId Gets Or Sets
     * @param vehicleNames Gets Or Sets
     * @param regNumbers Gets Or Sets
     * @param serviceDate Gets Or Sets
     * @param odometerReadingAtService Gets Or Sets
     * @param nextServiceDate Gets Or Sets
     * @param odomenterReadingNextService Gets Or Sets
     * @param additionalDetails Gets Or Sets
     * @param serviceDateBegin Gets or Sets ServiceDateBegin
     * @param serviceDateEnd Gets or Sets ServiceDateEnd
     * @param nextServiceDateBegin Gets or Sets NextServiceDateBegin
     * @param nextServiceDateEnd Gets or Sets NextServiceDateEnd
     * @param sortBy Gets or Sets SortBy
     * @param sortOrder Gets or Sets SortOrder
     * @param pageNumber 
     * @param pageSize 
     * @param schoolId SchoolId in Encrypted Form
     * @param instituteId InstituteId in Encrypted Form
     * @param userId UserId in Encrypted Form
     * @param academicSessionId AcademicSessionId in Encrypted Form 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllServiceHistory(vehicleId?: string, vehicleName?: Array<string>, registrationNumber?: Array<string>, serviceDate?: Date,
         odometerReadingAtService?: Array<string>, nextServiceDate?: Date, odomenterReadingNextService?: Array<string>,
          additionalDetails?: Array<string>,
           serviceDateBegin?: Date, serviceDateEnd?: Date, nextServiceDateBegin?: Date, nextServiceDateEnd?: Date,
            sortBy?: string, sortOrder?: 0 | 1 | -1, pageNumber?: number, pageSize?: number, 
            schoolId?: string, instituteId?: string, userId?: string, academicSessionId?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getAllServiceHistory(vehicleId?: string, vehicleName?: Array<string>,
        registrationNumber?: Array<string>, serviceDate?: Date, odometerReadingAtService?: Array<string>, nextServiceDate?: Date,
          odomenterReadingNextService?: Array<string>, additionalDetails?: Array<string>, serviceDateBegin?: Date,
           serviceDateEnd?: Date, nextServiceDateBegin?: Date, nextServiceDateEnd?: Date, sortBy?: string, sortOrder?: 0 | 1 | -1,
            pageNumber?: number, pageSize?: number, schoolId?: string, instituteId?: string, userId?: string, academicSessionId?: string, 
            observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getAllServiceHistory(vehicleId?: string, vehicleName?: Array<string>, registrationNumber?: Array<string>, serviceDate?: Date,
         odometerReadingAtService?: Array<string>, nextServiceDate?: Date, odomenterReadingNextService?: Array<string>,
          additionalDetails?: Array<string>, serviceDateBegin?: Date, serviceDateEnd?: Date, nextServiceDateBegin?: Date,
           nextServiceDateEnd?: Date, sortBy?: string, sortOrder?: 0 | 1 | -1, pageNumber?: number, pageSize?: number,
            schoolId?: string, instituteId?: string, userId?: string, academicSessionId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getAllServiceHistory(vehicleId?: string, vehicleName?: Array<string>, registrationNumber?: Array<string>, serviceDate?: Date, 
        odometerReadingAtService?: Array<string>, nextServiceDate?: Date, odomenterReadingNextService?: Array<string>, 
        additionalDetails?: Array<string>, serviceDateBegin?: Date, serviceDateEnd?: Date, nextServiceDateBegin?: Date,
         nextServiceDateEnd?: Date, sortBy?: string, sortOrder?: 0 | 1 | -1, pageNumber?: number, pageSize?: number, 
         schoolId?: string, instituteId?: string, userId?: string, academicSessionId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});

        queryParameters = this.commonComponent.setQueryParams(vehicleId, 'VehicleId', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(vehicleName, 'VehicleName', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(registrationNumber, 'RegistrationNumber', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(serviceDate, 'ServiceDate', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(odometerReadingAtService, 'OdometerReadingAtService', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(nextServiceDate, 'NextServiceDate', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(odomenterReadingNextService, 'OdomenterReadingNextService', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(additionalDetails, 'AdditionalDetails', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(serviceDateBegin, 'ServiceDateBegin', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(serviceDateEnd, 'ServiceDateEnd', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(nextServiceDateBegin, 'NextServiceDateBegin', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(nextServiceDateEnd, 'NextServiceDateEnd', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(sortBy, 'SortBy', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(sortOrder, 'SortOrder', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(pageNumber, 'PageNumber', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(pageSize, 'PageSize', queryParameters);

        let headers = this.defaultHeaders;

        if (schoolId !== undefined && schoolId !== null) {
            headers = headers.set('SchoolId', String(schoolId));
        }
        if (instituteId !== undefined && instituteId !== null) {
            headers = headers.set('InstituteId', String(instituteId));
        }
        if (userId !== undefined && userId !== null) {
            headers = headers.set('UserId', String(userId));
        }
        if (academicSessionId !== undefined && academicSessionId !== null) {
            headers = headers.set('AcademicSessionId', String(academicSessionId));
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}` + TransportModuleConfig._VehicleServiceHistroy_All_Details,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * get vehicle service history by Id
     * 
     * @param authorization access token
     * @param id 
     * @param schoolId SchoolId in Encrypted Form
     * @param instituteId InstituteId in Encrypted Form
     * @param userId UserId in Encrypted Form
     * @param academicSessionId AcademicSessionId in Encrypted Form 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getServiceHistory(id?: string, schoolId?: string, instituteId?: string, userId?: string, academicSessionId?: string, 
        observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getServiceHistory(id?: string, schoolId?: string, instituteId?: string, userId?: string, academicSessionId?: string,
         observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getServiceHistory(id?: string, schoolId?: string, instituteId?: string, userId?: string, academicSessionId?: string,
         observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getServiceHistory( id?: string, schoolId?: string, instituteId?: string, userId?: string, academicSessionId?: string, 
        observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('Id', <any>id);
        }

        let headers = this.defaultHeaders;
        if (schoolId !== undefined && schoolId !== null) {
            headers = headers.set('SchoolId', String(schoolId));
        }
        if (instituteId !== undefined && instituteId !== null) {
            headers = headers.set('InstituteId', String(instituteId));
        }
        if (userId !== undefined && userId !== null) {
            headers = headers.set('UserId', String(userId));
        }
        if (academicSessionId !== undefined && academicSessionId !== null) {
            headers = headers.set('AcademicSessionId', String(academicSessionId));
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}` + TransportModuleConfig._VehicleServiceHistroy_Details,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * update vehicle service history based on  school
     * 
     * @param serviceVehicleView 
     * @param schoolId SchoolId in Encrypted Form
     * @param instituteId InstituteId in Encrypted Form
     * @param userId UserId in Encrypted Form
     * @param academicSessionId AcademicSessionId in Encrypted Form 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public vehicleServiceHistory(serviceVehicleView?: ServiceVehicleView, schoolId?: string, instituteId?: string, userId?: string, 
        academicSessionId?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public vehicleServiceHistory(serviceVehicleView?: ServiceVehicleView, schoolId?: string, instituteId?: string, userId?: string, 
        academicSessionId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public vehicleServiceHistory(serviceVehicleView?: ServiceVehicleView, schoolId?: string, instituteId?: string, userId?: string,
         academicSessionId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public vehicleServiceHistory(serviceVehicleView?: ServiceVehicleView, schoolId?: string, instituteId?: string, userId?: string, 
        academicSessionId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;
        if (schoolId !== undefined && schoolId !== null) {
            headers = headers.set('SchoolId', String(schoolId));
        }
        if (instituteId !== undefined && instituteId !== null) {
            headers = headers.set('InstituteId', String(instituteId));
        }
        if (userId !== undefined && userId !== null) {
            headers = headers.set('UserId', String(userId));
        }
        if (academicSessionId !== undefined && academicSessionId !== null) {
            headers = headers.set('AcademicSessionId', String(academicSessionId));
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}` + TransportModuleConfig._VehicleServiceHistroy_Update,
            serviceVehicleView,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
