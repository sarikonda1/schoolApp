/**
 * Transport
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import {
    HttpClient, HttpHeaders, HttpParams,
    HttpResponse, HttpEvent
} from '@angular/common/http';
import { Observable } from 'rxjs/Observable';
import { BaseUrlConfig, ModuleConfig, TransportModuleConfig } from 'app/url.config';
import { Configuration, BASE_PATH } from '../grading-service';
import { CustomHttpUrlEncodingCodec } from '../base/encoder';
import { CommonComponent } from 'app/shared/common/common.component';
import { VehiclePollutionUpdateView } from 'app/modules/transportation/models/vehicle-pollution-update-view';
import { VehiclePollutionDataView } from 'app/modules/transportation/models/vehicle-pollution-data-view';
import { VehicleView } from 'app/modules/transportation/models/vehicle-view';
import { VehicleDetailsView } from 'app/modules/transportation/models/vehicle-details-view';
import { VehicleInsuranceViewModel } from 'app/modules/transportation/models/vehicle-Insurance-view-model';
import { VehicleInsuranceFilterViewModel } from 'app/modules/transportation/models/vehicle-Insurance-filter-view-model';



@Injectable()
export class VehicleInventoryService {

    protected basePath = BaseUrlConfig.BasePath + ModuleConfig.Transport;
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(private commonComponent: CommonComponent,
        protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Get all Vehicles based on SchoolId
     * 
     * @param vehicleName Gets or Sets VehicleName
     * @param vehicleModel Gets or Sets VehicleModel
     * @param registrationNumber Gets or Sets RegistrationNumber
     * @param maxCapacity Gets or Sets MaxCapacity
     * @param status Gets or Sets Status
     * @param sortBy Gets or Sets SortBy
     * @param sortOrder Gets or Sets SortOrder
     * @param pageNumber 
     * @param pageSize 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllVehicles(vehicleName?: Array<string>, vehicleModel?: Array<string>, registrationNumber?: Array<string>, maxCapacity?: Array<string>,
        status?: Array<string>, sortBy?: string, sortOrder?: 0 | 1 | -1, pageNumber?: number, pageSize?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getAllVehicles(vehicleName?: Array<string>, vehicleModel?: Array<string>, registrationNumber?: Array<string>, maxCapacity?: Array<string>,
        status?: Array<string>, sortBy?: string, sortOrder?: 0 | 1 | -1, pageNumber?: number, pageSize?: number,
        observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getAllVehicles(vehicleName?: Array<string>, vehicleModel?: Array<string>, registrationNumber?: Array<string>, maxCapacity?: Array<string>,
        status?: Array<string>, sortBy?: string, sortOrder?: 0 | 1 | -1, pageNumber?: number, pageSize?: number,
        observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getAllVehicles(vehicleName?: Array<string>, vehicleModel?: Array<string>, registrationNumber?: Array<string>, maxCapacity?: Array<string>,
        status?: Array<string>, sortBy?: string, sortOrder?: 0 | 1 | -1, pageNumber?: number, pageSize?: number,
        observe: any = 'body', reportProgress: boolean = false): Observable<any> {


        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });

        queryParameters = this.commonComponent.setQueryParams(vehicleName, 'VehicleName', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(vehicleModel, 'VehicleModel', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(registrationNumber, 'RegistrationNumber', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(maxCapacity, 'MaxCapacity', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(status, 'Status', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(sortBy, 'SortBy', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(sortOrder, 'SortOrder', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(pageNumber, 'PageNumber', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(pageSize, 'PageSize', queryParameters);

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];

        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);

        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        return this.httpClient.get<any>(`${this.basePath}` + TransportModuleConfig._Transport_All_Vehicles,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
* Add Vehicle
* 
* @param vehicleView 
* @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
* @param reportProgress flag to report request and response progress.
*/

    public createVehicle(vehicleView?: VehicleView, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }


        return this.httpClient.post<any>(`${this.basePath}` + TransportModuleConfig._Vehicle_Inventory,

            vehicleView,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }
    /**
    * Get Vehicle based on SchoolId,Id
    * 
    * @param id 
    * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
    * @param reportProgress flag to report request and response progress.
    */

    public getVehicle(id: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getVehicle.');
        }

        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('Id', <any>id);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}` + TransportModuleConfig._Vehicle_Inventory,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
    * Update Vehicle
    * 
    * @param vehicleDetailsView 
    * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
    * @param reportProgress flag to report request and response progress.
    */

    public updateVehicle(vehicleDetailsView?: VehicleDetailsView, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}` + TransportModuleConfig._Vehicle_Inventory,
            vehicleDetailsView,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
   * Get all Vehicle Pollution Check History
   * 
   * @param vehicleId Gets Or Sets
   * @param pollutionCheckDateBegin Gets Or Sets
   * @param pollutionCheckDateEnd Gets Or Sets
   * @param pollutionCheckExpiryDateBegin Gets Or Sets
   * @param pollutionCheckExpiryDateEnd Gets Or Sets
   * @param sortBy Gets or Sets SortBy
   * @param sortOrder Gets or Sets SortOrder
   * @param pageNumber 
   * @param pageSize 
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
    public fetchVehiclePollutionCheckHistory(vehicleId?: string, pollutionCheckDateBegin?: Date,
        pollutionCheckDateEnd?: Date, pollutionCheckExpiryDateBegin?: Date,
        pollutionCheckExpiryDateEnd?: Date, sortBy?: string, sortOrder?: 0 | 1 | -1,
        pageNumber?: number, pageSize?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public fetchVehiclePollutionCheckHistory(vehicleId?: string, pollutionCheckDateBegin?: Date,
        pollutionCheckDateEnd?: Date, pollutionCheckExpiryDateBegin?: Date,
        pollutionCheckExpiryDateEnd?: Date, sortBy?: string, sortOrder?: 0 | 1 | -1,
        pageNumber?: number, pageSize?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public fetchVehiclePollutionCheckHistory(vehicleId?: string, pollutionCheckDateBegin?: Date,
        pollutionCheckDateEnd?: Date, pollutionCheckExpiryDateBegin?: Date,
        pollutionCheckExpiryDateEnd?: Date, sortBy?: string, sortOrder?: 0 | 1 | -1,
        pageNumber?: number, pageSize?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public fetchVehiclePollutionCheckHistory(vehicleId?: string, pollutionCheckDateBegin?: Date,
        pollutionCheckDateEnd?: Date, pollutionCheckExpiryDateBegin?: Date,
        pollutionCheckExpiryDateEnd?: Date, sortBy?: string, sortOrder?: 0 | 1 | -1,
        pageNumber?: number, pageSize?: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });

        queryParameters = this.commonComponent.setQueryParams(vehicleId, 'VehicleId', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(pollutionCheckDateBegin, 'PollutionCheckDateBegin', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(pollutionCheckDateEnd, 'PollutionCheckDateEnd', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(pollutionCheckExpiryDateBegin, 'PollutionCheckExpiryDateBegin', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(pollutionCheckExpiryDateEnd, 'PollutionCheckExpiryDateEnd', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(sortBy, 'SortBy', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(sortOrder, 'SortOrder', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(pageNumber, 'PageNumber', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(pageSize, 'PageSize', queryParameters);

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}` + TransportModuleConfig._Transport_Vehicle_Pollution_History,

            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
   * Get Vehicle Pollution Check History
   * 
   * @param authorization access token
   * @param id 
   * @param schoolId SchoolId in Encrypted Form
   * @param instituteId InstituteId in Encrypted Form
   * @param userId UserId in Encrypted Form
   * @param academicSessionId AcademicSessionId in Encrypted Form 
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
    public getVehiclePollutionCheck(id?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getVehiclePollutionCheck(id?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getVehiclePollutionCheck(id?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getVehiclePollutionCheck(id?: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {


        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('Id', <any>id);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}` + TransportModuleConfig._Transport_Vehicle_Pollution_History_By_Id,

            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
    * Update Pollution Check History
    * 
    * @param authorization access token
    * @param model 
    * @param schoolId SchoolId in Encrypted Form
    * @param instituteId InstituteId in Encrypted Form
    * @param userId UserId in Encrypted Form
    * @param academicSessionId AcademicSessionId in Encrypted Form 
    * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
    * @param reportProgress flag to report request and response progress.
    */
    public updateVehiclePollutionCheck(model?: VehiclePollutionUpdateView, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateVehiclePollutionCheck(model?: VehiclePollutionUpdateView, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateVehiclePollutionCheck(model?: VehiclePollutionUpdateView, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateVehiclePollutionCheck(model?: VehiclePollutionUpdateView, observe: any = 'body', reportProgress: boolean = false): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}` + TransportModuleConfig._Transport_Vehicle_Pollution_Check,

            model,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
    * Create Vehile Pollution Check History
    * 
    * @param authorization access token
    * @param vehiclePollutionDataView 
    * @param schoolId SchoolId in Encrypted Form
    * @param instituteId InstituteId in Encrypted Form
    * @param userId UserId in Encrypted Form
    * @param academicSessionId AcademicSessionId in Encrypted Form 
    * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
    * @param reportProgress flag to report request and response progress.
    */
    public vehilePollutionCheck(vehiclePollutionDataView?: VehiclePollutionDataView, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public vehilePollutionCheck(vehiclePollutionDataView?: VehiclePollutionDataView, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public vehilePollutionCheck(vehiclePollutionDataView?: VehiclePollutionDataView, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public vehilePollutionCheck(vehiclePollutionDataView?: VehiclePollutionDataView, observe: any = 'body', reportProgress: boolean = false): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}` + TransportModuleConfig._Transport_Vehicle_Pollution_Check,

            vehiclePollutionDataView,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete Vehicle Pollution Check History
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteVehiclePollutionCheck(id?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteVehiclePollutionCheck(id?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteVehiclePollutionCheck(id?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteVehiclePollutionCheck(id?: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('Id', <any>id);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}` + TransportModuleConfig._Transport_Vehicle_Pollution_Check,

            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
 * Vehicle Insurances list
 * @param model
 * @param pageSize 
 * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
 * @param reportProgress flag to report request and response progress.
 */

    public vehicleInsurances(model: VehicleInsuranceFilterViewModel, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public vehicleInsurances(model: VehicleInsuranceFilterViewModel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public vehicleInsurances(model: VehicleInsuranceFilterViewModel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public vehicleInsurances(model: VehicleInsuranceFilterViewModel, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });

        queryParameters = this.commonComponent.setQueryParamsWithModel(model, queryParameters);
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let headers = this.defaultHeaders;

        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        return this.httpClient.get<any>(`${this.basePath}` + TransportModuleConfig._Transport_Vehicle_Insurance_List,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
   * Update Vehicle Insurance
   * 
   * @param model 
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
    public updateVehicleInsurance(model?: VehicleInsuranceViewModel, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateVehicleInsurance(model?: VehicleInsuranceViewModel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateVehicleInsurance(model?: VehicleInsuranceViewModel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateVehicleInsurance(model?: VehicleInsuranceViewModel, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}` + TransportModuleConfig._Transport_Vehicle_Insurance,
            model,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }


    /**
     * Get Vehicle Insurance By Id
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getVehicleInsurance(id?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getVehicleInsurance(id?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getVehicleInsurance(id?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getVehicleInsurance(id?: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {


        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        let headers = this.defaultHeaders;

        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('Id', <any>id);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        return this.httpClient.get<any>(`${this.basePath}` + TransportModuleConfig._Transport_Vehicle_Insurance_By_Id,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }


    /**
     * Create Vehicle Insurances
     *
     * @param model 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createVehicleInsurances(model?: VehicleInsuranceViewModel, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public createVehicleInsurances(model?: VehicleInsuranceViewModel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public createVehicleInsurances(model?: VehicleInsuranceViewModel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public createVehicleInsurances(model?: VehicleInsuranceViewModel, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];

        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}` + TransportModuleConfig._Transport_Vehicle_Insurance,
            model,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete Vehicle Insurance
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteVehicleInsurance(id?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteVehicleInsurance(id?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteVehicleInsurance(id?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteVehicleInsurance(id?: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('Id', <any>id);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        return this.httpClient.delete<any>(`${this.basePath}` + TransportModuleConfig._Transport_Vehicle_Insurance,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }
}
