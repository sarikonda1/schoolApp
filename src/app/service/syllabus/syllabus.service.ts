/**
 * BaseWebAPI
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */
import { Inject, Injectable, Optional } from '@angular/core';
import {
    HttpClient, HttpHeaders, HttpParams,
    HttpResponse, HttpEvent
} from '@angular/common/http';

import { BASE_PATH } from '../base/variables';
import { Observable } from 'rxjs/Observable';


import { BaseUrlConfig, ModuleConfig, BaseModuleConfig } from 'app/url.config';
import { Configuration } from '../grading-service';
import { CustomHttpUrlEncodingCodec } from '../base/encoder';
import { SyllabusDataViewModel } from 'app/modules/configuration/syllabus/models/syllabus-data-view-model';
import { SyllabusViewModel } from 'app/modules/configuration/syllabus/models/syllabus-view-model';
import { SyllabusChapterView } from 'app/modules/configuration/syllabus/models/syllabus-chapter-view';
import { SyllabusCheckPointView } from 'app/modules/configuration/syllabus/models/syllabus-check-point-view';
import { SyllabusSubTopicViewModel } from 'app/modules/configuration/syllabus/models/syllabus-sub-topic-view-model';
import { SyllabusTopicsViewModel } from 'app/modules/configuration/syllabus/models/syllabus-topics-view-model';
import { SyllabusScheduleViewModel } from 'app/modules/academics/syllabus/models/syllabus-schedule-view-model';

@Injectable()
export class SchoolSyllabusService {

    protected basePath = BaseUrlConfig.BasePath + ModuleConfig.Base;
    // protected basePath = 'http://localhost:8013';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * SyllabusTopics
     * 
     * @param authorization access token
     * @param model 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addSyllabus(model?: SyllabusViewModel, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public addSyllabus(model?: SyllabusViewModel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public addSyllabus(model?: SyllabusViewModel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public addSyllabus(model?: SyllabusViewModel, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

       
        let headers = this.defaultHeaders;
        
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}` + BaseModuleConfig._Add_Syllabus,
            model,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * SyllabusTopics
     * 
     * @param authorization access token
     * @param model 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addSyllabusChapters(model?: Array<SyllabusChapterView>, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public addSyllabusChapters(model?: Array<SyllabusChapterView>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public addSyllabusChapters(model?: Array<SyllabusChapterView>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public addSyllabusChapters(model?: Array<SyllabusChapterView>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        
        let headers = this.defaultHeaders;
       

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}` + BaseModuleConfig._Add_Chapters,
            model,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * AddSyllabusCheckPoints Inclusions
     * 
     * @param authorization access token
     * @param model 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addSyllabusCheckPointInclusions(model?: SyllabusCheckPointView, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public addSyllabusCheckPointInclusions(model?: SyllabusCheckPointView, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public addSyllabusCheckPointInclusions(model?: SyllabusCheckPointView, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public addSyllabusCheckPointInclusions(model?: SyllabusCheckPointView, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

       
        let headers = this.defaultHeaders;
       
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}` + BaseModuleConfig._Syllabus_Checkpoint_Inclusions,
            model,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * AddSyllabusCheckPoints
     * 
     * @param authorization access token
     * @param model 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addSyllabusCheckPoints(model?: SyllabusCheckPointView, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public addSyllabusCheckPoints(model?: SyllabusCheckPointView, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public addSyllabusCheckPoints(model?: SyllabusCheckPointView, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public addSyllabusCheckPoints(model?: SyllabusCheckPointView, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

       
        let headers = this.defaultHeaders;
       
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}` + BaseModuleConfig._Add_Check_points,
            model,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * AddSyllabusSubTopics
     * 
     * @param authorization access token
     * @param model 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addSyllabusSubTopics(model?: Array<SyllabusSubTopicViewModel>, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public addSyllabusSubTopics(model?: Array<SyllabusSubTopicViewModel>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public addSyllabusSubTopics(model?: Array<SyllabusSubTopicViewModel>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public addSyllabusSubTopics(model?: Array<SyllabusSubTopicViewModel>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

       
        let headers = this.defaultHeaders;
       

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}` + BaseModuleConfig._Syllabus_Sub_Topics_Add,
            model,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * AddSyllabusTopics
     * 
     * @param authorization access token
     * @param model 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addSyllabusTopics(model?: Array<SyllabusTopicsViewModel>, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public addSyllabusTopics(model?: Array<SyllabusTopicsViewModel>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public addSyllabusTopics(model?: Array<SyllabusTopicsViewModel>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public addSyllabusTopics(model?: Array<SyllabusTopicsViewModel>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;
       
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}` + BaseModuleConfig._Syllabus_Topics_Add,
            model,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * board syllabus
     * 
     * @param authorization access token
     * @param boardId Board
     * @param classReferenceTypeId ClassReferenceType
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public boardSyllabus(boardId?: number, classReferenceTypeId?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public boardSyllabus(boardId?: number, classReferenceTypeId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public boardSyllabus(boardId?: number, classReferenceTypeId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public boardSyllabus(boardId?: number, classReferenceTypeId?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

       
        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (boardId !== undefined && boardId !== null) {
            queryParameters = queryParameters.set('BoardId', <any>boardId);
        }
        if (classReferenceTypeId !== undefined && classReferenceTypeId !== null) {
            queryParameters = queryParameters.set('ClassId', <any>classReferenceTypeId);
        }

        let headers = this.defaultHeaders;
       

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}` + BaseModuleConfig._Syllabus_Boards,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * CheckPointTypes
     * 
     * @param authorization access token
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public checkPointTypes(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public checkPointTypes(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public checkPointTypes(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public checkPointTypes(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;
       

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}` + BaseModuleConfig._Syllabus_CheckPoints_Types,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * DeleteSyllabusCheckPoints
     * 
     * @param authorization access token
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteSyllabusCheckPoints(id?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteSyllabusCheckPoints(id?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteSyllabusCheckPoints(id?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteSyllabusCheckPoints(id?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('Id', <any>id);
        }

        let headers = this.defaultHeaders;
      

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}` + BaseModuleConfig._Syllabus_Delete_CheckPoints,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * SyllabusChapters
     * 
     * @param authorization access token
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public syllabusChapters(id?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public syllabusChapters(id?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public syllabusChapters(id?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public syllabusChapters(id?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('Id', <any>id);
        }

        let headers = this.defaultHeaders;
       

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}` + BaseModuleConfig._Syllabus_Chapters,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Syllabus Chapters List
     * 
     * @param authorization access token
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public syllabusAllTopics(id?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public syllabusAllTopics(id?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public syllabusAllTopics(id?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public syllabusAllTopics(id?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        
        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('Id', <any>id);
        }

        let headers = this.defaultHeaders;
       

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}` + BaseModuleConfig._Syllabus_All_Topics,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * DeleteSyllabusCheckPoints
     * 
     * @param authorization access token
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public syllabusCheckPointInclusionsList(id?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public syllabusCheckPointInclusionsList(id?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public syllabusCheckPointInclusionsList(id?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public syllabusCheckPointInclusionsList(id?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

       

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('Id', <any>id);
        }

        let headers = this.defaultHeaders;
        

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}` + BaseModuleConfig._Syllabus_Inculsion_List,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Syllabus List
     * 
     * @param authorization access token
     * @param schoolBoardIds SchoolBoardIds
     * @param classIds ClassIds
     * @param courseIds CourseIds
     * @param name Name
     * @param isActive IsActive
     * @param numberOfChapters NumberOfChapters
     * @param sortBy Gets or Sets SortBy
     * @param sortOrder Gets or Sets SortOrder
     * @param pageNumber 
     * @param pageSize 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    // tslint:disable-next-line: max-line-length
    public syllabusList(schoolBoardIds?: Array<string>, classIds?: Array<string>, courseIds?: Array<string>, name?: string, isActive?: Array<string>, numberOfChapters?: string, sortBy?: string, sortOrder?: 0 | 1 | -1, pageNumber?: number, pageSize?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public syllabusList(schoolBoardIds?: Array<string>, classIds?: Array<string>, courseIds?: Array<string>, name?: string, isActive?: Array<string>, numberOfChapters?: string, sortBy?: string, sortOrder?: 0 | 1 | -1, pageNumber?: number, pageSize?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public syllabusList(schoolBoardIds?: Array<string>, classIds?: Array<string>, courseIds?: Array<string>, name?: string, isActive?: Array<string>, numberOfChapters?: string, sortBy?: string, sortOrder?: 0 | 1 | -1, pageNumber?: number, pageSize?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public syllabusList(schoolBoardIds?: Array<string>, classIds?: Array<string>, courseIds?: Array<string>, name?: string, isActive?: Array<string>, numberOfChapters?: string, sortBy?: string, sortOrder?: 0 | 1 | -1, pageNumber?: number, pageSize?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (schoolBoardIds) {
            schoolBoardIds.forEach((element) => {
                queryParameters = queryParameters.append('SchoolBoardIds', <any>element);
            });
        }
        if (classIds) {
            classIds.forEach((element) => {
                queryParameters = queryParameters.append('ClassIds', <any>element);
            });
        }
        if (courseIds) {
            courseIds.forEach((element) => {
                queryParameters = queryParameters.append('CourseIds', <any>element);
            });
        }
        if (name ) {
            queryParameters = queryParameters.set('Name', <any>name);
        }
        if (isActive) {
            isActive.forEach((element) => {
                queryParameters = queryParameters.append('IsActive', <any>element);
            });
        }
        if (numberOfChapters ) {
            queryParameters = queryParameters.set('NumberOfChapters', <any>numberOfChapters);
        }
        if (sortBy !== undefined && sortBy !== null) {
            queryParameters = queryParameters.set('SortBy', <any>sortBy);
        }
        if (sortOrder !== undefined && sortOrder !== null) {
            queryParameters = queryParameters.set('SortOrder', <any>sortOrder);
        }
        if (pageNumber !== undefined && pageNumber !== null) {
            queryParameters = queryParameters.set('PageNumber', <any>pageNumber);
        }
        if (pageSize !== undefined && pageSize !== null) {
            queryParameters = queryParameters.set('PageSize', <any>pageSize);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}` + BaseModuleConfig._Syllbus_list,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * SyllabusTopics
     * 
     * @param authorization access token
     * @param chapterId ChapterId
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public syllabusTopics(chapterId?: number, id?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public syllabusTopics(chapterId?: number, id?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public syllabusTopics(chapterId?: number, id?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public syllabusTopics(chapterId?: number, id?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

       
        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (chapterId !== undefined && chapterId !== null) {
            queryParameters = queryParameters.set('ChapterId', <any>chapterId);
        }
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('Id', <any>id);
        }

        let headers = this.defaultHeaders;
       

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}` + BaseModuleConfig._Syllabus_Topics,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * update Syllabus
     * 
     * @param authorization access token
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateSyllabus(id: string, isActive: any, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateSyllabus(id: string, isActive: any, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateSyllabus(id: string, isActive: any, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateSyllabus(id: string, isActive: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('Id', <any>id);
        }
        queryParameters = queryParameters.set('IsActive', <any>isActive);

        let headers = this.defaultHeaders;
       

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.put<any>(`${this.basePath}` + BaseModuleConfig._Inactive_Syllabus, null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }



    /**
     * SyllabusTopics
     * 
     * @param authorization access token
     * @param chapterId ChapterId
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public syllabusChapterTopics(chapterId?: number, id?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public syllabusChapterTopics(chapterId?: number, id?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public syllabusChapterTopics(chapterId?: number, id?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public syllabusChapterTopics(chapterId?: number, id?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

       
        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (chapterId !== undefined && chapterId !== null) {
            queryParameters = queryParameters.set('ChapterId', <any>chapterId);
        }
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('Id', <any>id);
        }

        let headers = this.defaultHeaders;
       

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}` + BaseModuleConfig._Syllabus_Chapter_Topics,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }


    /**
     * SyllabusTopics
     * 
     * @param authorization access token
     * @param chapterId ChapterId
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public syllabusSubTopics(id?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public syllabusSubTopics(id?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public syllabusSubTopics(id?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public syllabusSubTopics(id?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

       
        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('Id', <any>id);
        }

        let headers = this.defaultHeaders;
       

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}` + BaseModuleConfig._Syllabus_Sub_Topics_Details,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }


     /**
     * syllabusBasicDetails
     * 
     * @param authorization access token
     * @param chapterId ChapterId
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public syllabusBasicDetails(id?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public syllabusBasicDetails(id?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public syllabusBasicDetails(id?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public syllabusBasicDetails(id?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

       
        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('Id', <any>id);
        }

        let headers = this.defaultHeaders;
       

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}` + BaseModuleConfig._Syllabus_Basic_Details,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }


    /**
     * Syllabus Chapters List
     * 
     * @param id 
     * @param authorization access token
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public syllabusChaptersList(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public syllabusChaptersList(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public syllabusChaptersList(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public syllabusChaptersList(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling syllabusChaptersList.');
        }
        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('Id', <any>id);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}` + BaseModuleConfig._Syllabus_Chapters_List,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }


    

    

   

    


     /**
     * Syllabus based on SyllabusId
     * 
     * @param authorization access token
     * @param schoolBoardId SchoolBoardId
     * @param classId ClassId
     * @param courseId CourseId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSyllabusList(schoolBoardId?: number, classId?: number, courseId?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getSyllabusList(schoolBoardId?: number, classId?: number, courseId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getSyllabusList(schoolBoardId?: number, classId?: number, courseId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getSyllabusList(schoolBoardId?: number, classId?: number, courseId?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

       

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (schoolBoardId !== undefined && schoolBoardId !== null) {
            queryParameters = queryParameters.set('SchoolBoardId', <any>schoolBoardId);
        }
        if (classId !== undefined && classId !== null) {
            queryParameters = queryParameters.set('ClassId', <any>classId);
        }
        if (courseId !== undefined && courseId !== null) {
            queryParameters = queryParameters.set('CourseId', <any>courseId);
        }

        const headers = this.defaultHeaders;
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}` + BaseModuleConfig._Syllabus_Data_Schedule,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }




    /**
     * Add SyllabusSubTopics
     * 
     * @param authorization access token
     * @param model 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateSyllabusSchedule(model?: SyllabusScheduleViewModel, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateSyllabusSchedule(model?: SyllabusScheduleViewModel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateSyllabusSchedule(model?: SyllabusScheduleViewModel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateSyllabusSchedule(model?: SyllabusScheduleViewModel, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}` + BaseModuleConfig._Syllabus_Schedule_update,
            model,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }


    /**
     * Delete Syllabus Checkpoints
     * 
     * @param authorization access token
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteSyllabusCheckpoints(id?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteSyllabusCheckpoints(id?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteSyllabusCheckpoints(id?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteSyllabusCheckpoints(id?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('Id', <any>id);
        }

        let headers = this.defaultHeaders;
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}` + BaseModuleConfig._Syllabus_Delete_All_CheckPoints,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete syllabuschapters
     * 
     * @param id 
     * @param authorization access token
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteSyllabusChapters(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteSyllabusChapters(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteSyllabusChapters(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteSyllabusChapters(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteSyllabusChapters.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('Id', <any>id);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}` + BaseModuleConfig._Syllabus_Chapters_Delete,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete syllabustopics
     * 
     * @param id 
     * @param authorization access token
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteSyllabusTopics(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteSyllabusTopics(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteSyllabusTopics(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteSyllabusTopics(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteSyllabusTopics.');
        }

        
        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('Id', <any>id);
        }

        let headers = this.defaultHeaders;
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}` + BaseModuleConfig._Syllabus_Topics_Delete,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete Syllabussubtopics
     * 
     * @param id 
     * @param authorization access token
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteSyllabusSubTopics(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteSyllabusSubTopics(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteSyllabusSubTopics(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteSyllabusSubTopics(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteSyllabusSubTopics.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('Id', <any>id);
        }

        let headers = this.defaultHeaders;
       

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}` + BaseModuleConfig._Syllabus_SubTopics_Delete,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }
    /**
     * update syllabus
     * 
     * @param authorization access token
     * @param model 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateSyllabusData(model?: SyllabusDataViewModel, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateSyllabusData(model?: SyllabusDataViewModel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateSyllabusData(model?: SyllabusDataViewModel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateSyllabusData(model?: SyllabusDataViewModel, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

    
        let headers = this.defaultHeaders;
       

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}` + BaseModuleConfig._Syllabus_Update,
            model,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }
}
