/**
 * BaseWebAPI
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


import { Inject, Injectable, Optional } from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent } from '@angular/common/http';

import { Observable } from 'rxjs/Observable';
import { Configuration } from 'app/service/base/configuration';
import { BASE_PATH } from 'app/service/base/variables';
import { CustomHttpUrlEncodingCodec } from 'app/service/base/encoder';
import { BaseUrlConfig, ModuleConfig, BaseModuleConfig } from 'app/url.config';
import { PageInformationView } from '../model/page-information-view';
import { PageInformationViewModel } from '../model/page-information-view-model';
import { CommonComponent } from 'app/shared/common/common.component';

@Injectable()
export class LocalizationService {

    // protected basePath = 'http://localhost:8013';
    protected basePath = BaseUrlConfig.BasePath + ModuleConfig.Base;
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected commonComponent: CommonComponent,
                protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Create PageInformation under application
     * 
     * @param pageInformationview 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createPageinformation(pageInformationview?: PageInformationView, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public createPageinformation(pageInformationview?: PageInformationView, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public createPageinformation(pageInformationview?: PageInformationView, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public createPageinformation(pageInformationview?: PageInformationView, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}` + BaseModuleConfig._Localization_Page_Information,
            pageInformationview,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete PageInformation
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deletePageInformation(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deletePageInformation(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deletePageInformation(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deletePageInformation(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deletePageInformation.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('Id', <any>id);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}` + BaseModuleConfig._Localization_Page_Information,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Fetch Pageinformation List
     * 
     * @param key Gets or Sets Name
     * @param value Gets or Sets Name
     * @param culture Gets or Sets Name
     * @param sortBy Gets or Sets SortBy
     * @param sortOrder Gets or Sets SortOrder
     * @param pageNumber 
     * @param pageSize 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public FetchPageInformationList(key?: Array<string>,
                                    value?: Array<string>,
                                    culture?: Array<string>,
                                    sortBy?: string,
                                    sortOrder?: 0 | 1 | -1,
                                    pageNumber?: number, pageSize?: number,
                                    observe?: 'body', reportProgress?: boolean): Observable<any>;
    public FetchPageInformationList(key?: Array<string>, value?: Array<string>, culture?: Array<string>,
                                    sortBy?: string, sortOrder?: 0 | 1 | -1, pageNumber?: number, pageSize?: number,
                                    observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public FetchPageInformationList(key?: Array<string>, value?: Array<string>, culture?: Array<string>, sortBy?: string,
                                    sortOrder?: 0 | 1 | -1, pageNumber?: number, pageSize?: number,
                                    observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public FetchPageInformationList(key?: Array<string>, value?: Array<string>, culture?: Array<string>,
                                    sortBy?: string, sortOrder?: 0 | 1 | -1, pageNumber?: number, pageSize?: number,
                                    observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        
        queryParameters = this.commonComponent.setQueryParams(key, 'Key', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(value, 'Value', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(culture, 'Culture', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(sortBy, 'SortBy', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(sortOrder, 'SortOrder', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(pageNumber, 'PageNumber', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(pageSize, 'PageSize', queryParameters);

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}` + BaseModuleConfig._Localization_Page_Information,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param culture 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getJSONFile(culture?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getJSONFile(culture?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getJSONFile(culture?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getJSONFile(culture?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (culture !== undefined && culture !== null) {
            queryParameters = queryParameters.set('culture', <any>culture);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}` + BaseModuleConfig._Localization_JSON_Files,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * GetJSONFiles
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getJSONFiles(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getJSONFiles(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getJSONFiles(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getJSONFiles(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}` + BaseModuleConfig._Localization_All_Cultures_Files,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * GetPageInformationBYId
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPageInformationById(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getPageInformationById(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getPageInformationById(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getPageInformationById(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getPageInformationById.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('Id', <any>id);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}` + BaseModuleConfig._Localization_Page_Information_ById,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update PageInformation by Id
     * 
     * @param pageInformationViewModel 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updatePageInformation(pageInformationViewModel?: PageInformationViewModel, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updatePageInformation(pageInformationViewModel?: PageInformationViewModel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updatePageInformation(pageInformationViewModel?: PageInformationViewModel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updatePageInformation(pageInformationViewModel?: PageInformationViewModel, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}` + BaseModuleConfig._Localization_Page_Information,
            pageInformationViewModel,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

     /**
     * Get PageInformation By Key and Culture
     * 
     * @param key Gets or Sets Key
     * @param culture Gets or Sets Culture
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPageInformationByKeyandCulture(key?: string, culture?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getPageInformationByKeyandCulture(key?: string, culture?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getPageInformationByKeyandCulture(key?: string, culture?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getPageInformationByKeyandCulture(key?: string, culture?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        
        queryParameters = this.commonComponent.setQueryParams(key, 'Key', queryParameters);
        queryParameters = this.commonComponent.setQueryParams(culture, 'Culture', queryParameters);
       

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        this.basePath = BaseUrlConfig.BasePath + ModuleConfig.Base;

        return this.httpClient.get<any>(`${this.basePath}` + BaseModuleConfig._Localization_Get_By_Key_Culture,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
